<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[nvm node版本管理]]></title>
    <url>%2FMac%2Fnvm%20node%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%20%2F</url>
    <content type="text"><![CDATA[nvm管理 node 版本，nvm 地址 ##安装使用 curl 方式 1curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash 或 Wget 1wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash 验证是否安装成功 1command -v nvm 成功返回 nvm 完成后 nvm 就被安装在了 ~/.nvm 下，接下来就需要配一下环境变量，使用的 zsh 的话，就需要在 ~/.zshrc 这个配置文件中配置，否则在 ~/.profile 或 ~/.bash_profile 中配置。在配置文件中添加 12export NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh" # This loads nvm 但是 . &quot;$NVM_DIR/nvm.sh&quot; 会拖慢终端的启动。解决方案 issue#860 使用 --no-use 和 手动指定默认 node 路径来加快执行速度默认路径可以通过 nvm which default 获取 123export NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh" --no-useexport PATH=$HOME/.nvm/versions/node/v8.0.0/bin/:$PATH 输入 nvm 可以看到如下信息 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758Node Version ManagerNote: &lt;version&gt; refers to any version-like string nvm understands. This includes: - full or partial version numbers, starting with an optional "v" (0.10, v0.1.2, v1) - default (built-in) aliases: node, stable, unstable, iojs, system - custom aliases you define with `nvm alias foo` Any options that produce colorized output should respect the `--no-colors` option.Usage: nvm --help Show this message nvm --version Print out the latest released version of nvm nvm install [-s] &lt;version&gt; Download and install a &lt;version&gt;, [-s] from source. Uses .nvmrc if available --reinstall-packages-from=&lt;version&gt; When installing, reinstall packages installed in &lt;node|iojs|node version number&gt; --lts When installing, only select from LTS (long-term support) versions --lts=&lt;LTS name&gt; When installing, only select from versions for a specific LTS line nvm uninstall &lt;version&gt; Uninstall a version nvm uninstall --lts Uninstall using automatic LTS (long-term support) alias `lts/*`, if available. nvm uninstall --lts=&lt;LTS name&gt; Uninstall using automatic alias for provided LTS line, if available. nvm use [--silent] &lt;version&gt; Modify PATH to use &lt;version&gt;. Uses .nvmrc if available --lts Uses automatic LTS (long-term support) alias `lts/*`, if available. --lts=&lt;LTS name&gt; Uses automatic alias for provided LTS line, if available. nvm exec [--silent] &lt;version&gt; [&lt;command&gt;] Run &lt;command&gt; on &lt;version&gt;. Uses .nvmrc if available --lts Uses automatic LTS (long-term support) alias `lts/*`, if available. --lts=&lt;LTS name&gt; Uses automatic alias for provided LTS line, if available. nvm run [--silent] &lt;version&gt; [&lt;args&gt;] Run `node` on &lt;version&gt; with &lt;args&gt; as arguments. Uses .nvmrc if available --lts Uses automatic LTS (long-term support) alias `lts/*`, if available. --lts=&lt;LTS name&gt; Uses automatic alias for provided LTS line, if available. nvm current Display currently activated version nvm ls List installed versions nvm ls &lt;version&gt; List versions matching a given &lt;version&gt; nvm ls-remote List remote versions available for install --lts When listing, only show LTS (long-term support) versions nvm ls-remote &lt;version&gt; List remote versions available for install, matching a given &lt;version&gt; --lts When listing, only show LTS (long-term support) versions --lts=&lt;LTS name&gt; When listing, only show versions for a specific LTS line nvm version &lt;version&gt; Resolve the given description to a single local version nvm version-remote &lt;version&gt; Resolve the given description to a single remote version --lts When listing, only select from LTS (long-term support) versions --lts=&lt;LTS name&gt; When listing, only select from versions for a specific LTS line nvm deactivate Undo effects of `nvm` on current shell nvm alias [&lt;pattern&gt;] Show all aliases beginning with &lt;pattern&gt; nvm alias &lt;name&gt; &lt;version&gt; Set an alias named &lt;name&gt; pointing to &lt;version&gt; nvm unalias &lt;name&gt; Deletes the alias named &lt;name&gt; nvm reinstall-packages &lt;version&gt; Reinstall global `npm` packages contained in &lt;version&gt; to current version nvm unload Unload `nvm` from shell nvm which [&lt;version&gt;] Display path to installed node version. Uses .nvmrc if available nvm cache dir Display path to the cache directory for nvm nvm cache clear Empty cache directory for nvmExample: nvm install v0.10.32 Install a specific version number nvm use 0.10 Use the latest available 0.10.x release nvm run 0.10.32 app.js Run app.js using node v0.10.32 nvm exec 0.10.32 node app.js Run `node app.js` with the PATH pointing to node v0.10.32 nvm alias default 0.10.32 Set default node version on a shellNote: to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`) 可以看到 nvm 的全部命令各项命令的详细用法及含义可参考 nvm文档 使用查看可用的安装版本： 1nvm ls-remote 最好使用 LTS(Long Term Support) 版本 安装 node 12nvm install v6.11.0nvm install node #最新版本 如果您想查看已安装的版本： 1nvm ls 注：如果已经安装了 node，最好先删除已安装的 node 和全局 node 模块(node_modules)。node 命令在 /usr/local/bin/nodenpm 命令在 /usr/local/lib[lib64]/node_modules/npm npm ls -g --depth=0 // 查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装 1234npm ls -g --depth=0 // 查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装sudo rm -rf /usr/local/lib/node_modules // 删除全局 node_modules 目录sudo rm /usr/local/bin/node // 删除 nodecd /usr/local/bin &amp;&amp; ls -l | grep "../lib/node_modules/" | awk '&#123;print $9&#125;'| xargs rm #删除全局 node 模块注册的软链 安装完成，nvm 会将各个版本的node安装在 ~/.nvm/versions/node 目录下 看看目录下有些什么，安装的版本文件 12ls -a ~/.nvm/versions/node. .. v6.11.0 nvm 会在 $PATH 前面安插指定版本的目录，可以确认实际的 $PATH 看看： 1echo $PATH 接下来我们可以使用 nvm use &lt;version&gt; 切换版本： 1nvm use v6.11.0 指定一个默认的 node 版本 12nvm alias default v6.11.0nvm current #查看当前版本 设置别名 nvm alias my_alias &lt;name&gt;，方便选择版本 1nvm alias 6 v6.11.0 nvm install 命令经常执行失败，这时你需要到 nodejs 官网下载你想安装的版本，解压缩，然后复制到 ~/.nvm/versions/node/ 文件夹中，同样可以使用 nvm 切换。 使用 .nvmrc 文件配置项目所使用的 node 版本 如果你的默认 node 版本（通过 nvm alias 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 .nvmrc 文件，在文件中指定使用的 node 版本号 1234cd &lt;项目根目录&gt; #进入项目根目录echo "v6.11.0" &gt; .nvmrc #添加 .nvmrc 文件并指定版本nvm use #无需指定版本号，会自动使用 .nvmrc 文件中配置的版本node -v #查看 node 是否切换为对应版本 nvm 切换镜像源根据 nvm 官方提供的帮助文档，我们可以通过以下命令进行切换 1export NVM_NODEJS_ORG_MIRROR="http://npm.taobao.org/mirrors/node" http://npm.taobao.org/mirrors/node 是 淘宝NPM镜像 提供的国内 Node.js 的安装镜像源。 但是种方式，在每次重启终端都会失效。如果并不想每次打开终端，都需要重新设置 NVM_NODEJS_ORG_MIRROR 环境变量。需要在终端配置文件中添加： 12export NVM_NODEJS_ORG_MIRROR="http://npm.taobao.org/mirrors/node"source ~/.nvm/nvm.sh Windows 系统我们可以找到 nvm-windows 软件的安装目录中的 settings.txt 文件，增加以下内容: 1node_mirror=http://npm.taobao.org/mirrors/node/ npm 镜像npm 默认从国外的源 https://registry.npmjs.org/ 获取和下载包信息，国内访问速度很不理想。 国内 npm 镜像源 cnpmjs 镜像：搜索地址：https://cnpmjs.org/registry: https://r.cnpmjs.org/ 淘宝 npm 镜像：搜索地址：https://npm.taobao.org/registry: https://registry.npm.taobao.org/ 使用方法1.临时使用(不建议) 1npm install express --registry https://r.cnpmjs.org/ 2.持久使用 命令行修改 npm 配置 12npm config set registry https://r.cnpmjs.org/ #配置 registrynpm config get registry #验证配置是否修改成功 或添加 npm 配置文件 .npmrc 编辑 ~/.npmrc 加入下面内容 1registry = https://r.cnpmjs.org 参考链接node版本管理工具nvm-Mac下安装及使用使用nvm安装管理多个版本的node.js(适用于Mac和Windows系统)国内优秀npm镜像推荐及使用]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>nvm</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cmder]]></title>
    <url>%2Fwin%2Fcmder%2F</url>
    <content type="text"><![CDATA[cmder简介Cmder是一款Windows环境下非常简洁美观易用的 cmd 替代者,因为它是即压即用的存在，所以点击根目录下的 Cmder.exe 即可运行。下载的时候，有两个版本，分别是 mini 与 full 版；唯一的差别在于有没有内建 msysgit 工具，这是 Git for Windows 的标准配备；全安装版 Cmder自带了 msysgit,除了 git 本身这个命令之外, 里面可以使用大量的 linux 命令；比如 grep, curl, tar, unzip, ssh, bash, perl 等。 配置 Cmder启动 Cmder1.把 Cmder 加到环境变量，把 Cmder.exe 存放的目录添加到系统环境变量 Path；加完之后, Win+r 一下输入 cmder,即可使用。2.添加 Cmder 到右键菜单，以管理员权限打开cmder终端输入以下语句回车即可: Cmder.exe /REGISTER ALL。3.使用AutoHotKey热键，在ahk文件中添加如下代码，则使用 Alt+c 来打开 cmder ,但有些新增命令无法使用，如 node npm 等。 12!c:: run, D:\**\cmder_mini\Cmder.exereturn 修改命令提示符号Cmder 预设的命列列提示符号是 λ;如果用着不习惯，可以将这个字元改成 Mac/Linux 环境下常见的 $ 符号，具体操作如下：打开 cmder 安装目录下的 \vendor\clink.lua 文件，将里面的 λ 替换为 $。但在使用 powerShell 时需要另行设置，将 \vendor\profile.ps1 文件中的 λ 替换为 $ 。 中文乱码在设置中添加语言环境，win+alt+p 打开设置面板，找到 Startup -&gt; Envrioment 选项在下面的文本框里添加一行 set LANG=zh_CN.UTF-8，然后重启。 样式背景的透明度,找到 Features -&gt; Transparency 选项就可调节透明度。Features -&gt; Colors 可以调节颜色，schemes 可以选择主题。 别名自定义 aliases 打开Cmder目录下的 config 文件夹，里面的 user-aliases 文件就是我们可以配置的别名文件。像下面几个。 123..=cd .. //输入..返回上一级文件夹gc=git commit -m $1 //git提交sbl="D:\Program Files\Sublime Text 3\sublime_text.exe" $1 -new_console:s50H //在窗口右边50%横向打开sublime 但 user-aliase 中的别名只能在 cmd 下使用，在使用 powershell 时需要编辑 \vendor\profile.ps1 文件,如 1234Set-Alias sbl "C:\Program Files\Sublime Text 3\sublime_text.exe"function Git-Status &#123; git status &#125;Set-Alias gs Git-Status 快捷键 打开设置面板 =&gt; Win+Alt+P 打开新的页签 =&gt; Ctrl+T 关闭页签 =&gt; Ctrl+W 切换页签 =&gt; Ctrl+Tab 关闭所有页签 =&gt; Alt+F4 快速打开一个 CMD =&gt; Shift+Alt+1 快速打开一个 PowerShell =&gt; Shift+Alt+2 快速打开一个 PowerShell(系统管理员权限) =&gt; Shift+Alt+2 快速切换到第 1 个页签 =&gt; Ctrl+1 快速切换到第 n 个页签(n值无上限) =&gt; Ctrl+n 历史命令搜索 =&gt; Ctr+r 全屏 =&gt; Alt+Enter Chocolatey 软件包管理Chocolatey 是用命令行来安装应用程序的个包管理工具。 安装 chocolatey使用cmd，运行如下命令即可 1@"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" &amp;&amp; SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin" choco 安装软件安装软件命令 choco install softwareName, 短写是 cinst softwareName可安装的应用程序，默认安装在 C:\Program Files\，可以参见其 Package 列表 以下是 window 下开发常用的开发环境应用: 123456789101112choco install autohotkey.portable #安装 AutoHotkey (Portable)choco install nodejs.install #安装 nodechoco install git.install #安装 gitchoco install ruby #安装 rubychoco install python #安装 pythonchoco install jdk8 #安装 JDK8choco install googlechrome #安装 Chromechoco install google-chrome-x64 #Google Chrome (64-bit only)choco install firefox #安装 firefoxchoco install notepadplusplus.install #安装 notepad++choco install Atom #安装 Atomchoco install SublimeText3 #安装 SublimeText3 参考链接cmder 一个比cmd强n倍的神器在 windows 下安装 Cmderchocolateycmder]]></content>
      <categories>
        <category>win</category>
      </categories>
      <tags>
        <tag>cmder</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oh-my-zsh 插件]]></title>
    <url>%2FMac%2Foh-my-zsh%20%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[oh-my-zsh 插件oh-my-zsh 自带很多插件，有兴趣可以看wiki的插件介绍 zsh-syntax-highlighting高亮 zsh 的关键字。 安装1git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting 在 ~/.zshrc 中的 plugins=() 处添加 zsh-syntax-highlighting autojump目录快速跳转，它会根据你 cd 的历史纪录智能判断你想去到哪个目录。也可以用 oh-my-zsh 自带的插件 z。 安装1brew install autojump 或 1234git clone git://github.com/joelthelion/autojump.gitcd autojump #解压缩后进入目录./install.py 根据提示在~/.zshrc 或 ~/.bash_profile 中添加 1[ -f /usr/local/etc/profile.d/autojump.sh ] &amp;&amp; . /usr/local/etc/profile.d/autojump.sh 在 ~/.zshrc 中的 plugins=() 处添加 autojump 使用cd 目录 之后，使用 j 文件名 就可以到文件目录 j -h 查看helpjc 打开子目录jo 打开目录的文件管理器jco 打开子目录的文件管理器 j --stat 各个目录的权重 j -i [权重] // 增加j -d [权重] // 减少 gitoh-my-zsh 默认开启的插件，提供了大量 git 的 alias。 提供git的 aliase 常用有： Alias Command gaa git add -all gst git status glola git log –graph –pretty = format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit –all gd git diff gcmsg git commit -m gpoat git push origin —all &amp;&amp; git push origin —tags gl git pull zsh-autosuggestions这是模仿 fish shell 的一个插件，作用基本上就是根据历史记录即时提示。 安装1git clone git：//github.com/zsh-users/zsh-autosuggestions $ ZSH_CUSTOM / plugins / zsh-autosuggestions 添加插件 plugins=(zsh-autosuggestions) 使用使用 →按键 、 End 或 ctrl+E 来完成。 更改颜色：将 配置文件 放到 $ZSH_CUSTOM （/Users/user/.oh-my-zsh/custom） 文件下更改 ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#39;fg=8&#39; 颜色为iTerm的偏好设置（写颜色或数字0-15）。或者直接更改 Black Bright 的颜色。 icdiff安装1brew install icdiff 使用比较两个文件的差异 1icdiff &lt;file_1&gt; &lt;file_2&gt; git 用法 1git difftool --extcmd icdiff 精简用法 1git icdiff 如果你想直接git diff的时候直接用icdiff取代 在 /usr/local/bin/ 创建脚本 ext-diff 添加内容： 12#!/bin/shicdiff $2 $5 给脚本权限 1chmod +x ext-diff 在git配置文件 ~/.gitconfig 中添加 12[diff] external = /usr/local/bin/ext-diff 更新 source ~/.gitconfig 这样就替换git默认的diff，但不建议这样使用。 错误1UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 32: ordinal not in range(128) 根据 issues36 可知，需要使用Python3，更改 /usr/local/Cellar/icdiff/1.9.0/bin/icdiff 文件的 #!/usr/bin/env python 为 #!/usr/bin/env python3。（已经安装python3）。 extract功能强大的解压插件，所有类型的文件解压一个命令x全搞定，再也不需要去记tar后面到底是哪几个参数了。 直接添加插件 plugins=(extract) sublime该插件可以使用命令行打开sublime。常用命令如下： 1234st # 直接打开sublimest file_a # 用sublime打开文件 filest dir_a # 用sublime打开目录 dirstt # 在sublime打开当前目录，相当于 st . 直接添加插件 plugins=(sublime) sudo它的作用就是连按两下 Esc 键在命令的开头加上或去掉 sudo 关键字。 直接添加插件 plugins=(sudo) 参考链接一些命令行效率工具我常用的 oh-my-zsh 插件issues14issues36]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>zsh</tag>
        <tag>plugin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iTerm2 + oh my zsh]]></title>
    <url>%2FMac%2FiTerm2%20zsh%2F</url>
    <content type="text"><![CDATA[iTerm2 + oh my zshiTerm2iTerm2 下载地址 http://www.iterm2.com 偏好设置 打开热键 Preferences - Keys，勾选 Hotkey 中的 Show/hide iTerm2 with a system-wide hotkey，然后设定一个热键。如 Command + .，然后按 Command + . 就可以随时调出或者隐藏 iTerm2 了。 颜色主题 Preferences - Profiles - Colors 右下角 Color Presets 选择主题。或从 iTerm Themes 网站中下载第三方主题包，选择主题下的 import 操作，把下载的主题导入。 终端灰蒙蒙 Preferences - Profiles - Text - Text Rendering，将 Draw bold text in bright colors 前面的勾去掉。 复用上个会话的目录 Preferences - Profiles - Working Directory 勾选 Reuse previous session’s directory。 Solarized主题更改配色方案为 Solarized直接去主页下载或者使用 Git 1git clone git://github.com/altercation/solarized.git 然后双击 solarized/iterm2-colors-solarized/ 双击里面的文件，或 import 导入，然后再偏好设置中选择相应的主题。也有terminal的配色 solarized/osx-terminal.app-colors-solarized 双击，然后再偏好设置中更改默认主题。 Vim主题配置将 solarized/vim-colors-solarized/colors 中的 solarized.vim 文件复制到 ~/.vim/colors 目录下。定修改 .vimrc 文件。命令如下： 12345678$ cd solarized/vim-colors-solarized/colors$ mkdir -p ~/.vim/colors$ cp solarized.vim ~/.vim/colors/$ vi ~/.vimrcsyntax enableset background=darkcolorscheme solarized item2启动慢插件oh-my-zsh加载的插件太多 12vi ~/.zshrcplugins=(git autojump zsh-syntax-highlighting) 缓存清理系统日志 1sudo rm /private/var/log/asl/*.asl 打开 item2 时使用 /usr/bin/login 命令使用户登录 login 命令需要读取 asl 文件，当 asl 文件很大时就会拖慢启动速度。所以也可以不让 login 命令显示上次登录时间：打开 iTerm2 的偏好设置里，在 Profiles - General - Command 里选择为 Command，然后里边写入 /usr/bin/login -pfq xxx 其中 xxx 是你的用户名。 nvm. &quot;$NVM_DIR/nvm.sh&quot; 会拖慢了终端的启动。解决方案 issue#860 使用 --no-use 和 手动指定默认 node 路径来加快执行速度默认路径可以通过 nvm which default 获取 123export NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh" --no-useexport PATH=$HOME/.nvm/versions/node/v8.0.0/bin/:$PATH iTerm2快捷键标签 新建标签：command + t 关闭标签：command + w 切换标签：command + 数字 / command + 左右方向键 分屏 垂直分屏：command + d 水平分屏：command + shift + d 屏幕 切换全屏：command + enter 清屏1：command + r 清屏2：ctrl + l 查找：command + f 查看历史命令：command + ; 查看剪贴板历史：command + shift + h 搜索命令历史：ctrl + r 文本编辑 交换光标处文本：ctrl + t 前进后退：ctrl + f/b (相当于左右方向键) 到行首：ctrl + a 到行尾：ctrl + e 删除当前光标的字符：ctrl + d 删除光标之前的字符：ctrl + h 删除到文本末尾：ctrl + k（光标后） 删除到文本开始：ctrl + u（光标前） 删除光标之前的单词：ctrl + w zshMac系统自带了 zsh,但不是最新版本的 zsh，使用 zsh --version 查看版本号，需要使用 5.x 版本，如果不是可以用 brew install 安装最新的 5.x。 1234brew install zshsudo rm /bin/zsh # 替换系统自带 zshsudo ln -s `brew --prefix zsh`/bin/zsh /bin/zshchsh -s /bin/zsh # 切换系统当前用户的默认 shell 为 zsh 安装完毕，Command + W 关闭 iTerm2 当前窗口，然后按 Command + . 重新打开，此时 shell 已经换成 zsh 了。切换到 bash 系统 1chsh -s /bin/bash oh-my-zshoh-my-zsh 是一套十分强大的 zsh 配置方案。具有自动补全参数和自定义配置功能。 安装curl 方式 1sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" wget 方式 1sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)" 配置 zshrc修改 .zshrc(~/.zshrc) 文件 123ZSH_THEME="agnoster" # 使用 agnoster 主题，颜值高DEFAULT_USER="你的用户名" # 增加这一项，可以隐藏掉路径前面那串用户名plugins=(git autojump zsh-autosuggestions) # 自己按需把要用的 plugin 写上 .oh-my-zsh/themes 文件中是所有的主题文件，可任意挑选，Oh My Zsh提供的所有主题在线预览。 修改完后，刷新配置文件，然后重新启动 iTerm 主题就有了。 1source ~/.zshrc 会有乱码问题，这时还需要安装一个Mac的字体库 Powerline-patched font 12345678# clonegit clone https://github.com/powerline/fonts.git# installcd fonts./install.sh# clean-up a bitcd ..rm -rf fonts 安装完成之后，在偏好设置中把 Anti-aliased Font 和 Non-ASCII Font 都改为 powerline 的字体。 或者直接安装 Menlo 字体补丁下载并安装 1git clone https://github.com/abertsch/Menlo-for-Powerline.git Profiles / Text，把 Anti-aliased Font 和 Non-ASCII Font 都换成 Menlo。 如果使用 MacVim 选择相应的字体添加配置到 .vimrc: 1set guifont=Menlo\ for\ Powerline 命令别名如更新 cocoapods 时 输入 pod update --verbose --no-repo-update可使用命令别名来简化命令行的输入： 1alias pod_update=&apos;pod update --verbose --no-repo-update&apos; 可以使用alias命令来显示所有命令别名永久添加，添加到.zshrc中 1234alias zshconfig=&quot;vim ~/.zshrc&quot;alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g’&quot;alias pod_update=&apos;pod update --verbose --no-repo-update&apos;alias pod_install=&apos;pod install --verbose --no-repo-update&apos; 其它补全zsh 的命令补全功能非常强大，可以补齐路径，补齐命令，补齐参数等。按下 tab 键显示出所有待选项后，再按一次 tab 键即进入选择模式，进入选择模式后，按 tab 切向下一个选项，按 shift+tab 键切向上一个选项，ctrl+f/b/n/p 可以向前后左右切换，或使用 上下左右 来切换。 跳转zsh 的目录跳转更为智能，你无需输入 cd，直接输入路径即可。.. 表示后退一级目录，../../ 表示后退两级，依次类推。（ ... 的作用和 ../../ 相同）。输入d，将列出当前 session 访问过的所有目录，再按提示的数字即可进入相应目录。 历史记录历史记录支持受限查找。比如，输入 git，再按向上箭头，会搜索用过的所有 git 命令。 通配符ls *.png 查找当前目录下所有 png 文件，ls **/*.png 递归查找。 Command 键按住 Command 键: 可以拖拽选中的字符串； 点击 url：调用默认浏览器访问该网址； 点击文件夹：在 finder 中打开该文件夹； 点击文件：调用默认程序打开文件； 同时按住 option 键，可以以矩形选中，类似于 vim 中的 ctrl v 操作。 高亮当前鼠标的位置一个标签页中开的窗口太多，有时候会找不到当前的鼠标，Command+/ 找到它。 参考链接iTerm2 &amp; Oh My Zsh：完爆mac终端Iterm2+solarized+zsh+oh my zshitem2启动慢的解决让 iTrem 2 + zsh 启动不再等待一些命令行效率工具]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>iterm</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 优化和备份]]></title>
    <url>%2Fother%2FHexo%20%E4%BC%98%E5%8C%96%E5%92%8C%E5%A4%87%E4%BB%BD%2F</url>
    <content type="text"><![CDATA[Hexo 优化和备份gulp精简博客代码Next 主题在 Hexo 引擎解析 md 时生成的代码会包含大量的无用空白。这些空白会增加文档的大小,使得网站在响应上不够迅速,影响体验。使用的 gulp 是一个前端项目构建工具,用自动化构建工具增强你的工作流程gulp中文官网。 gulp简介首先是 gulp 的一些简单介绍：gulp是基于nodejs流的自动化构建工具，可以快速构建项目并减少频繁的I/0操作。你可以利用gulp插件完成各种自动化任务：测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。 安装安装有两种方式：1.全局安装gulp 1npm install -g -d gulp 运行 gulp -v ,如果正常打印版本号则安装成功。 2.安装到项目本地先CD到你的项目根目录 1npm install gulp --save-dev --save-dev 保存 gulp 到项目依赖文件 package.json 的devDependencies 里面。 插件gulp的插件列表可以参考gulp的插件官网。 以下是比较常用的插件 gulp-minify-css 压缩css gulp-htmlmin 压缩html gulp-uglify 压缩js gulp-rename 重命名文件,通常压缩后的带.min后缀 gulp-jshint jshint,js静态检查 gulp-concat 合并多个文件 gulp-imagemin 压缩图片 gulp-clean 清理文件或目录 gulp-load-plugins 自动加载插件 run-sequence 控制任务执行顺序 npm install [plugins-name] –save上述命令安装插件的同时也会把插件作为项目依赖写入package.json文件. gulp APIgulp.src（gobs[, options]) 输出（Emits）符合所提供的匹配模式（glob）或者匹配模式的数组（array of globs）的文件。 将返回一个 Vinyl files 的 stream 它可以被 piped 到别的插件中。 123gulp.src('src/js/*.js') //模糊匹配src/js文件夹下所有js文件 .pipe( concat('app.js')) //合并后的文件名 .pipe(gulp.dest('pub/dist/js'));//合并后文件路径 gulp.src通配符匹配：.js匹配当前目录下的所有js文件,不指名扩展名则匹配所有类型 /.js匹配所有第一层子文件夹的js文件,第二层请用//.js**/.js匹配所有文件夹层次下的js文件, 包括当前目录?匹配文件路径中的一个字符(不会匹配路径分隔符)[…]匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个.!匹配任何与括号中给定的任一模式都不匹配的 下面以一系列例子来加深理解： 1234567891011*能匹配 a.js,x.y,abc,abc/,但不能匹配a/b.js*.*能匹配 a.js,style.css,a.b,x.y*/*/*.js能匹配 a/b/c.js,x/y/z.js,不能匹配a/b.js,a/b/c/d.js**能匹配 abc,a/b.js,a/b/c.js,x/y/z,x/y/z/a.b,能用来匹配所有的目录和文件**/*.js 能匹配 foo.js,a/foo.js,a/b/foo.js,a/b/c/foo.jsa/**/z能匹配 a/z,a/b/z,a/b/c/z,a/d/g/h/j/k/za/**b/z 能匹配 a/b/z,a/sb/z,但不能匹配a/x/sb/z,因为只有单**单独出现才能匹配多级目录?.js 能匹配 a.js,b.js,c.jsa??能匹配 a.b,abc,但不能匹配ab/,因为它不会匹配路径分隔符[xyz].js只能匹配 x.js,y.js,z.js,不会匹配xy.js,xyz.js等,整个中括号只代表一个字符[^xyz].js能匹配 a.js,b.js,c.js等,不能匹配x.js,y.js,z.js gulp.dest(path[, options]) 能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。 12345gulp.src(&apos;./client/templates/*.jade&apos;) .pipe(jade()) .pipe(gulp.dest(&apos;./build/templates&apos;)) .pipe(minify()) .pipe(gulp.dest(&apos;./build/minified_templates&apos;)); 文件被写入的路径是以所给的相对路径根据所给的目标目录计算而来。类似的，相对路径也可以根据所给的 base 来计算。 gulp.task(name[, deps], fn)定义一个使用 Orchestrator 实现的任务（task）。 123gulp.task(&apos;mytask&apos;, [&apos;array&apos;, &apos;of&apos;, &apos;task&apos;, &apos;names&apos;], function() &#123; // 做一些事&#125;); gulp.watch(glob [, opts], tasks) 或 gulp.watch(glob [, opts, cb])监视文件，并且可以在文件发生改动时候做一些事情。它总会返回一个 EventEmitter 来发射（emit） change 事件。 需要在文件变动后执行的一个或者多个通过 gulp.task() 创建的 task 的名字， 1234var watcher = gulp.watch('js/**/*.js', ['uglify','reload']);watcher.on('change', function(event) &#123; console.log('File ' + event.path + ' was ' + event.type + ', running tasks...');&#125;); 每次变动需要执行的 callback。 123gulp.watch(&apos;js/**/*.js&apos;, function(event) &#123; console.log(&apos;File &apos; + event.path + &apos; was &apos; + event.type + &apos;, running tasks...&apos;);&#125;); gulp优化在hexo顶层目录运行以下代码来安装 gulp 和插件 1npm install --save-dev gulp gulp-clean gulp-load-plugins gulp-minify-css gulp-htmlmin gulp-imagemin gulp-uglify run-sequence 在hexo顶层目录下创建 gulpfile.js 文件 内容如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596var gulp = require('gulp'), plugins = require('gulp-load-plugins')(); //自动插件引用var Hexo = require('hexo');var runSequence = require('run-sequence');// 清除public文件夹gulp.task("clean",function() &#123; return gulp.src("public/*") .pipe(plugins.clean()); &#125;);// 压缩css文件gulp.task("minify-css",function() &#123; return gulp.src(["public/**/*.css","!public/**/*.min.css"]) .pipe(plugins.minifyCss(&#123;compatibility: "ie8"&#125;)) .pipe(gulp.dest("./public")); &#125;);// 压缩js文件gulp.task("minify-js",function() &#123; return gulp.src(["public/**/*.js","!public/**/*.min.js"]) .pipe(plugins.uglify()) .pipe(gulp.dest("./public"));&#125;);// 压缩html文件gulp.task("minify-html",function() &#123; return gulp.src("public/**/*.html") .pipe(plugins.htmlmin(&#123; removeComments: true, collapseWhitespace: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest("./public"));&#125;);// 压缩 public/images 和 /public/uploads目录内图片gulp.task('minify-images', function() &#123; gulp.src(['./public/images/**/*.&#123;png,jpg,gif,ico&#125;','./public/uploads/**/*.&#123;png,jpg,gif,ico&#125;']) .pipe(plugins.imagemin(&#123; optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: true, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: true, //类型：Boolean 默认：false 多次优化svg直到完全优化 &#125;)) .pipe(gulp.dest('./public/uploads'));&#125;);// 利用Hexo API 来生成博客内容， 效果和在命令行运行： hexo g 一样var hexo = new Hexo(process.cwd(), &#123;&#125;);gulp.task('generate', function(cb) &#123; hexo.init().then(function() &#123; return hexo.call('generate', &#123; watch: false &#125;); &#125;).then(function() &#123; return hexo.exit(); &#125;).then(function() &#123; return cb() &#125;).catch(function(err) &#123; hexo.exit(err); return cb(err); &#125;)&#125;);// 利用Hexo API 来发布博客， 效果和在命令行运行： hexo d 一样gulp.task('deploy', function(cb) &#123; hexo.init().then(function() &#123; return hexo.call('deploy', &#123; watch: false &#125;); &#125;).then(function() &#123; return hexo.exit(); &#125;).then(function() &#123; return cb() &#125;).catch(function(err) &#123; hexo.exit(err); return cb(err); &#125;)&#125;);// 用run-sequence并发执行，同时处理html，css，js，imggulp.task('minify', function(cb) &#123; runSequence(['minify-html', 'minify-css', 'minify-js', 'minify-images'], cb);&#125;);// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆gulp.task('build', function(cb) &#123; runSequence('clean', 'generate', 'minify', 'deploy', cb)&#125;);gulp.task('default', ['build']); 到这里对 gulp 的配置就完成了，只需要每次在执行 gulp 就可以生成静态文件并实现发布。 1gulp 但是每次都要把 public 中的文件都删除，重新生成静态文件并发布会比较慢，先记下这个问题，以后解决。 hexo备份备份新建仓库 blog 来存储博客原始文件，先看一下哪些文件是必须备份的：像站点配置 _config.yml，主题 theme，博客文件 source，文章的模板 caffolds，安装包 package.json， 提交忽略配置 .gitignore 这些文件是需要备份的。其它可以不需要，则 .gitignore 如下配置(已经配置好了): 1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ 直接在博客顶层目录使用以下命令： 12345git initgit add -Agit commit -m "first commit"git remote add origin git@github.com:yourName/blog.gitgit push -u origin master 这样就把博客备份到仓库中了。在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行备份和发布： 1234git add .git commit -m "..."git push #备份hexo g -d #发布 还原使用 clone 拷贝仓库 12git init git clone git@github.com:yourName/blog.git 在本地新拷贝的文件夹下通过以下命令： 123cd blognpm install #模块安装hexo s -g #预览 注：这里没用 hexo init 初始化 此时用了 hexo init，则站点的配置文件 _config.yml 里面内容会被清空使用默认值，所以不要用 hexo init。 预览http://localhost:4000/没有问题，就可以使用了。 参考链接gulp中文官网优化Hexo博客 - 压缩 HTML、CSS、JS、IMG 等hexo api知乎 CrazyMilk 和 skycrown 的回答]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 个人博客]]></title>
    <url>%2Fother%2FHexo%20%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo 个人博客简介Hexo是基于Node.js的静态博客框架，简单、轻量，其生成的静态网页可以托管在Github。使用 GitHubPages + Hexo，一种简单高效的实现方式来搭建个人的博客。 环境准备安装node.js去nodejs官网下载对应系统的安装包，按提示安装。 或 Homebrew 安装方式，此安装方式无需重启 1brew install node 安装Git一般都安装了，查看是否安装 git 命令，没有安装会提示安装。希望下载最新的可以去git官网下载 安装hexo使用npm安装 1sudo npm install -g hexo-cli 安装完成创建并初始化放博客的文件夹,然后定位到存储博客的目录并安装。 123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 解决 Error: Cannot find module &#39;./build/Release/DTraceProviderBindings&#39; 错误删除node中的 lib/node_modules/hexo-cli 和 bin/hexo 重新安装 目前我安装所用的本地环境如下：(可以通过hexo -v查看） 123456789101112hexo: 3.3.7hexo-cli: 1.0.3os: Darwin 16.5.0 darwin x64http_parser: 2.7.0node: 6.11.0v8: 5.1.281.102uv: 1.11.0zlib: 1.2.11ares: 1.10.1-DEVicu: 58.2modules: 48openssl: 1.0.2k hexo 命令 hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹 hexo server (hexo s) 启动本地web服务，用于博客的预览 hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台） hexo new (hexo n) “postName” 新建文章 hexo new (hexo n) page “pageName” 新建页面 hexo clean 清除缓存文件和已生成的静态文件 hexo d -g #生成部署 (-g部署之前预先生成静态文件)hexo s -g #生成预览 选项 hexo –safe 安全模式，在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。 hexo –debug 调试模式，在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次。 hexo –silent 简洁模式，隐藏终端信息 主题设置hexo 提供很多主题 这里选了一个极简的主题NexT，也是Hexo主题中最受欢迎的一个。 下载主题12cd your-hexo-file #Hexo 站点目录git clone https://github.com/iissnan/hexo-theme-next themes/next 失败的话直接到NexT发布页面下载并解压所下载的压缩包至站点的 themes 目录,需要将文件名改为next。 启用主题打开站点配置文件 _config.yml ,找到 theme 字段，并将其值更改为next 在切换主题之后、验证之前， 我们最好清除 Hexo 的缓存 1hexo clean 启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 1hexo s --debug 在服务启动的过程，注意观察命令行输出是否有任何异常信息,这些信息将帮助他人更好的定位错误。使用浏览器访问 http://localhost:4000，检查站点是否正确运行。 主题设定基础配置123456789101112title: #你博客的标题subtitle: #你博客的副标题description: #你博客的描述author: #你的名字language: zh-Hans #语言 中文theme: next #安装的主题名称deploy: #发布 type: git #使用Git 发布 repo: https://github.com/username/username.github.io.git #你的Github仓库 url: http://yoursite.com #你的站点地址permalink: :title/ #url结构 SchemeScheme 是 NexT 为提供多种不同的外观而添加的，目前 NexT 支持三种样式他们是： Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist - Muse 的紧凑版本，整洁有序的单栏外观 Pisces - 双栏 Scheme，小家碧玉似的清新 更改主题配置文件 scheme 关键字 菜单第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标(Font Awesome)。 菜单名称在 {language}.yml 文件中设置。菜单项的图标，对应的字段是 menu_icon，而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。 添加菜单需要创建页面，如标签界面 1hexo new page tags 创建完成后，在对应的目录下找到 index.md 文件，进行如下的修改： 123456---title: tags # 标签名字（可为空）date: 2017-06-29 16:28:46type: &quot;tags&quot; # 将页面的类型设置为 tags,主题将自动为这个页面显示为标签云comments: false # 如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，设置为 false--- type 有分类 categories 标签 tags 侧栏sidebar 字段来控制侧栏的行为其一是侧栏的位置 sidebar.position left - 靠左放置 right - 靠右放置 其二是侧栏显示的时机 sidebar.display post - 默认行为，在文章页面（拥有目录列表）时显示 always - 在所有页面中都显示 hide - 在所有页面中都隐藏（可以手动展开） remove - 完全移除 头像avatar 设置成头像的链接地址。其中，头像的链接地址可以是完整的互联网或站点内的地址（将头像放置主题目录下的 source/images/ 配置为avatar: /images/avatar.png） 否显示阅读全文将 auto_excerpt 的 enable 设置为 ture 则显示阅读全文 12345# Automatically Excerpt. Not recommend.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: ture # 设置是否显示阅读全文 length: 150 或在文章中使用 手动进行截断，Hexo 提供的方式（推荐） 代码高亮NexT 使用 Tomorrow Theme 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties。 可更改 highlight_theme 字段 社交链接链接放置在 social 字段下，一行一个链接。其键值格式是 显示文本: 链接地址。设定链接的图标，对应的字段是 social_icons，图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀） 动画效果use_motion，根据您的需求设置值为 true 或者 false，NexT 默认开启动画效果 12use_motion: true # 开启动画效果use_motion: false # 关闭动画效果 背景动画 canvas_nest 12canvas_nest: true //开启动画canvas_nest: false //关闭动画 改变 canvas 动画的配置 打开 layout/_scripts/vendors.swig 文件，根据canvas-nest.js文档进行如下更改： 12345678&#123;% for name, internal in js_vendors %&#125; &#123;% set internal_script = url_for(theme.vendors._internal) + '/' + internal %&#125; &#123;% if name === 'canvas_nest' %&#125; &lt;script type="text/javascript" color="135,218,255" opacity="0.6" count="66" src="&#123;&#123; theme.vendors[name] | default(internal_script) &#125;&#125;"&gt;&lt;/script&gt; &#123;% else %&#125; &lt;script type="text/javascript" src="&#123;&#123; theme.vendors[name] | default(internal_script) &#125;&#125;"&gt;&lt;/script&gt; &#123;% endif %&#125;&#123;% endfor %&#125; 背景图片要添加背景图片，首先将图片 background.jpg 放到 /source/uploads/ 目录下，然后，在文件 /css/_custom/custom.styl文件中添加下面一行内容： 1body &#123; background:url(/uploads/background.jpg);&#125; 同样可以添加其它背景，如侧栏背景 sidebar ，头部 header 等。 腾讯公益404页面腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！ 新建 404.html 页面，放到主题的 source 目录下，内容如下： 123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="content-type" content="text/html;charset=utf-8;"/&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt; &lt;meta name="robots" content="all" /&gt; &lt;meta name="robots" content="index,follow"/&gt; &lt;link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homePageUrl="/" homePageName="回到我的主页"&gt; &lt;/script&gt; &lt;script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"&gt;&lt;/script&gt; &lt;script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; Github Pages设置GitHub Pages 本用于介绍托管在GitHub的项目，不过由于他的空间免费稳定，常用来做搭建博客。 每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是 username/username.github.io ，这是特殊的命名约定。你可以通过 http://username.github.io 来访问你的个人主页。 仓库创建好就可以部署了，要部署到github，需要在站点配置文件_config.xml中作如下修改： 12345deploy: type: git repo: &lt;repository url&gt; #库（Repository）地址 branch: [branch] #分支名称默认 master message: [message] #自定义提交信息 (默认为 Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;) 安装一个扩展：hexo-deployer-git 1npm install hexo-deployer-git --save 然后在命令行中执行 1hexo d 如果出现下面错误，则是因为没有设置好public key所致。 1234Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. 解决：在本机生成public key： 1ssh-keygen -t rsa -C "youremail@example.com" 然后在用户主目录里找到.ssh目录，里面有 id_rsa 和 id_rsa.pub 两个文件。然后登陆github，在SSH设置页面添加上 id_rsa.pub 文件中的内容即可。 插件SitemapSitemap 的目的是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，进而加速网页的收录速度，达到搜寻引擎友好的目的。 安装 1npm install hexo-generator-sitemap --save 在 Hexo 根目录下的 _config.yml 里配置一下 123sitemap: path: sitemap.xml template: ./sitemap_template.xml 对于国内用户还需要安装插件 hexo-generator-baidu-sitemap 1npm install hexo-generator-baidu-sitemap --save 添加配置 12baidusitemap: path: baidusitemap.xml 完成之后就可以将 sitemap 文件提交谷歌和百度，提交过程可以查看sunshine小小倩的文章。 RSS安装hexo-generator-feed 1npm install hexo-generator-feed --save 然后在 Hexo 根目录下的 _config.yml 里配置一下 1234feed: type: atom #type 表示类型, 是 atom 还是 rss2. path: atom.xml #path 表示 Feed 路径 limit: 20 #limit 最多多少篇最近文章 添加RSS链接,打开 themes/next/_config.yml 文件，rss: 部分修改为 rss: /atom.xml。 Local Search添加百度/谷歌/本地 自定义站点内容搜索 安装 hexo-generator-searchdb，在站点的根目录下执行以下命令： 1npm install hexo-generator-searchdb --save 编辑站点配置文件，新增以下内容到任意位置： 12345search: path: search.xml field: post format: html limit: 10000 编辑主题配置文件，启用本地搜索功能： 123# Local searchlocal_search: enable: true 博客管理文章可以直接把写好的文章插入到目录 /_posts 下面，后缀为.MD就行，在文章头部固定格式： 1234title: title #文章的标题，这个才是显示的文章标题，其实文件名不影响date: 2015-09-01 20:33:26 #用命令会自动生成，也可以自己写，所以文章时间可以改categories: categories #文章的分类，这个可以自己定义tags: [tag] #tag，为文章添加标签，方便搜索 或 1hexo new &quot;new article&quot; 文件的开头是属性，采用统一的yaml格式，用三条短横线分隔。 分类和标签格式 12345categories:- 日记tags:- Hexo- node.js 草稿相当于很多博客都有的“私密文章”功能。 1hexo new draft &quot;new draft&quot; 会在 source/_drafts 目录下生成一个 new-draft.md 文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到 _drafts目录之中。 如果你希望强行预览草稿，更改站点配置文件： 1render_drafts: true 或者，如下方式启动server： 1hexo server --drafts 下面这条命令可以把草稿变成文章，或者页面： 1hexo publish [layout] &lt;filename&gt; 参考链接Hexo官网手把手教你使用Hexo + Github Pages搭建个人独立博客Hexo搭建Github-Pages博客填坑教程NexT主题Hexo 入门指南GitHubPages + Hexo — 博客搭建hexo高阶教程]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇博客]]></title>
    <url>%2Fleft%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[第一篇博客一直想写博客的，但一直总是在忙项目，有时间也是玩会儿游戏，最近把游戏卸了，总算有时间了。以后会把写博客养成一个习惯，努力一个星期最少一篇，实在没时间就把之前写到印象笔记的文章重新整理一下。明天把搭建博客的过程写一下。 现在写下来激励自己，加油。]]></content>
      <categories>
        <category>left</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
</search>