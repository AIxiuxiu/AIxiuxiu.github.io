<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiuXiu</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-04T03:37:45.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xiuxiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>oh-my-zsh 插件</title>
    <link href="http://yoursite.com/Mac/oh-my-zsh%20%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/Mac/oh-my-zsh 插件/</id>
    <published>2017-06-03T12:30:02.000Z</published>
    <updated>2017-07-04T03:37:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="oh-my-zsh-插件"><a href="#oh-my-zsh-插件" class="headerlink" title="oh-my-zsh 插件"></a>oh-my-zsh 插件</h1><p><code>oh-my-zsh</code> 自带很多插件，有兴趣可以看<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="external">wiki的插件介绍</a></p>
<h2 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="external">zsh-syntax-highlighting</a></h2><p>高亮 <code>zsh</code> 的关键字。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</div></pre></td></tr></table></figure>
<p>在 <code>~/.zshrc</code> 中的 <code>plugins=()</code> 处添加 <code>zsh-syntax-highlighting</code></p>
<a id="more"></a>
<h2 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a><a href="https://github.com/wting/autojump" target="_blank" rel="external">autojump</a></h2><p>目录快速跳转，它会根据你 <code>cd</code> 的历史纪录智能判断你想去到哪个目录。也可以用 <code>oh-my-zsh</code> 自带的插件 <code>z</code>。</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install autojump</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/joelthelion/autojump.git</div><div class="line"></div><div class="line">cd autojump #解压缩后进入目录</div><div class="line">./install.py</div></pre></td></tr></table></figure>
<p>根据提示在~/.zshrc 或 ~/.bash_profile 中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ -f /usr/local/etc/profile.d/autojump.sh ] &amp;&amp; . /usr/local/etc/profile.d/autojump.sh</div></pre></td></tr></table></figure>
<p>在 <code>~/.zshrc</code> 中的 <code>plugins=()</code> 处添加 <code>autojump</code></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>cd 目录</code> 之后，使用 <code>j 文件名</code> 就可以到文件目录</p>
<p><code>j -h</code> 查看help<br><code>jc</code> 打开子目录<br><code>jo</code> 打开目录的文件管理器<br><code>jco</code> 打开子目录的文件管理器</p>
<p><code>j --stat</code> 各个目录的权重</p>
<p><code>j -i</code> [权重] // 增加<br><code>j -d</code> [权重] // 减少</p>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git" target="_blank" rel="external">git</a></h2><p><code>oh-my-zsh</code> 默认开启的插件，提供了大量 <code>git</code> 的 <code>alias</code>。</p>
<p>提供<strong>git</strong>的 <code>aliase</code> 常用有：</p>
<table>
<thead>
<tr>
<th>Alias</th>
<th>Command</th>
</tr>
</thead>
<tbody>
<tr>
<td>gaa</td>
<td>git add -all</td>
</tr>
<tr>
<td>gst</td>
<td>git status</td>
</tr>
<tr>
<td>glola</td>
<td>git log –graph –pretty = format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit –all</td>
</tr>
<tr>
<td>gd</td>
<td>git diff</td>
</tr>
<tr>
<td>gcmsg</td>
<td>git commit -m</td>
</tr>
<tr>
<td>gpoat</td>
<td>git push origin —all &amp;&amp; git push origin —tags</td>
</tr>
<tr>
<td>gl</td>
<td>git pull</td>
</tr>
</tbody>
</table>
<h2 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="external">zsh-autosuggestions</a></h2><p>这是模仿 <code>fish shell</code> 的一个插件，作用基本上就是根据历史记录即时提示。</p>
<h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git：//github.com/zsh-users/zsh-autosuggestions $ ZSH_CUSTOM / plugins / zsh-autosuggestions</div></pre></td></tr></table></figure>
<p>添加插件 <code>plugins=(zsh-autosuggestions)</code></p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>使用 <code>→按键</code> 、 <code>End</code> 或 <code>ctrl+E</code> 来完成。</p>
<p>更改颜色：<br>将 <a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/src/config.zsh" target="_blank" rel="external">配置文件</a> 放到 $ZSH_CUSTOM （/Users/user/.oh-my-zsh/custom） 文件下更改 <code>ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#39;fg=8&#39;</code> 颜色为iTerm的偏好设置（写颜色或数字0-15）。<br>或者直接更改 <strong>Black Bright</strong> 的颜色。<br><img src="http://oimhz3xpl.bkt.clouddn.com/屏幕快照 2017-06-28 下午5.37.32.png" alt="color"></p>
<h2 id="icdiff"><a href="#icdiff" class="headerlink" title="icdiff"></a><a href="https://github.com/jeffkaufman/icdiff" target="_blank" rel="external">icdiff</a></h2><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install icdiff</div></pre></td></tr></table></figure>
<h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><p>比较两个文件的差异 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">icdiff &lt;file_1&gt; &lt;file_2&gt;</div></pre></td></tr></table></figure>
<p>git 用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git difftool --extcmd icdiff</div></pre></td></tr></table></figure>
<p>精简用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git icdiff</div></pre></td></tr></table></figure>
<p>如果你想直接git diff的时候直接用icdiff取代</p>
<p>在 <code>/usr/local/bin/</code> 创建脚本 <code>ext-diff</code> 添加内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">icdiff $2 $5</div></pre></td></tr></table></figure>
<p>给脚本权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x ext-diff</div></pre></td></tr></table></figure>
<p>在git配置文件 <code>~/.gitconfig</code> 中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[diff]</div><div class="line">    external = /usr/local/bin/ext-diff</div></pre></td></tr></table></figure>
<p>更新 <code>source ~/.gitconfig</code></p>
<p>这样就替换git默认的diff，但不建议这样使用。</p>
<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UnicodeDecodeError: <span class="string">'ascii'</span> codec can<span class="string">'t decode byte 0xc3 in position 32: ordinal not in range(128)</span></div></pre></td></tr></table></figure>
<p>根据 <a href="https://github.com/jeffkaufman/icdiff/issues/36" target="_blank" rel="external">issues36</a> 可知，需要使用<strong>Python3</strong>，更改 <code>/usr/local/Cellar/icdiff/1.9.0/bin/icdiff</code> 文件的 <code>#!/usr/bin/env python</code> 为 <code>#!/usr/bin/env python3</code>。（已经安装python3）。</p>
<h2 id="extract"><a href="#extract" class="headerlink" title="extract"></a><a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/extract" target="_blank" rel="external">extract</a></h2><p>功能强大的解压插件，所有类型的文件解压一个命令x全搞定，再也不需要去记tar后面到底是哪几个参数了。</p>
<p>直接添加插件 <code>plugins=(extract)</code></p>
<h2 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h2><p>该插件可以使用命令行打开sublime。<br>常用命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">st          # 直接打开sublime</div><div class="line">st file_a   # 用sublime打开文件 file</div><div class="line">st dir_a    # 用sublime打开目录 dir</div><div class="line">stt         # 在sublime打开当前目录，相当于 st .</div></pre></td></tr></table></figure>
<p>直接添加插件 <code>plugins=(sublime)</code></p>
<h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p>它的作用就是连按两下 Esc 键在命令的开头加上或去掉 sudo 关键字。</p>
<p>直接添加插件 <code>plugins=(sudo)</code></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://wulfric.me/2015/08/zsh/" target="_blank" rel="external">一些命令行效率工具</a><br><a href="http://blog.yxjxx.com/2016/01/22/Most-useful-oh-my-zsh-plugins.html" target="_blank" rel="external">我常用的 oh-my-zsh 插件</a><br><a href="https://github.com/jeffkaufman/icdiff/issues/14" target="_blank" rel="external">issues14</a><br><a href="https://github.com/jeffkaufman/icdiff/issues/36" target="_blank" rel="external">issues36</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;oh-my-zsh-插件&quot;&gt;&lt;a href=&quot;#oh-my-zsh-插件&quot; class=&quot;headerlink&quot; title=&quot;oh-my-zsh 插件&quot;&gt;&lt;/a&gt;oh-my-zsh 插件&lt;/h1&gt;&lt;p&gt;&lt;code&gt;oh-my-zsh&lt;/code&gt; 自带很多插件，有兴趣可以看&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wiki的插件介绍&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;zsh-syntax-highlighting&quot;&gt;&lt;a href=&quot;#zsh-syntax-highlighting&quot; class=&quot;headerlink&quot; title=&quot;zsh-syntax-highlighting&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/zsh-users/zsh-syntax-highlighting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zsh-syntax-highlighting&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;高亮 &lt;code&gt;zsh&lt;/code&gt; 的关键字。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&amp;#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&amp;#125;/plugins/zsh-syntax-highlighting&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;~/.zshrc&lt;/code&gt; 中的 &lt;code&gt;plugins=()&lt;/code&gt; 处添加 &lt;code&gt;zsh-syntax-highlighting&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mac" scheme="http://yoursite.com/categories/mac/"/>
    
    
      <category term="zsh" scheme="http://yoursite.com/tags/zsh/"/>
    
      <category term="plugin" scheme="http://yoursite.com/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2 + oh my zsh</title>
    <link href="http://yoursite.com/Mac/iTerm2%20zsh/"/>
    <id>http://yoursite.com/Mac/iTerm2 zsh/</id>
    <published>2017-06-02T10:36:02.000Z</published>
    <updated>2017-07-04T03:37:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iTerm2-oh-my-zsh"><a href="#iTerm2-oh-my-zsh" class="headerlink" title="iTerm2 + oh my zsh"></a>iTerm2 + oh my zsh</h1><h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h2><p>iTerm2 下载地址 <a href="http://www.iterm2.com" target="_blank" rel="external">http://www.iterm2.com</a></p>
<h3 id="偏好设置"><a href="#偏好设置" class="headerlink" title="偏好设置"></a>偏好设置</h3><ol>
<li>打开热键 <code>Preferences - Keys</code>，勾选 <code>Hotkey</code> 中的 <code>Show/hide iTerm2 with a system-wide hotkey</code>，然后设定一个热键。如 <code>Command + .</code>，然后按 <code>Command + .</code> 就可以随时调出或者隐藏 <code>iTerm2</code> 了。</li>
<li>颜色主题 <code>Preferences - Profiles - Colors</code> 右下角 <code>Color Presets</code> 选择主题。或从 <a href="http://iterm2colorschemes.com/" target="_blank" rel="external">iTerm Themes</a> 网站中下载第三方主题包，选择主题下的 <code>import</code> 操作，把下载的主题导入。</li>
<li>终端灰蒙蒙 <code>Preferences - Profiles - Text - Text Rendering</code>，将 Draw bold text in bright colors 前面的勾去掉。</li>
<li>复用上个会话的目录 <code>Preferences - Profiles - Working Directory</code> 勾选 Reuse previous session’s directory。</li>
</ol>
<a id="more"></a>
<h3 id="Solarized主题"><a href="#Solarized主题" class="headerlink" title="Solarized主题"></a>Solarized主题</h3><p>更改配色方案为 <a href="http://ethanschoonover.com/solarized" target="_blank" rel="external">Solarized</a><br>直接去主页下载或者使用 Git</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/altercation/solarized.git</div></pre></td></tr></table></figure>
<p>然后双击 <code>solarized/iterm2-colors-solarized/</code> 双击里面的文件，或 <code>import</code> 导入，然后再偏好设置中选择相应的主题。<br>也有terminal的配色 <code>solarized/osx-terminal.app-colors-solarized</code> 双击，然后再偏好设置中更改默认主题。</p>
<h3 id="Vim主题配置"><a href="#Vim主题配置" class="headerlink" title="Vim主题配置"></a>Vim主题配置</h3><p>将 <code>solarized/vim-colors-solarized/colors</code> 中的 <code>solarized.vim</code> 文件复制到 <code>~/.vim/colors</code> 目录下。定修改 <code>.vimrc</code> 文件。命令如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> cd solarized/vim-colors-solarized/colors</div><div class="line"><span class="meta">$</span> mkdir -p ~/.vim/colors</div><div class="line"><span class="meta">$</span> cp solarized.vim ~/.vim/colors/</div><div class="line"><span class="meta">$</span> vi ~/.vimrc</div><div class="line"></div><div class="line">syntax enable</div><div class="line">set background=dark</div><div class="line">colorscheme solarized</div></pre></td></tr></table></figure>
<h3 id="item2启动慢"><a href="#item2启动慢" class="headerlink" title="item2启动慢"></a>item2启动慢</h3><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>oh-my-zsh加载的插件太多</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vi ~/.zshrc</div><div class="line">plugins=(git autojump zsh-syntax-highlighting)</div></pre></td></tr></table></figure>
<h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>清理系统日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm /private/var/log/asl/*.asl</div></pre></td></tr></table></figure>
<p>打开 item2 时使用 <code>/usr/bin/login</code> 命令使用户登录 <code>login</code> 命令需要读取 <code>asl</code> 文件，当 <code>asl</code> 文件很大时就会拖慢启动速度。所以也可以不让 <code>login</code> 命令显示上次登录时间：<br>打开 <code>iTerm2</code> 的偏好设置里，在 <code>Profiles - General - Command</code> 里选择为 <code>Command</code>，然后里边写入  <code>/usr/bin/login -pfq xxx</code> 其中 <code>xxx</code> 是你的用户名。</p>
<h4 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h4><p><code>. &quot;$NVM_DIR/nvm.sh&quot;</code> 会拖慢了终端的启动。<br>解决方案 <a href="https://github.com/creationix/nvm/issues/860" target="_blank" rel="external">issue#860</a> 使用 <code>--no-use</code> 和 手动指定默认 <code>node</code> 路径来加快执行速度</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export NVM_DIR="$HOME/.nvm"</div><div class="line">[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh"  --no-use</div><div class="line">export PATH=$HOME/.nvm/versions/node/v8.0.0/bin/:$PATH</div></pre></td></tr></table></figure>
<h3 id="iTerm2快捷键"><a href="#iTerm2快捷键" class="headerlink" title="iTerm2快捷键"></a>iTerm2快捷键</h3><p>标签</p>
<ul>
<li>新建标签：command + t</li>
<li>关闭标签：command + w</li>
<li>切换标签：command + 数字 / command + 左右方向键</li>
</ul>
<p>分屏</p>
<ul>
<li>垂直分屏：command + d</li>
<li>水平分屏：command + shift + d</li>
<li><p>屏幕</p>
</li>
<li><p>切换全屏：command + enter</p>
</li>
<li>清屏1：command + r</li>
<li>清屏2：ctrl + l</li>
<li>查找：command + f</li>
<li>查看历史命令：command + ;</li>
<li>查看剪贴板历史：command + shift + h</li>
<li>搜索命令历史：ctrl + r</li>
</ul>
<p>文本编辑</p>
<ul>
<li>交换光标处文本：ctrl + t</li>
<li>前进后退：ctrl + f/b (相当于左右方向键)</li>
<li>到行首：ctrl + a</li>
<li>到行尾：ctrl + e</li>
<li>删除当前光标的字符：ctrl + d</li>
<li>删除光标之前的字符：ctrl + h</li>
<li>删除到文本末尾：ctrl + k（光标后）</li>
<li>删除到文本开始：ctrl + u（光标前）</li>
<li>删除光标之前的单词：ctrl + w</li>
</ul>
<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><p>Mac系统自带了 <code>zsh</code>,但不是最新版本的 <code>zsh</code>，使用 <code>zsh --version</code> 查看版本号，需要使用 <strong>5.x</strong> 版本，如果不是可以用 <code>brew install</code> 安装最新的 5.x。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew install zsh</div><div class="line">sudo rm /bin/zsh    # 替换系统自带 zsh</div><div class="line">sudo ln -s `brew --prefix zsh`/bin/zsh /bin/zsh</div><div class="line">chsh -s /bin/zsh  # 切换系统当前用户的默认 shell 为 zsh</div></pre></td></tr></table></figure>
<p>安装完毕，<code>Command + W</code> 关闭 <code>iTerm2</code> 当前窗口，然后按 <code>Command + .</code> 重新打开，此时 <code>shell</code> 已经换成 <code>zsh</code> 了。<br>切换到 <code>bash</code> 系统</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh -s /bin/bash</div></pre></td></tr></table></figure>
<h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><p><code>oh-my-zsh</code> 是一套十分强大的 <code>zsh</code> 配置方案。具有自动补全参数和自定义配置功能。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>curl</code> 方式</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</div></pre></td></tr></table></figure>
<p><code>wget</code> 方式</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"</div></pre></td></tr></table></figure>
<h3 id="配置-zshrc"><a href="#配置-zshrc" class="headerlink" title="配置 zshrc"></a>配置 zshrc</h3><p>修改 .zshrc(~/.zshrc) 文件</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ZSH_THEME="agnoster"           # 使用 agnoster 主题，颜值高</div><div class="line">DEFAULT_USER="你的用户名"       # 增加这一项，可以隐藏掉路径前面那串用户名</div><div class="line">plugins=(git autojump zsh-autosuggestions)    # 自己按需把要用的 plugin 写上</div></pre></td></tr></table></figure>
<p><code>.oh-my-zsh/themes</code> 文件中是所有的主题文件，可任意挑选，Oh My Zsh提供的所有主题<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="external">在线预览</a>。</p>
<p>修改完后，刷新配置文件，然后重新启动 <code>iTerm</code> 主题就有了。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.zshrc</div></pre></td></tr></table></figure>
<p>会有乱码问题，这时还需要安装一个Mac的字体库 <a href="https://github.com/powerline/fonts" target="_blank" rel="external">Powerline-patched font</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> clone</div><div class="line">git clone https://github.com/powerline/fonts.git</div><div class="line"><span class="meta">#</span> install</div><div class="line">cd fonts</div><div class="line">./install.sh</div><div class="line"><span class="meta">#</span> clean-up a bit</div><div class="line">cd ..</div><div class="line">rm -rf fonts</div></pre></td></tr></table></figure>
<p>安装完成之后，在偏好设置中把 <code>Anti-aliased Font</code> 和 <code>Non-ASCII Font</code> 都改为 <code>powerline</code> 的字体。</p>
<p>或者直接安装 <code>Menlo</code> 字体补丁<br>下载并安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/abertsch/Menlo-for-Powerline.git</div></pre></td></tr></table></figure>
<p><code>Profiles / Text</code>，把 <code>Anti-aliased Font</code> 和 <code>Non-ASCII Font</code> 都换成 <code>Menlo</code>。</p>
<p>如果使用 <code>MacVim</code> 选择相应的字体添加配置到 <code>.vimrc</code>: </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set guifont=Menlo\ for\ Powerline</div></pre></td></tr></table></figure>
<h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><p>如更新 <code>cocoapods</code> 时  输入  <code>pod update --verbose --no-repo-update</code><br>可使用命令别名来简化命令行的输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias pod_update=&apos;pod update --verbose --no-repo-update&apos;</div></pre></td></tr></table></figure>
<p>可以使用alias命令来显示所有命令别名<br>永久添加，添加到.zshrc中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">alias zshconfig=&quot;vim ~/.zshrc&quot;</div><div class="line">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g’&quot;</div><div class="line">alias pod_update=&apos;pod update --verbose --no-repo-update&apos;</div><div class="line">alias pod_install=&apos;pod install --verbose --no-repo-update&apos;</div></pre></td></tr></table></figure>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h4 id="补全"><a href="#补全" class="headerlink" title="补全"></a>补全</h4><p><code>zsh</code> 的命令补全功能非常强大，可以补齐路径，补齐命令，补齐参数等。<br>按下 <code>tab</code> 键显示出所有待选项后，再按一次 tab 键即进入选择模式，进入选择模式后，按 <code>tab</code> 切向下一个选项，按 <code>shift+tab</code> 键切向上一个选项，<code>ctrl+f/b/n/p</code> 可以向前后左右切换，或使用 上下左右 来切换。</p>
<h4 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h4><p><code>zsh</code> 的目录跳转更为智能，你无需输入 <code>cd</code>，直接输入路径即可。<code>..</code> 表示后退一级目录，<code>../../</code> 表示后退两级，依次类推。（ <code>...</code> 的作用和 <code>../../</code> 相同）。<br>输入d，将列出当前 <code>session</code> 访问过的所有目录，再按提示的数字即可进入相应目录。</p>
<h4 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h4><p>历史记录支持受限查找。比如，输入 <code>git</code>，再按向上箭头，会搜索用过的所有 <code>git</code> 命令。</p>
<h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p><code>ls *.png</code> 查找当前目录下所有 <code>png</code> 文件，<code>ls **/*.png</code> 递归查找。</p>
<h4 id="Command-键"><a href="#Command-键" class="headerlink" title="Command 键"></a>Command 键</h4><p>按住 <code>Command</code> 键:</p>
<ul>
<li>可以拖拽选中的字符串；</li>
<li>点击 <code>url</code>：调用默认浏览器访问该网址；</li>
<li>点击文件夹：在 <code>finder</code> 中打开该文件夹；</li>
<li>点击文件：调用默认程序打开文件；</li>
<li>同时按住 <code>option</code> 键，可以以矩形选中，类似于 <code>vim</code> 中的 <code>ctrl v</code> 操作。</li>
</ul>
<h4 id="高亮当前鼠标的位置"><a href="#高亮当前鼠标的位置" class="headerlink" title="高亮当前鼠标的位置"></a>高亮当前鼠标的位置</h4><p>一个标签页中开的窗口太多，有时候会找不到当前的鼠标，<code>Command+/</code> 找到它。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.jianshu.com/p/93506ab34949" target="_blank" rel="external">iTerm2 &amp; Oh My Zsh：完爆mac终端</a><br><a href="http://www.jianshu.com/p/e45160d0ae27" target="_blank" rel="external">Iterm2+solarized+zsh+oh my zsh</a><br><a href="http://jiaolonghuang.github.io/2016/04/21/item2/" target="_blank" rel="external">item2启动慢的解决</a><br><a href="https://www.logcg.com/archives/2376.html" target="_blank" rel="external">让 iTrem 2 + zsh 启动不再等待</a><br><a href="http://wulfric.me/2015/08/zsh/" target="_blank" rel="external">一些命令行效率工具</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iTerm2-oh-my-zsh&quot;&gt;&lt;a href=&quot;#iTerm2-oh-my-zsh&quot; class=&quot;headerlink&quot; title=&quot;iTerm2 + oh my zsh&quot;&gt;&lt;/a&gt;iTerm2 + oh my zsh&lt;/h1&gt;&lt;h2 id=&quot;iTerm2&quot;&gt;&lt;a href=&quot;#iTerm2&quot; class=&quot;headerlink&quot; title=&quot;iTerm2&quot;&gt;&lt;/a&gt;iTerm2&lt;/h2&gt;&lt;p&gt;iTerm2 下载地址 &lt;a href=&quot;http://www.iterm2.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.iterm2.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;偏好设置&quot;&gt;&lt;a href=&quot;#偏好设置&quot; class=&quot;headerlink&quot; title=&quot;偏好设置&quot;&gt;&lt;/a&gt;偏好设置&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;打开热键 &lt;code&gt;Preferences - Keys&lt;/code&gt;，勾选 &lt;code&gt;Hotkey&lt;/code&gt; 中的 &lt;code&gt;Show/hide iTerm2 with a system-wide hotkey&lt;/code&gt;，然后设定一个热键。如 &lt;code&gt;Command + .&lt;/code&gt;，然后按 &lt;code&gt;Command + .&lt;/code&gt; 就可以随时调出或者隐藏 &lt;code&gt;iTerm2&lt;/code&gt; 了。&lt;/li&gt;
&lt;li&gt;颜色主题 &lt;code&gt;Preferences - Profiles - Colors&lt;/code&gt; 右下角 &lt;code&gt;Color Presets&lt;/code&gt; 选择主题。或从 &lt;a href=&quot;http://iterm2colorschemes.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iTerm Themes&lt;/a&gt; 网站中下载第三方主题包，选择主题下的 &lt;code&gt;import&lt;/code&gt; 操作，把下载的主题导入。&lt;/li&gt;
&lt;li&gt;终端灰蒙蒙 &lt;code&gt;Preferences - Profiles - Text - Text Rendering&lt;/code&gt;，将 Draw bold text in bright colors 前面的勾去掉。&lt;/li&gt;
&lt;li&gt;复用上个会话的目录 &lt;code&gt;Preferences - Profiles - Working Directory&lt;/code&gt; 勾选 Reuse previous session’s directory。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="mac" scheme="http://yoursite.com/categories/mac/"/>
    
    
      <category term="iterm" scheme="http://yoursite.com/tags/iterm/"/>
    
      <category term="zsh" scheme="http://yoursite.com/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 优化和备份</title>
    <link href="http://yoursite.com/other/Hexo%20%E4%BC%98%E5%8C%96%E5%92%8C%E5%A4%87%E4%BB%BD/"/>
    <id>http://yoursite.com/other/Hexo 优化和备份/</id>
    <published>2017-06-01T06:30:02.000Z</published>
    <updated>2017-07-03T05:37:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-优化和备份"><a href="#Hexo-优化和备份" class="headerlink" title="Hexo 优化和备份"></a>Hexo 优化和备份</h1><h2 id="gulp精简博客代码"><a href="#gulp精简博客代码" class="headerlink" title="gulp精简博客代码"></a>gulp精简博客代码</h2><p><code>Next</code> 主题在 <code>Hexo</code> 引擎解析 <code>md</code> 时生成的代码会包含大量的无用空白。这些空白会增加文档的大小,使得网站在响应上不够迅速,影响体验。<br>使用的 <code>gulp</code> 是一个前端项目构建工具,用自动化构建工具增强你的工作流程<a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp中文官网</a>。</p>
<a id="more"></a>
<h3 id="gulp简介"><a href="#gulp简介" class="headerlink" title="gulp简介"></a>gulp简介</h3><p>首先是 <code>gulp</code> 的一些简单介绍：<br>gulp是基于<strong>nodejs</strong>流的自动化构建工具，可以快速构建项目并减少频繁的I/0操作。你可以利用gulp插件完成各种自动化任务：测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装有两种方式：<br>1.全局安装<code>gulp</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g -d gulp</div></pre></td></tr></table></figure>
<p>运行 <code>gulp -v</code> ,如果正常打印版本号则安装成功。</p>
<p>2.安装到项目本地<br>先CD到你的项目根目录</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp --save-dev</div></pre></td></tr></table></figure>
<p><code>--save-dev</code> 保存 <code>gulp</code> 到项目依赖文件 <code>package.json</code> 的<code>devDependencies</code> 里面。</p>
<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>gulp的插件列表可以参考gulp的<a href="http://gulpjs.com/plugins/" target="_blank" rel="external">插件官网</a>。</p>
<p>以下是比较常用的插件</p>
<ul>
<li>gulp-minify-css 压缩css</li>
<li>gulp-htmlmin 压缩html</li>
<li>gulp-uglify 压缩js</li>
<li>gulp-rename 重命名文件,通常压缩后的带.min后缀</li>
<li>gulp-jshint jshint,js静态检查</li>
<li>gulp-concat 合并多个文件</li>
<li>gulp-imagemin 压缩图片</li>
<li>gulp-clean 清理文件或目录</li>
<li>gulp-load-plugins 自动加载插件</li>
<li>run-sequence 控制任务执行顺序</li>
</ul>
<p>npm install [plugins-name] –save<br>上述命令安装插件的同时也会把插件作为项目依赖写入package.json文件.</p>
<h4 id="gulp-API"><a href="#gulp-API" class="headerlink" title="gulp API"></a>gulp API</h4><h5 id="gulp-src（gobs-options"><a href="#gulp-src（gobs-options" class="headerlink" title="gulp.src（gobs[, options])"></a>gulp.src（gobs[, options])</h5><blockquote>
<p>输出（Emits）符合所提供的匹配模式（glob）或者匹配模式的数组（array of globs）的文件。 将返回一个 <a href="https://github.com/gulpjs/vinyl-fs" target="_blank" rel="external">Vinyl files</a> 的 <a href="https://nodejs.org/api/stream.html" target="_blank" rel="external">stream</a> 它可以被 <a href="https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options" target="_blank" rel="external">piped</a> 到别的插件中。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">'src/js/*.js'</span>) <span class="comment">//模糊匹配src/js文件夹下所有js文件</span></div><div class="line">  .pipe( concat(<span class="string">'app.js'</span>)) <span class="comment">//合并后的文件名</span></div><div class="line">  .pipe(gulp.dest(<span class="string">'pub/dist/js'</span>));<span class="comment">//合并后文件路径</span></div></pre></td></tr></table></figure>
<p>gulp.src通配符匹配：<br><em>.js匹配当前目录下的所有js文件,不指名扩展名则匹配所有类型
</em>/<em>.js匹配所有<strong>第一层子文件夹</strong>的js文件,第二层请用</em>/<em>/.js<br>**/</em>.js匹配<strong>所有文件夹层次</strong>下的js文件, 包括当前目录<br>?匹配文件路径中的一个字符(不会匹配路径分隔符)<br>[…]匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个.<br>!匹配任何与括号中给定的任一模式都不匹配的</p>
<p>下面以一系列例子来加深理解：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">*能匹配 a.js,x.y,abc,abc/,但不能匹配a/b.js</div><div class="line">*.*能匹配 a.js,style.css,a.b,x.y</div><div class="line">*/*/*.js能匹配 a/b/c.js,x/y/z.js,不能匹配a/b.js,a/b/c/d.js</div><div class="line">**能匹配 abc,a/b.js,a/b/c.js,x/y/z,x/y/z/a.b,能用来匹配所有的目录和文件</div><div class="line">**/*.js 能匹配 foo.js,a/foo.js,a/b/foo.js,a/b/c/foo.js</div><div class="line">a/**/z能匹配 a/z,a/b/z,a/b/c/z,a/d/g/h/j/k/z</div><div class="line">a/**b/z 能匹配 a/b/z,a/sb/z,但不能匹配a/x/sb/z,因为只有单**单独出现才能匹配多级目录</div><div class="line">?.js 能匹配 a.js,b.js,c.js</div><div class="line">a??能匹配 a.b,abc,但不能匹配ab/,因为它不会匹配路径分隔符</div><div class="line">[xyz].js只能匹配 x.js,y.js,z.js,不会匹配xy.js,xyz.js等,整个中括号只代表一个字符</div><div class="line">[^xyz].js能匹配 a.js,b.js,c.js等,不能匹配x.js,y.js,z.js</div></pre></td></tr></table></figure>
<h5 id="gulp-dest-path-options"><a href="#gulp-dest-path-options" class="headerlink" title="gulp.dest(path[, options])"></a>gulp.dest(path[, options])</h5><blockquote>
<p>能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.src(&apos;./client/templates/*.jade&apos;) </div><div class="line">  .pipe(jade())</div><div class="line">  .pipe(gulp.dest(&apos;./build/templates&apos;))</div><div class="line">  .pipe(minify())</div><div class="line">  .pipe(gulp.dest(&apos;./build/minified_templates&apos;));</div></pre></td></tr></table></figure>
<p>文件被写入的路径是以所给的相对路径根据所给的目标目录计算而来。类似的，相对路径也可以根据所给的 base 来计算。</p>
<h5 id="gulp-task-name-deps-fn"><a href="#gulp-task-name-deps-fn" class="headerlink" title="gulp.task(name[, deps], fn)"></a>gulp.task(name[, deps], fn)</h5><p>定义一个使用 <a href="https://github.com/robrich/orchestrator" target="_blank" rel="external">Orchestrator</a> 实现的任务（task）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;mytask&apos;, [&apos;array&apos;, &apos;of&apos;, &apos;task&apos;, &apos;names&apos;], function() &#123;</div><div class="line">  // 做一些事</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="gulp-watch-glob-opts-tasks-或-gulp-watch-glob-opts-cb"><a href="#gulp-watch-glob-opts-tasks-或-gulp-watch-glob-opts-cb" class="headerlink" title="gulp.watch(glob [, opts], tasks) 或 gulp.watch(glob [, opts, cb])"></a>gulp.watch(glob [, opts], tasks) 或 gulp.watch(glob [, opts, cb])</h5><p>监视文件，并且可以在文件发生改动时候做一些事情。它总会返回一个 EventEmitter 来发射（emit） change 事件。</p>
<p>需要在文件变动后执行的一个或者多个通过 gulp.task() 创建的 task 的名字，</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> watcher = gulp.watch(<span class="string">'js/**/*.js'</span>, [<span class="string">'uglify'</span>,<span class="string">'reload'</span>]);</div><div class="line">watcher.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'File '</span> + event.path + <span class="string">' was '</span> + event.type + <span class="string">', running tasks...'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>每次变动需要执行的 callback。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.watch(&apos;js/**/*.js&apos;, function(event) &#123;</div><div class="line">  console.log(&apos;File &apos; + event.path + &apos; was &apos; + event.type + &apos;, running tasks...&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="gulp优化"><a href="#gulp优化" class="headerlink" title="gulp优化"></a>gulp优化</h3><p>在<strong>hexo顶层</strong>目录运行以下代码来安装 <code>gulp</code> 和插件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev gulp gulp-clean gulp-load-plugins gulp-minify-css gulp-htmlmin gulp-imagemin gulp-uglify run-sequence</div></pre></td></tr></table></figure>
<p>在<strong>hexo顶层</strong>目录下创建 <code>gulpfile.js</code> 文件</p>
<p>内容如下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">   plugins = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>)(); <span class="comment">//自动插件引用</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> Hexo = <span class="built_in">require</span>(<span class="string">'hexo'</span>);</div><div class="line"><span class="keyword">var</span> runSequence = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 清除public文件夹</span></div><div class="line">gulp.task(<span class="string">"clean"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"public/*"</span>)</div><div class="line">    .pipe(plugins.clean());           </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 压缩css文件</span></div><div class="line">gulp.task(<span class="string">"minify-css"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">"public/**/*.css"</span>,<span class="string">"!public/**/*.min.css"</span>])</div><div class="line">    .pipe(plugins.minifyCss(&#123;<span class="attr">compatibility</span>: <span class="string">"ie8"</span>&#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));      </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 压缩js文件</span></div><div class="line">gulp.task(<span class="string">"minify-js"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">"public/**/*.js"</span>,<span class="string">"!public/**/*.min.js"</span>])</div><div class="line">    .pipe(plugins.uglify())</div><div class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 压缩html文件</span></div><div class="line">gulp.task(<span class="string">"minify-html"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"public/**/*.html"</span>)</div><div class="line">    .pipe(plugins.htmlmin(&#123;</div><div class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">minifyJS</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 压缩 public/images 和 /public/uploads目录内图片</span></div><div class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src([<span class="string">'./public/images/**/*.&#123;png,jpg,gif,ico&#125;'</span>,<span class="string">'./public/uploads/**/*.&#123;png,jpg,gif,ico&#125;'</span>])</div><div class="line">    .pipe(plugins.imagemin(&#123;</div><div class="line">       <span class="attr">optimizationLevel</span>: <span class="number">5</span>, <span class="comment">//类型：Number  默认：3  取值范围：0-7（优化等级）</span></div><div class="line">       progressive: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></div><div class="line">       interlaced: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></div><div class="line">       multipass: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./public/uploads'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 利用Hexo API 来生成博客内容， 效果和在命令行运行： hexo g 一样</span></div><div class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), &#123;&#125;);</div><div class="line">gulp.task(<span class="string">'generate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'generate'</span>, &#123;</div><div class="line">            <span class="attr">watch</span>: <span class="literal">false</span></div><div class="line">        &#125;);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> hexo.exit();</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> cb()</div><div class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        hexo.exit(err);</div><div class="line">        <span class="keyword">return</span> cb(err);</div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 利用Hexo API 来发布博客， 效果和在命令行运行： hexo d 一样</span></div><div class="line">gulp.task(<span class="string">'deploy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'deploy'</span>, &#123;</div><div class="line">            <span class="attr">watch</span>: <span class="literal">false</span></div><div class="line">        &#125;);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> hexo.exit();</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> cb()</div><div class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        hexo.exit(err);</div><div class="line">        <span class="keyword">return</span> cb(err);</div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 用run-sequence并发执行，同时处理html，css，js，img</span></div><div class="line">gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    runSequence([<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>, <span class="string">'minify-images'</span>], cb);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆</span></div><div class="line">gulp.task(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    runSequence(<span class="string">'clean'</span>, <span class="string">'generate'</span>, <span class="string">'minify'</span>, <span class="string">'deploy'</span>, cb)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'build'</span>]);</div></pre></td></tr></table></figure>
<p>到这里对 <code>gulp</code> 的配置就完成了，只需要每次在执行 <code>gulp</code> 就可以生成静态文件并实现发布。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp</div></pre></td></tr></table></figure>
<p>但是每次都要把 <code>public</code> 中的文件都删除，重新生成静态文件并发布会比较慢，先记下这个问题，以后解决。</p>
<h2 id="hexo备份"><a href="#hexo备份" class="headerlink" title="hexo备份"></a>hexo备份</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>新建仓库 <code>blog</code> 来存储博客原始文件，先看一下哪些文件是必须备份的：<br>像站点配置 <code>_config.yml</code>，主题 <code>theme</code>，博客文件 <code>source</code>，文章的模板 <code>caffolds</code>，安装包 <code>package.json</code>， 提交忽略配置 <code>.gitignore</code> 这些文件是需要备份的。其它可以不需要，则 <code>.gitignore</code> 如下配置(已经配置好了):</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.DS_Store</div><div class="line">Thumbs.db</div><div class="line">db.json</div><div class="line">*.log</div><div class="line">node_modules/</div><div class="line">public/</div><div class="line">.deploy*/</div></pre></td></tr></table></figure>
<p>直接在博客顶层目录使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git add -A</div><div class="line">git commit -m "first commit"</div><div class="line">git remote add origin git@github.com:yourName/blog.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>这样就把博客备份到仓库中了。<br>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行备份和发布：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m "..."</div><div class="line">git push   #备份</div><div class="line">hexo g -d  #发布</div></pre></td></tr></table></figure>
<h3 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h3><p>使用 <code>clone</code>  拷贝仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git init </div><div class="line">git clone git@github.com:yourName/blog.git</div></pre></td></tr></table></figure>
<p>在本地新拷贝的文件夹下通过以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd blog</div><div class="line">npm install #模块安装</div><div class="line">hexo s -g  #预览</div></pre></td></tr></table></figure>
<p><strong>注</strong>：这里没用 <code>hexo init</code> 初始化 此时用了 <code>hexo init</code>，则站点的配置文件 <code>_config.yml</code> 里面内容会被清空使用默认值，所以<strong>不要用 <code>hexo init</code></strong>。</p>
<p>预览<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>没有问题，就可以使用了。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp中文官网</a><br><a href="https://www.karlzhou.com/articles/compress-minify-hexo/" target="_blank" rel="external">优化Hexo博客 - 压缩 HTML、CSS、JS、IMG 等</a><br><a href="https://hexo.io/zh-cn/api/index.html" target="_blank" rel="external">hexo api</a><br><a href="https://www.zhihu.com/question/21193762" target="_blank" rel="external">知乎 CrazyMilk 和 skycrown 的回答</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-优化和备份&quot;&gt;&lt;a href=&quot;#Hexo-优化和备份&quot; class=&quot;headerlink&quot; title=&quot;Hexo 优化和备份&quot;&gt;&lt;/a&gt;Hexo 优化和备份&lt;/h1&gt;&lt;h2 id=&quot;gulp精简博客代码&quot;&gt;&lt;a href=&quot;#gulp精简博客代码&quot; class=&quot;headerlink&quot; title=&quot;gulp精简博客代码&quot;&gt;&lt;/a&gt;gulp精简博客代码&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Next&lt;/code&gt; 主题在 &lt;code&gt;Hexo&lt;/code&gt; 引擎解析 &lt;code&gt;md&lt;/code&gt; 时生成的代码会包含大量的无用空白。这些空白会增加文档的大小,使得网站在响应上不够迅速,影响体验。&lt;br&gt;使用的 &lt;code&gt;gulp&lt;/code&gt; 是一个前端项目构建工具,用自动化构建工具增强你的工作流程&lt;a href=&quot;http://www.gulpjs.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp中文官网&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 个人博客</title>
    <link href="http://yoursite.com/other/Hexo%20%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/other/Hexo 个人博客/</id>
    <published>2017-05-30T03:30:00.000Z</published>
    <updated>2017-07-03T04:05:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-个人博客"><a href="#Hexo-个人博客" class="headerlink" title="Hexo 个人博客"></a>Hexo 个人博客</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hexo是基于<strong>Node.js</strong>的静态博客框架，简单、轻量，其生成的静态网页可以托管在<strong>Github</strong>。<br>使用 <code>GitHubPages</code> + <code>Hexo</code>，一种简单高效的实现方式来搭建个人的博客。</p>
<a id="more"></a>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>去<a href="https://nodejs.org/en/download/" target="_blank" rel="external">nodejs</a>官网下载对应系统的安装包，按提示安装。</p>
<p>或 Homebrew 安装方式，此安装方式无需重启</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install node</div></pre></td></tr></table></figure>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>一般都安装了，查看是否安装 <code>git</code> 命令，没有安装会提示安装。<br>希望下载最新的可以去<a href="https://git-scm.com/download" target="_blank" rel="external">git官网下载</a></p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>使用npm安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>安装完成创建并初始化放博客的文件夹,然后定位到存储博客的目录并安装。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init &lt;folder&gt;</div><div class="line">cd &lt;folder&gt;</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>解决 <code>Error: Cannot find module &#39;./build/Release/DTraceProviderBindings&#39;</code> 错误<br>删除node中的 <code>lib/node_modules/hexo-cli</code> 和 <code>bin/hexo</code> 重新安装</p>
<p>目前我安装所用的本地环境如下：(可以通过hexo -v查看）</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">hexo: 3.3.7</div><div class="line">hexo-cli: 1.0.3</div><div class="line">os: Darwin 16.5.0 darwin x64</div><div class="line">http_parser: 2.7.0</div><div class="line">node: 6.11.0</div><div class="line">v8: 5.1.281.102</div><div class="line">uv: 1.11.0</div><div class="line">zlib: 1.2.11</div><div class="line">ares: 1.10.1-DEV</div><div class="line">icu: 58.2</div><div class="line">modules: 48</div><div class="line">openssl: 1.0.2k</div></pre></td></tr></table></figure>
<h3 id="hexo-命令"><a href="#hexo-命令" class="headerlink" title="hexo 命令"></a>hexo 命令</h3><ul>
<li>hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</li>
<li>hexo server (hexo s) 启动本地web服务，用于博客的预览</li>
<li>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）</li>
<li>hexo new (hexo n) “postName” 新建文章</li>
<li>hexo new (hexo n) page “pageName” 新建页面</li>
<li><p>hexo clean 清除缓存文件和已生成的静态文件</p>
<p>hexo d -g #生成部署 (-g部署之前预先生成静态文件)<br>hexo s -g #生成预览</p>
</li>
</ul>
<p><strong>选项</strong></p>
<ol>
<li>hexo –safe 安全模式，在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</li>
<li>hexo –debug 调试模式，在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次。</li>
<li>hexo –silent 简洁模式，隐藏终端信息</li>
</ol>
<h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p><a href="https://hexo.io/themes/" target="_blank" rel="external">hexo 提供很多主题</a></p>
<p>这里选了一个极简的主题<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a>，也是Hexo主题中最受欢迎的一个。</p>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd your-hexo-file #Hexo 站点目录</div><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<p>失败的话直接到<a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="external">NexT发布页面</a>下载并解压所下载的压缩包至站点的 themes 目录,需要将文件名改为next。</p>
<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>打开<strong>站点配置文件</strong> <code>_config.yml</code> ,找到 <code>theme</code> 字段，并将其值更改为<code>next</code></p>
<p>在切换主题之后、验证之前， 我们最好清除 Hexo 的缓存</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo clean</div></pre></td></tr></table></figure>
<p>启动 Hexo 本地站点，并开启调试模式（即加上 <strong>–debug</strong>），整个命令是 </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s --debug</div></pre></td></tr></table></figure>
<p>在服务启动的过程，注意观察命令行输出是否有任何异常信息,这些信息将帮助他人更好的定位错误。<br>使用浏览器访问 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>，检查站点是否正确运行。</p>
<h3 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h3><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">title:              #你博客的标题</div><div class="line">subtitle:           #你博客的副标题</div><div class="line">description:        #你博客的描述</div><div class="line">author:             #你的名字</div><div class="line">language: zh-Hans   #语言 中文</div><div class="line">theme: next         #安装的主题名称</div><div class="line">deploy:             #发布</div><div class="line">  type: git         #使用Git 发布</div><div class="line">  repo: https://github.com/username/username.github.io.git    #你的Github仓库</div><div class="line">  </div><div class="line">url: http://yoursite.com #你的站点地址</div><div class="line">permalink: :title/  #url结构</div></pre></td></tr></table></figure>
<h4 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h4><p>Scheme 是 NexT 为提供多种不同的外观而添加的，目前 NexT 支持三种样式他们是：</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<p>更改<strong>主题配置文件</strong> <code>scheme</code> 关键字</p>
<h4 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h4><p>第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标(<a href="http://fontawesome.io/" target="_blank" rel="external">Font Awesome</a>)。</p>
<p>菜单名称在 <code>{language}.yml</code> 文件中设置。<br>菜单项的图标，对应的字段是 <code>menu_icon</code>，而 <code>enable</code> 可用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p>
<p>添加菜单需要创建页面，如标签界面</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page tags</div></pre></td></tr></table></figure>
<p>创建完成后，在对应的目录下找到 <code>index.md</code> 文件，进行如下的修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: tags # 标签名字（可为空）</div><div class="line">date: 2017-06-29 16:28:46</div><div class="line">type: &quot;tags&quot; # 将页面的类型设置为 tags,主题将自动为这个页面显示为标签云</div><div class="line">comments: false # 如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，设置为 false</div><div class="line">---</div></pre></td></tr></table></figure>
<p>type 有分类 <code>categories</code> 标签 <code>tags</code></p>
<h4 id="侧栏"><a href="#侧栏" class="headerlink" title="侧栏"></a>侧栏</h4><p><code>sidebar</code> 字段来控制侧栏的行为<br>其一是侧栏的位置 <code>sidebar.position</code></p>
<ul>
<li>left - 靠左放置</li>
<li>right - 靠右放置</li>
</ul>
<p>其二是侧栏显示的时机 <code>sidebar.display</code></p>
<ul>
<li>post - 默认行为，在文章页面（拥有目录列表）时显示</li>
<li>always - 在所有页面中都显示</li>
<li>hide - 在所有页面中都隐藏（可以手动展开）</li>
<li>remove - 完全移除</li>
</ul>
<h4 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h4><p><code>avatar</code> 设置成头像的链接地址。其中，头像的链接地址可以是完整的互联网或站点内的地址（将头像放置主题目录下的 source/images/ 配置为avatar: /images/avatar.png）</p>
<h4 id="否显示阅读全文"><a href="#否显示阅读全文" class="headerlink" title="否显示阅读全文"></a>否显示阅读全文</h4><p>将 <code>auto_excerpt</code> 的 <code>enable</code> 设置为 <code>ture</code> 则显示阅读全文</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Automatically Excerpt. Not recommend.</div><div class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</div><div class="line">auto_excerpt:</div><div class="line">  enable: ture # 设置是否显示阅读全文</div><div class="line">  length: 150</div></pre></td></tr></table></figure>
<p>或在文章中使用 <!-- more --> 手动进行截断，Hexo 提供的方式（推荐）</p>
<h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><p>NexT 使用 <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="external">Tomorrow Theme</a> 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 <code>normal</code>，<code>night</code>， <code>night blue</code>， <code>night bright</code>， <code>night eighties</code>。</p>
<p>可更改 <code>highlight_theme</code> 字段</p>
<h4 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h4><p>链接放置在 <code>social</code> 字段下，一行一个链接。其键值格式是 显示文本: 链接地址。<br>设定链接的图标，对应的字段是 <code>social_icons</code>，图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）</p>
<h4 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h4><p><code>use_motion</code>，根据您的需求设置值为 <code>true</code> 或者 <code>false</code>，NexT 默认开启动画效果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use_motion: true  # 开启动画效果</div><div class="line">use_motion: false # 关闭动画效果</div></pre></td></tr></table></figure>
<p>背景动画 <code>canvas_nest</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">canvas_nest: true //开启动画</div><div class="line">canvas_nest: false //关闭动画</div></pre></td></tr></table></figure>
<h4 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h4><p>要添加背景图片，首先将图片 <code>background.jpg</code> 放到 <code>/source/uploads/</code> 目录下，然后，在文件 <code>/css/_custom/custom.styl</code>文件中添加下面一行内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">body &#123; background:url(/uploads/background.jpg);&#125;</div></pre></td></tr></table></figure>
<p>同样可以添加其它背景，如侧栏背景 <code>sidebar</code> ，头部 <code>header</code> 等。</p>
<h4 id="腾讯公益404页面"><a href="#腾讯公益404页面" class="headerlink" title="腾讯公益404页面"></a>腾讯公益404页面</h4><p><a href="http://www.ixirong.com/404.html" target="_blank" rel="external">腾讯公益404页面</a>，寻找丢失儿童，让大家一起关注此项公益事业！</p>
<p>新建 <code>404.html</code> 页面，放到主题的 <code>source</code> 目录下，内容如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"https://qzone.qq.com/gy/404/style/404style.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/plain"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span></span></div><div class="line">          <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span></div><div class="line">          <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;<span class="undefined"></span></div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/data.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/page.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Github-Pages设置"><a href="#Github-Pages设置" class="headerlink" title="Github Pages设置"></a>Github Pages设置</h2><p>GitHub Pages 本用于介绍托管在GitHub的项目，不过由于他的空间免费稳定，常用来做搭建博客。</p>
<p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是 <code>username/username.github.io</code> ，这是特殊的命名约定。你可以通过 <code>http://username.github.io</code> 来访问你的个人主页。</p>
<p>仓库创建好就可以部署了，要部署到github，需要在<strong>站点配置文件</strong>_config.xml中作如下修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git  </div><div class="line">  repo: &lt;repository url&gt; #库（Repository）地址</div><div class="line">  branch: [branch] #分支名称默认 master</div><div class="line">  message: [message] #自定义提交信息 (默认为 Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;)</div></pre></td></tr></table></figure>
<p>安装一个扩展：<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>然后在命令行中执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>如果出现下面错误，则是因为没有设置好public key所致。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Permission denied (publickey).</div><div class="line">fatal: Could not read from remote repository.</div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div></pre></td></tr></table></figure>
<p>解决：在本机生成public key：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C "youremail@example.com"</div></pre></td></tr></table></figure>
<p>然后在用户主目录里找到<strong>.ssh</strong>目录，里面有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件。然后登陆github，在<a href="https://github.com/settings/keys" target="_blank" rel="external">SSH设置页面</a>添加上 <code>id_rsa.pub</code> 文件中的内容即可。</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="Sitemap"><a href="#Sitemap" class="headerlink" title="Sitemap"></a>Sitemap</h3><p><a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="external">Sitemap</a> 的目的是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，进而加速网页的收录速度，达到搜寻引擎友好的目的。</p>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 里配置一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sitemap:</div><div class="line">    path: sitemap.xml</div><div class="line">    template: ./sitemap_template.xml</div></pre></td></tr></table></figure>
<p>对于国内用户还需要安装插件 <a href="https://github.com/coneycode/hexo-generator-baidu-sitemap" target="_blank" rel="external">hexo-generator-baidu-sitemap</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>
<p>添加配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">baidusitemap:</div><div class="line">  path: baidusitemap.xml</div></pre></td></tr></table></figure>
<p>完成之后就可以将 <code>sitemap</code> 文件提交谷歌和百度，提交过程可以查看<a href="https://juejin.im/post/590b451a0ce46300588c43a0" target="_blank" rel="external">sunshine小小倩</a>的文章。</p>
<h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>安装<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>然后在 Hexo 根目录下的 <code>_config.yml</code> 里配置一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">feed:</div><div class="line">   type: atom      #type 表示类型, 是 atom 还是 rss2.</div><div class="line">   path: atom.xml  #path 表示 Feed 路径</div><div class="line">   limit: 20       #limit 最多多少篇最近文章</div></pre></td></tr></table></figure>
<p>添加RSS链接,打开 <code>themes/next/_config.yml</code> 文件，<code>rss:</code> 部分修改为 <code>rss: /atom.xml</code>。</p>
<h3 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h3><p>添加百度/谷歌/本地 自定义站点内容搜索</p>
<p>安装 <a href="https://github.com/flashlab/hexo-generator-search" target="_blank" rel="external">hexo-generator-searchdb</a>，在站点的根目录下执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure>
<p>编辑<strong>站点配置文件</strong>，新增以下内容到任意位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div><div class="line">  format: html</div><div class="line">  limit: 10000</div></pre></td></tr></table></figure>
<p>编辑<strong>主题配置文件</strong>，启用本地搜索功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Local search</div><div class="line">local_search:</div><div class="line">  enable: true</div></pre></td></tr></table></figure>
<h2 id="博客管理"><a href="#博客管理" class="headerlink" title="博客管理"></a>博客管理</h2><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><p>可以直接把写好的文章插入到目录 <code>/_posts</code> 下面，后缀为.MD就行，在文章头部固定格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: title   #文章的标题，这个才是显示的文章标题，其实文件名不影响</div><div class="line">date: 2015-09-01 20:33:26   #用命令会自动生成，也可以自己写，所以文章时间可以改</div><div class="line">categories: categories  #文章的分类，这个可以自己定义</div><div class="line">tags: [tag]        #tag，为文章添加标签，方便搜索</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;new article&quot;</div></pre></td></tr></table></figure>
<p>文件的开头是属性，采用统一的yaml格式，用三条短横线分隔。</p>
<p>分类和标签格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">categories:</div><div class="line">- 日记</div><div class="line">tags:</div><div class="line">- Hexo</div><div class="line">- node.js</div></pre></td></tr></table></figure>
<h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><p>相当于很多博客都有的“私密文章”功能。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new draft &quot;new draft&quot;</div></pre></td></tr></table></figure>
<p>会在 <code>source/_drafts</code> 目录下生成一个 <code>new-draft.md</code> 文件。<br>但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到 <code>_drafts</code>目录之中。</p>
<p>如果你希望强行预览草稿，更改<strong>站点配置文件</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">render_drafts: true</div></pre></td></tr></table></figure>
<p>或者，如下方式启动server：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server --drafts</div></pre></td></tr></table></figure>
<p>下面这条命令可以把草稿变成文章，或者页面：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo官网</a><br><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="external">手把手教你使用Hexo + Github Pages搭建个人独立博客</a><br><a href="http://www.jianshu.com/p/35e197cb1273" target="_blank" rel="external">Hexo搭建Github-Pages博客填坑教程</a><br><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT主题</a><br><a href="https://wizardforcel.gitbooks.io/markdown-simple-world/hexo-tutor-1.html" target="_blank" rel="external">Hexo 入门指南</a><br><a href="https://custompbwaters.github.io/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/GitHubPages%20+%20Hexo%E2%80%94%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html" target="_blank" rel="external">GitHubPages + Hexo — 博客搭建</a><br><a href="https://juejin.im/post/590b451a0ce46300588c43a0" target="_blank" rel="external">hexo高阶教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-个人博客&quot;&gt;&lt;a href=&quot;#Hexo-个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo 个人博客&quot;&gt;&lt;/a&gt;Hexo 个人博客&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Hexo是基于&lt;strong&gt;Node.js&lt;/strong&gt;的静态博客框架，简单、轻量，其生成的静态网页可以托管在&lt;strong&gt;Github&lt;/strong&gt;。&lt;br&gt;使用 &lt;code&gt;GitHubPages&lt;/code&gt; + &lt;code&gt;Hexo&lt;/code&gt;，一种简单高效的实现方式来搭建个人的博客。&lt;/p&gt;
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://yoursite.com/left/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/left/第一篇博客/</id>
    <published>2017-05-29T07:30:06.000Z</published>
    <updated>2017-06-29T09:39:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><p>一直想写博客的，但一直总是在忙项目，有时间也是玩会儿游戏，最近把游戏卸了，总算有时间了。以后会把写博客养成一个习惯，努力一个星期最少一篇，实在没时间就把之前写到印象笔记的文章重新整理一下。明天把搭建博客的过程写一下。</p>
<p>现在写下来激励自己，加油。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一篇博客&quot;&gt;&lt;a href=&quot;#第一篇博客&quot; class=&quot;headerlink&quot; title=&quot;第一篇博客&quot;&gt;&lt;/a&gt;第一篇博客&lt;/h1&gt;&lt;p&gt;一直想写博客的，但一直总是在忙项目，有时间也是玩会儿游戏，最近把游戏卸了，总算有时间了。以后会把写博客养成一个习惯，
    
    </summary>
    
      <category term="left" scheme="http://yoursite.com/categories/left/"/>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
