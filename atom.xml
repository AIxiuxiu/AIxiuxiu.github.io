<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiuXiu</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-08T09:20:49.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xiuxiu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql使用utf8mb4</title>
    <link href="http://yoursite.com/java/%20mysql%E4%BD%BF%E7%94%A8utf8mb4/"/>
    <id>http://yoursite.com/java/ mysql使用utf8mb4/</id>
    <published>2017-08-02T04:31:34.000Z</published>
    <updated>2017-09-08T09:20:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql使用utf8mb4"><a href="#mysql使用utf8mb4" class="headerlink" title="mysql使用utf8mb4"></a>mysql使用utf8mb4</h1><p>最近开发微信项目时遇到了<em>emoji</em>表情符号如何被 <strong>mysql</strong> 支持的问题，原因是<em>emoji</em>表情符号为<strong>4个字节</strong>的字符，而 <code>utf8</code> 字符集只支持<strong>1-3个字节</strong>的字符，导致无法写入数据库。所以只能修改MySQL数据库字符集， 把数据库字符集从 <code>utf8</code> 修改为支持<strong>1-4个字节</strong>字符的<code>utf8mb4</code>。<br><a id="more"></a></p>
<h2 id="utf8-与-utf8mb4"><a href="#utf8-与-utf8mb4" class="headerlink" title="utf8 与 utf8mb4"></a>utf8 与 utf8mb4</h2><p>MySQL在 5.5.3 之后增加了 <code>utf8mb4</code> 字符编码，<code>mb4</code> 即 <code>most bytes 4</code>。简单说 <code>utf8mb4</code> 是 <code>utf8</code> 的超集并完全兼容 <code>utf8</code>，能够用四个字节存储更多的字符。</p>
<blockquote>
<p>但抛开数据库，标准的 UTF-8 字符集编码是可以用 1~4 个字节去编码21位字符，这几乎包含了是世界上所有能看见的语言了。然而在MySQL里实现的utf8最长使用3个字节，也就是只支持到了 Unicode 中的 基本多文本平面（U+0000至U+FFFF），包含了控制符、拉丁文，中、日、韩等绝大多数国际字符，但并不是所有，最常见的就算现在手机端常用的表情字符 emoji和一些不常用的汉字，如 “墅” ，这些需要四个字节才能编码出来。</p>
</blockquote>
<p>也就是当你的数据库里要求能够存入这些表情或宽字符时，可以把字段定义为 <code>utf8mb4</code>，同时要注意连接字符集也要设置为 <code>utf8mb4</code>，否则在 严格模式 下会出现 <code>Incorrect string value: /xF0/xA1/x8B/xBE/xE5/xA2… for column &#39;name&#39;</code> 这样的错误，非严格模式下此后的数据会被截断。</p>
<h2 id="utf8mb4-unicode-ci-与-utf8mb4-general-ci"><a href="#utf8mb4-unicode-ci-与-utf8mb4-general-ci" class="headerlink" title="utf8mb4_unicode_ci 与 utf8mb4_general_ci"></a>utf8mb4_unicode_ci 与 utf8mb4_general_ci</h2><p>字符除了需要存储，还需要排序或比较大小，涉及到与编码字符集对应的 排序字符集（collation）。<code>ut8mb4</code> 对应的排序字符集常用的有 <code>utf8mb4_unicode_ci</code>、<code>utf8mb4_general_ci</code>，到底采用哪个在 <code>stackoverflow</code> 上有个讨论，<a href="https://stackoverflow.com/questions/766809/whats-the-difference-between-utf8-general-ci-and-utf8-unicode-ci" target="_blank" rel="external">What’s the difference between utf8_general_ci and utf8_unicode_ci</a></p>
<p>主要从排序准确性和性能两方面看：</p>
<ul>
<li>准确性<br>  <code>utf8mb4_unicode_ci</code> 是基于标准的 <code>Unicode</code> 来排序和比较，能够在各种语言之间精确排序<br>  <code>utf8mb4_general_ci</code> 没有实现 <code>Unicode</code> 排序规则，在遇到某些特殊语言或字符是，排序结果可能不是所期望的。<br>  <strong>但是在绝大多数情况下，这种特殊字符的顺序一定要那么精确吗</strong>。比如 <code>Unicode</code> 把<code>ß</code>、<code>Œ</code> 当成 <code>ss</code> 和 <code>OE</code> 来看；而 <code>general</code> 会把它们当成 <code>s</code>、<code>e</code>，再如 <code>ÀÁÅåāă</code> 各自都与 <code>A</code> 相等。</li>
<li>性能<br>  <code>utf8mb4_general_ci</code> 在比较和排序的时候更快<br>  <code>utf8mb4_unicode_ci</code> 在特殊情况下，<code>Unicode</code> 排序规则为了能够处理特殊字符的情况，实现了略微复杂的排序算法。<br>  <strong>但是在绝大多数情况下，不会发生此类复杂比较</strong>。<code>general</code> 理论上比 <code>Unicode</code> 可能快些，但相比现在的CPU来说，它远远不足以成为考虑性能的因素，索引涉及、SQL设计才是。 我个人推荐是 <code>utf8mb4_unicode_ci</code>。</li>
</ul>
<h2 id="utf8转为utf8mb4"><a href="#utf8转为utf8mb4" class="headerlink" title="utf8转为utf8mb4"></a>utf8转为utf8mb4</h2><p>一旦你决定使用 <code>utf8mb4</code>，强烈建议你要修改服务端 <code>character-set-server=utf8mb4</code>，不同的语言对它的处理方法不一样，c++, php, python可以设置 <code>character-set</code>，但java驱动依赖于 <code>character-set-server</code> 选项。下面是更改步骤</p>
<p>首先我们修改配置文件my.cnf参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[client]</div><div class="line">default-character-set = utf8mb4</div><div class="line"></div><div class="line">[mysql]</div><div class="line">default-character-set = utf8mb4</div><div class="line"></div><div class="line">[mysqld]</div><div class="line">character-set-server = utf8mb4</div><div class="line">collation-server = utf8mb4_unicode_ci</div><div class="line">skip-character-set-client-handshake = true</div><div class="line">init_connect = &apos;SET NAMES utf8mb4&apos;</div></pre></td></tr></table></figure>
<blockquote>
<p>为了实现在连接到mysql后，使用的是 <code>utf8mb4</code> 字符集，就在 <code>mysqld</code> 配置中配置了 <code>init_connect=&#39;SET NAMES utf8mb4&#39;</code> 表示初始化连接都设置为 <code>utf8mb4</code> 字符集，再配置一个 <code>skip-character-set-client-handshake = true</code> 忽略客户端字符集设置，不论客户端是何种字符集，都按照 <code>init_connect</code> 中的设置进行使用，这样就满足了应用的需求。</p>
</blockquote>
<p>更改数据库，表和列的字符集和归类属性以使用utf8mb4代替utf8。<strong>要先备份数据</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 将数据库转换为utf8mb4</div><div class="line">ALTER DATABASE database_name CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;</div><div class="line"># 将已经建好的表也转换成utf8mb4 </div><div class="line">ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</div><div class="line"># 将需要使用emoji的字段设置类型为utf8mb4</div><div class="line">ALTER TABLE table_name CHANGE column_name column_name VARCHAR(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</div></pre></td></tr></table></figure>
<p>重启数据库服务器使之生效</p>
<p>注：也可以先将数据导出，然后更改数据库编码为utf8mb4，再将数据重新导入，可能因<strong>字段长度</strong>或<strong>索引长度</strong>出现无法导入的问题，后面有写。</p>
<h2 id="java驱动使用"><a href="#java驱动使用" class="headerlink" title="java驱动使用"></a>java驱动使用</h2><p>java语言里面所实现的 <code>UTF-8</code> 编码就是<strong>支持4字节</strong>的，所以不需要配置 <code>mb4</code> 这样的字眼，但如果从MySQL读写emoji，MySQL驱动版本要在 5.1.13 及以上版本，数据库连接依然是 <code>characterEncoding=UTF-8</code> 。<br>java驱动会自动检测服务端 <strong>character_set_server</strong> 的配置，如果为<strong>utf8mb4</strong>，驱动在建立连接的时候设置 <code>SET NAMES utf8mb4</code>。然而其他语言没有依赖于这样的特性。<br>如果没有设置 <code>skip-character-set-client-handshake = true</code> 和<br><code>init_connect = &#39;SET NAMES utf8mb4&#39;</code> ，则将characterEncoding参数去掉。</p>
<h2 id="使用utf8mb4后需要注意的地方"><a href="#使用utf8mb4后需要注意的地方" class="headerlink" title="使用utf8mb4后需要注意的地方"></a>使用utf8mb4后需要注意的地方</h2><p>由于utf8mb4的字节长度是1-4个字节，而utf8的字节长度是1-3个字节，所以会有一些限制的变化。</p>
<ul>
<li>字段长度限制<br>  MySQL中的字段类型都有长度限制，比如varchar的最长字节长度是<strong>65535</strong>，所以使用utf8编码的时候，可以指定字段最长为65535/3=<strong>21845</strong>。如果使用utf8mb4编码的话，由于字符最长会占用4个字节，所以字段最长只能为65535/4=<strong>16383</strong>。</li>
<li>索引长度限制<br>  MySQL中的索引也有长度限制： <strong>767字节</strong>，所以使用utf8编码的的时候，可以指定索引字段最长为<strong>255字节</strong>，但是指定utf8mb4的话，只能索引<strong>191字节</strong>。</li>
<li>行长度限制<br>  MySQL中的行也有长度限制： <strong>65535</strong>字节，所以当字段编码从utf8变为utf8mb4的时候，可能也会需要缩短部分字段的长度来满足行的长度限制。</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://seanlook.com/2016/10/23/mysql-utf8mb4/" target="_blank" rel="external">mysql使用utf8mb4经验吐血总结</a><br><a href="https://mathiasbynens.be/notes/mysql-utf8mb4" target="_blank" rel="external">How to support full Unicode in MySQL databases</a><br><a href="http://nobodyiam.com/2016/05/29/mysql-emoji/" target="_blank" rel="external">MySQL支持emoji字符</a><br><a href="http://cenalulu.github.io/mysql/mysql-mojibake/" target="_blank" rel="external">10分钟学会理解和解决MySQL乱码问题</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mysql使用utf8mb4&quot;&gt;&lt;a href=&quot;#mysql使用utf8mb4&quot; class=&quot;headerlink&quot; title=&quot;mysql使用utf8mb4&quot;&gt;&lt;/a&gt;mysql使用utf8mb4&lt;/h1&gt;&lt;p&gt;最近开发微信项目时遇到了&lt;em&gt;emoji&lt;/em&gt;表情符号如何被 &lt;strong&gt;mysql&lt;/strong&gt; 支持的问题，原因是&lt;em&gt;emoji&lt;/em&gt;表情符号为&lt;strong&gt;4个字节&lt;/strong&gt;的字符，而 &lt;code&gt;utf8&lt;/code&gt; 字符集只支持&lt;strong&gt;1-3个字节&lt;/strong&gt;的字符，导致无法写入数据库。所以只能修改MySQL数据库字符集， 把数据库字符集从 &lt;code&gt;utf8&lt;/code&gt; 修改为支持&lt;strong&gt;1-4个字节&lt;/strong&gt;字符的&lt;code&gt;utf8mb4&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>PDB 调试Python代码</title>
    <link href="http://yoursite.com/python/PDB%20%E8%B0%83%E8%AF%95Python%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/python/PDB 调试Python代码/</id>
    <published>2017-08-02T04:31:34.000Z</published>
    <updated>2017-09-08T07:49:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PDB-调试Python代码"><a href="#PDB-调试Python代码" class="headerlink" title="PDB 调试Python代码"></a>PDB 调试Python代码</h1><p>##Sublime Text<br>使用 <code>sublime</code> 开发 <code>Python</code> 需要插件 <code>Anaconda</code> (Python代码自动补全、PEP8格式化) 和 <code>SublimeREPL</code> (Python代码交互式解释器)</p>
<p>Anaconda 用户配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    //忽略各种空格不对, 超过80字, import的函数没有使用的提醒</div><div class="line">    "pep8_ignore": ["E501", "W292", "E303", "W391", "E225", "E302", "W293", "E402"],</div><div class="line">    "pyflakes_explicit_ignore":</div><div class="line">    [</div><div class="line">        "UnusedImport"</div><div class="line">    ],</div><div class="line">    //保存文件后自动pep8格式化</div><div class="line">    "auto_formatting": true,</div><div class="line">    //库函数的提示</div><div class="line">    "enable_signatures_tooltip": true,</div><div class="line">    "merge_signatures_and_doc":true,</div><div class="line">    //禁止代码分析检查</div><div class="line">    "anaconda_linting": false,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>SublimeREPL 快捷键设置<br>根据 Preferences–&gt;Browse Packages–&gt;SublimeREPL–&gt;config–&gt;Python–&gt;Default.sublime-commands 文件在<strong>按键绑定-用户</strong>中添加快捷键    </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">      //按F5执行Python编译</div><div class="line">      "keys":["f5"],</div><div class="line">      "caption": "SublimeREPL: Python - RUN current file",</div><div class="line">      "command": "run_existing_window_command", "args":</div><div class="line">      &#123;</div><div class="line">          "id": "repl_python_run",</div><div class="line">          "file": "config/Python/Main.sublime-menu"</div><div class="line">      &#125;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      //按F6打开Python交互式窗口</div><div class="line">      "keys":["f6"],</div><div class="line">      "caption": "SublimeREPL: Python",</div><div class="line">      "command": "run_existing_window_command", "args":</div><div class="line">      &#123;</div><div class="line">          "id": "repl_python",</div><div class="line">          "file": "config/Python/Main.sublime-menu"</div><div class="line">      &#125;</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">      //按F7执行当前Python代码片段编译</div><div class="line">      "keys":["f7"],</div><div class="line">      "caption": "SublimeREPL: Python - PDB current file",</div><div class="line">      "command": "run_existing_window_command", "args":</div><div class="line">      &#123;</div><div class="line">          "id": "repl_python_pdb",</div><div class="line">          "file": "config/Python/Main.sublime-menu"</div><div class="line">      &#125;</div><div class="line">  &#125;,</div><div class="line">]</div></pre></td></tr></table></figure>
<p><code>SublimeREPL</code> 和 <code>Editor</code> 各占一个标签，为了方便查看，可点击 视图–&gt;布局–&gt;行：2 即可。</p>
<h2 id="pdb"><a href="#pdb" class="headerlink" title="pdb"></a>pdb</h2><p>pdb 是 python 自带的一个包，为 python 程序提供了一种交互的源代码调试功能，主要特性包括设置断点、单步调试、进入函数调试、查看当前代码、查看栈片段、动态改变变量的值等。pdb 提供了一些常用的调试命令:</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>break 或 b</td>
<td>设置断点</td>
</tr>
<tr>
<td>continue 或 c</td>
<td>继续执行程序</td>
</tr>
<tr>
<td>list 或 l</td>
<td>查看当前行的代码段</td>
</tr>
<tr>
<td>step 或 s</td>
<td>进入函数</td>
</tr>
<tr>
<td>return 或 r</td>
<td>执行代码直到从当前函数返回</td>
</tr>
<tr>
<td>exit 或 q</td>
<td>中止并退出</td>
</tr>
<tr>
<td>next 或 n</td>
<td>执行下一行</td>
</tr>
<tr>
<td>p</td>
<td>打印变量的值</td>
</tr>
<tr>
<td>help</td>
<td>帮助</td>
</tr>
</tbody>
</table>
<p>基本用法<br>导入 <code>pdb</code>，添加 <code>pdb.set_trace()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import pdb</div><div class="line">def sum(x, y):</div><div class="line">    return x + y</div><div class="line">a = 1</div><div class="line">pdb.set_trace()</div><div class="line">b = 2</div><div class="line">c = sum(a, b)</div><div class="line">print(c)</div></pre></td></tr></table></figure>
<p>F5 运行 会在代码 <code>b = 2</code> 处停下，如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; /Users/youname/python/test.py(8)&lt;module&gt;()</div><div class="line">-&gt; b = 2</div><div class="line">(Pdb)</div></pre></td></tr></table></figure>
<p>n执行下一条语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; /Users/youname/python/test.py(9)&lt;module&gt;()</div><div class="line">-&gt; print(a + b)</div><div class="line">(Pdb)</div></pre></td></tr></table></figure>
<p>备注：再按下回车会执行之前的命令语句。</p>
<p><code>p</code> 命令打印变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(Pdb) p a</div><div class="line">1</div></pre></td></tr></table></figure>
<p><code>l</code> 查看当前代码所调试在的位置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(Pdb) l</div><div class="line">  7  	def sum(x, y):</div><div class="line">  8  	    return x + y</div><div class="line">  9  	a = 1</div><div class="line"> 10  	pdb.set_trace()</div><div class="line"> 11  	b = 2</div><div class="line"> 12  -&gt;	c = sum(a, b)</div><div class="line"> 13  	print(c)</div><div class="line">[EOF]</div></pre></td></tr></table></figure>
<p>箭头所指向的位置就是当前调试的位置。</p>
<p>进入函数<br>输入 <code>n</code> 会直接执行函数的不会进入函数内部，在调试有函数语句的地方直接输入 <code>s</code>,可进入函数进行单步调试。输入 <code>r</code> 执行到当前函数返回，在执行 <code>r</code> 或 <code>n</code> 退出当前函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(Pdb) s</div><div class="line">--Call--</div><div class="line">&gt; /Users/xayq-fanxl/anna/python/first.py(7)sum()</div><div class="line">-&gt; def sum(x, y):</div><div class="line">(Pdb) r</div><div class="line">--Return--</div><div class="line">&gt; /Users/xayq-fanxl/anna/python/first.py(8)sum()-&gt;3</div><div class="line">-&gt; return x + y</div><div class="line">(Pdb) </div><div class="line">&gt; /Users/xayq-fanxl/anna/python/first.py(13)&lt;module&gt;()</div><div class="line">-&gt; print(c)</div></pre></td></tr></table></figure>
<p>调试中改变变量的值<br>!变量名可以改变调试的变量值，如下将 <code>c</code> 的值给变，正常运行打印结果为3，改变值之后打印为修改的结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(Pdb) !c = 4</div><div class="line">(Pdb) n</div><div class="line">4</div></pre></td></tr></table></figure>
<p>退出调试，使用 <code>quit</code> 或者 <code>q</code> 可以退出当前的 Pdb，但是这会以一种非常粗鲁的方式退出程序，其结果是直接 crash。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(Pdb) q</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;test.py&quot;, line 11, in &lt;module&gt;</div><div class="line">    b = 2</div><div class="line">  File &quot;test.py&quot;, line 11, in &lt;module&gt;</div><div class="line">    b = 2</div><div class="line">  File &quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/bdb.py&quot;, line 49, in trace_dispatch</div><div class="line">    return self.dispatch_line(frame)</div><div class="line">  File &quot;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/bdb.py&quot;, line 68, in dispatch_line</div><div class="line">    if self.quitting: raise BdbQuit</div><div class="line">bdb.BdbQuit</div><div class="line"></div><div class="line">***Repl Closed***</div></pre></td></tr></table></figure>
<p>停止调试继续执行程序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(Pdb) c</div><div class="line">3</div><div class="line"></div><div class="line">***Repl Closed***</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PDB-调试Python代码&quot;&gt;&lt;a href=&quot;#PDB-调试Python代码&quot; class=&quot;headerlink&quot; title=&quot;PDB 调试Python代码&quot;&gt;&lt;/a&gt;PDB 调试Python代码&lt;/h1&gt;&lt;p&gt;##Sublime Text&lt;br&gt;使用 &lt;code&gt;sublime&lt;/code&gt; 开发 &lt;code&gt;Python&lt;/code&gt; 需要插件 &lt;code&gt;Anaconda&lt;/code&gt; (Python代码自动补全、PEP8格式化) 和 &lt;code&gt;SublimeREPL&lt;/code&gt; (Python代码交互式解释器)&lt;/p&gt;
&lt;p&gt;Anaconda 用户配置&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //忽略各种空格不对, 超过80字, import的函数没有使用的提醒&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;pep8_ignore&quot;: [&quot;E501&quot;, &quot;W292&quot;, &quot;E303&quot;, &quot;W391&quot;, &quot;E225&quot;, &quot;E302&quot;, &quot;W293&quot;, &quot;E402&quot;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;pyflakes_explicit_ignore&quot;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &quot;UnusedImport&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //保存文件后自动pep8格式化&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;auto_formatting&quot;: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //库函数的提示&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;enable_signatures_tooltip&quot;: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;merge_signatures_and_doc&quot;:true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //禁止代码分析检查&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;anaconda_linting&quot;: false,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>搜索技巧</title>
    <link href="http://yoursite.com/other/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/other/搜索技巧/</id>
    <published>2017-07-23T10:31:34.000Z</published>
    <updated>2017-08-25T01:45:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>#搜索技巧</p>
<h2 id="关键词搜索"><a href="#关键词搜索" class="headerlink" title="关键词搜索"></a>关键词搜索</h2><p>关键词之间用<strong>空格</strong>隔开，不要用口语化搜索。</p>
<h2 id="语句搜索"><a href="#语句搜索" class="headerlink" title="语句搜索"></a>语句搜索</h2><h3 id="site语句"><a href="#site语句" class="headerlink" title="site语句"></a>site语句</h3><p><em>site</em> + 关键词，指定在<strong>特定的网站</strong>里搜索关键词信息<br>语法：site:+网站域名 +关键词（注意:site后面要加冒号“：“，网址后面加关键词之前要有空格键,关键也可以在前面）<br>例如搜：site:<a href="http://www.nanzao.com/sc" target="_blank" rel="external">http://www.nanzao.com/sc</a> 棱X计划 ，搜索结果全都是南华早报下对棱X计划<br><a id="more"></a></p>
<h3 id="时间语句"><a href="#时间语句" class="headerlink" title="时间语句"></a>时间语句</h3><p>关键词 + <em>时间</em> ,指定在<strong>特定的时间</strong>内搜索关键词信息<br>语法：关键词 xxxx..xxxx(注意:关键词之后要有空格键,时间用”..”隔开）</p>
<h3 id="inurl语句"><a href="#inurl语句" class="headerlink" title="inurl语句"></a>inurl语句</h3><p>inurl网址包含，inurl用来搜索页面<strong>URL地址中含有特定关键字</strong>的内容。<br>inurl语法返回的网页链接中包含第一个关键字，后面的关键字则出现在链接中或者网页文档中<br>语法：inurl:xxxx XXXX<br><strong>allinurl</strong>可使用多个关键词</p>
<h3 id="intitle语句"><a href="#intitle语句" class="headerlink" title="intitle语句"></a>intitle语句</h3><p>intitle标题包含，intitle用来搜索页面<strong>标题中含有特定关键字</strong>的内容。<br>intitle：关键词<br><strong>allintitle</strong>可使用多个关键词</p>
<h3 id="intext语句"><a href="#intext语句" class="headerlink" title="intext语句"></a>intext语句</h3><p>intext网页内文包含，intext用来搜索页面<strong>内文中含有特定关键字</strong>的内容。<br>intext：关键词<br><strong>allintext</strong>可使用多个关键词</p>
<h3 id="filetype语句"><a href="#filetype语句" class="headerlink" title="filetype语句"></a>filetype语句</h3><p>filetype文件类型，用于搜索<strong>特定格式的文件</strong><br>filetype:类型 关键词<br>Microsoft Office (pdf, doc, ppt, xls, rtf）、Flash (swf)、PostScript (ps)<br>如：filetype:ppt 商务模板</p>
<h3 id="双引号-“-”"><a href="#双引号-“-”" class="headerlink" title="双引号(“ ”)"></a>双引号(“ ”)</h3><p>完全匹配，使关键词不分开，顺序都不改变。在关键词中加双引号““，搜索的结果是完全匹配。</p>
<h3 id="减号（-）"><a href="#减号（-）" class="headerlink" title="减号（-）"></a>减号（-）</h3><p>表示搜索结果不包含减号后面词的页面。使用这个指令时减号前面必须是<strong>空格</strong>，减号后面没有空格，紧跟着要排除的词。<br>如搜：外卖平台 -地沟油</p>
<h3 id="星号（-）和-问号（？）"><a href="#星号（-）和-问号（？）" class="headerlink" title="星号（*）和 问号（？）"></a>星号（*）和 问号（？）</h3><p>常用作通配符，星号（*）不限制字符匹配数量,问号（？）正好与其相反限制字符匹配数量</p>
<h3 id="或逻辑"><a href="#或逻辑" class="headerlink" title="或逻辑 (|)"></a>或逻辑 (|)</h3><p>通过使用「OR」逻辑，你可以得到和两个关键词分别相关的结果，而不仅仅是和两个关键词 都同时相关的结果。巧妙使用「OR」搜索可以让你在未能确定哪个关键词对于搜索结果起决定作用时依然可以确保搜索结果的准确性。</p>
<h3 id="同义词搜素"><a href="#同义词搜素" class="headerlink" title="~同义词搜素"></a>~同义词搜素</h3><p>格式:~关键词</p>
<h3 id="define"><a href="#define" class="headerlink" title="define"></a>define</h3><p>输入define + 单词，可以当做词典<br>fy + 英文  中文翻译<br>翻译 + 汉语 英文翻译</p>
<h2 id="常用网址"><a href="#常用网址" class="headerlink" title="常用网址"></a>常用网址</h2><h3 id="资源搜索"><a href="#资源搜索" class="headerlink" title="资源搜索"></a>资源搜索</h3><p>常用网盘地址</p>
<ul>
<li>百度云盘：<a href="https://pan.baidu.com" target="_blank" rel="external">https://pan.baidu.com</a></li>
<li>115云盘：<a href="http://115.com" target="_blank" rel="external">http://115.com</a></li>
<li>360云盘：<a href="http://yunpan.360.com" target="_blank" rel="external">http://yunpan.360.com</a></li>
<li>腾讯微云：<a href="http://www.weiyun.com/index.html" target="_blank" rel="external">http://www.weiyun.com/index.html</a></li>
<li>新浪微盘：<a href="http://vdisk.weibo.com" target="_blank" rel="external">http://vdisk.weibo.com</a></li>
<li>迅雷快传：<a href="http://kuai.xunlei.com" target="_blank" rel="external">http://kuai.xunlei.com</a></li>
<li>金山快盘：<a href="http://www.kuaipan.cn" target="_blank" rel="external">http://www.kuaipan.cn</a></li>
<li>华为网盘：<a href="http://www.dbank.com" target="_blank" rel="external">http://www.dbank.com</a></li>
<li>七牛存储：<a href="http://www.qiniu.com" target="_blank" rel="external">http://www.qiniu.com</a></li>
</ul>
<p>常用搜索网站</p>
<ul>
<li>网盘搜 <a href="http://www.wangpansou.cn" target="_blank" rel="external">http://www.wangpansou.cn</a></li>
<li>盘多多 <a href="http://www.panduoduo.net" target="_blank" rel="external">http://www.panduoduo.net</a></li>
<li>麦库搜索 <a href="http://www.baidu10.net" target="_blank" rel="external">http://www.baidu10.net</a></li>
<li>西林街搜索 <a href="http://www.xilinjie.com" target="_blank" rel="external">http://www.xilinjie.com</a></li>
<li>呆木瓜 <a href="http://www.daimugua.com" target="_blank" rel="external">http://www.daimugua.com</a></li>
</ul>
<p>贴吧搜索<br>关键词 吧/论坛</p>
<p>博客搜索<br>inurl:blog</p>
<p>新浪微博<br>电子书: 没有我找不到的电子书<br>软件: 没有我找不到的软件<br>电影: 第十电影</p>
<h2 id="常用搜索网址"><a href="#常用搜索网址" class="headerlink" title="常用搜索网址"></a>常用搜索网址</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><h4 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h4><p>easyicon: <a href="http://www.easyicon.net" target="_blank" rel="external">http://www.easyicon.net</a><br>阿里巴巴矢量图标库: <a href="http://iconfont.cn" target="_blank" rel="external">http://iconfont.cn</a><br>Icons8: <a href="https://icons8.com" target="_blank" rel="external">https://icons8.com</a><br>Instant Logo Search：<a href="http://instantlogosearch.com" target="_blank" rel="external">http://instantlogosearch.com</a></p>
<h4 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h4><p>ZCOOL: <a href="http://sucai.zcool.com.cn" target="_blank" rel="external">http://sucai.zcool.com.cn</a><br>千图网：<a href="http://www.58pic.com" target="_blank" rel="external">http://www.58pic.com</a><br>花瓣：<a href="http://huaban.com" target="_blank" rel="external">http://huaban.com</a><br>昵图网：<a href="http://www.nipic.com/index.html" target="_blank" rel="external">http://www.nipic.com/index.html</a><br>NicePsd(PSD资源)：<a href="http://www.nicepsd.com" target="_blank" rel="external">http://www.nicepsd.com</a><br>中国色（颜色）：<a href="http://zhongguose.com" target="_blank" rel="external">http://zhongguose.com</a><br>图鱼网(背景纹理图): <a href="http://www.hituyu.com" target="_blank" rel="external">http://www.hituyu.com</a></p>
<h4 id="找字体"><a href="#找字体" class="headerlink" title="找字体"></a>找字体</h4><p>qiuziti:<a href="http://www.qiuziti.com" target="_blank" rel="external">http://www.qiuziti.com</a><br>模板王: <a href="http://fonts.mobanwang.com" target="_blank" rel="external">http://fonts.mobanwang.com</a></p>
<h4 id="高清图片"><a href="#高清图片" class="headerlink" title="高清图片"></a>高清图片</h4><p>pexels: <a href="https://www.pexels.com" target="_blank" rel="external">https://www.pexels.com</a><br>500px(收费): <a href="https://500px.com" target="_blank" rel="external">https://500px.com</a><br>Visual Hunt: <a href="https://visualhunt.com" target="_blank" rel="external">https://visualhunt.com</a><br>必应图片: <a href="http://www.bing.com/gallery/" target="_blank" rel="external">http://www.bing.com/gallery/</a><br>LibreStock: <a href="http://librestock.com" target="_blank" rel="external">http://librestock.com</a></p>
<h4 id="gif动态图"><a href="#gif动态图" class="headerlink" title="gif动态图"></a>gif动态图</h4><p>GIPHY: <a href="http://giphy.com" target="_blank" rel="external">http://giphy.com</a><br>SOOGIF: <a href="http://www.soogif.com/" target="_blank" rel="external">http://www.soogif.com/</a><br>小猪动态图: <a href="http://www.piggif.com/" target="_blank" rel="external">http://www.piggif.com/</a></p>
<h3 id="ppt模板"><a href="#ppt模板" class="headerlink" title="ppt模板"></a>ppt模板</h3><p>officePLUS: <a href="http://office.mmais.com.cn" target="_blank" rel="external">http://office.mmais.com.cn</a><br>逼格PPT: <a href="http://www.tretars.com" target="_blank" rel="external">http://www.tretars.com</a><br>51PPT模板网: <a href="http://www.51pptmoban.com/ppt/" target="_blank" rel="external">http://www.51pptmoban.com/ppt/</a></p>
<h3 id="以图搜图"><a href="#以图搜图" class="headerlink" title="以图搜图"></a>以图搜图</h3><p>TinEye：<a href="https://www.tineye.com" target="_blank" rel="external">https://www.tineye.com</a></p>
<h3 id="电子书搜索"><a href="#电子书搜索" class="headerlink" title="电子书搜索"></a>电子书搜索</h3><p>鸠摩搜索: <a href="https://www.jiumodiary.com" target="_blank" rel="external">https://www.jiumodiary.com</a><br>BookZZ(国外电子图书): <a href="http://zh.bookzz.org/" target="_blank" rel="external">http://zh.bookzz.org/</a></p>
<h3 id="电影资源"><a href="#电影资源" class="headerlink" title="电影资源"></a>电影资源</h3><p>BT磁力链搜索: <a href="http://www.p2psearch.net" target="_blank" rel="external">http://www.p2psearch.net</a><br>BT天堂: <a href="http://www.bttt99.com/" target="_blank" rel="external">http://www.bttt99.com/</a><br>6v: <a href="http://www.6vhao.com" target="_blank" rel="external">http://www.6vhao.com</a><br>字幕射手网: <a href="https://secure.assrt.net" target="_blank" rel="external">https://secure.assrt.net</a></p>
<h3 id="动漫资源"><a href="#动漫资源" class="headerlink" title="动漫资源"></a>动漫资源</h3><p>胖次：<a href="http://www.panc.cc" target="_blank" rel="external">http://www.panc.cc</a><br>喵搜：<a href="https://nyaso.com/" target="_blank" rel="external">https://nyaso.com/</a><br>ACG搜：<a href="http://www.acgsou.com/" target="_blank" rel="external">http://www.acgsou.com/</a></p>
<h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><p>微信小程序平台: <a href="http://www.duba.com/wxapp/index.html" target="_blank" rel="external">http://www.duba.com/wxapp/index.html</a></p>
<h3 id="微博搜"><a href="#微博搜" class="headerlink" title="微博搜"></a>微博搜</h3><p>微博搜索：<a href="http://s.weibo.com/" target="_blank" rel="external">http://s.weibo.com/</a></p>
<h3 id="搜狗的微信和知乎搜索"><a href="#搜狗的微信和知乎搜索" class="headerlink" title="搜狗的微信和知乎搜索"></a>搜狗的微信和知乎搜索</h3><p>微信：<a href="http://weixin.sogou.com/" target="_blank" rel="external">http://weixin.sogou.com/</a><br>知乎：<a href="http://zhihu.sogou.com/" target="_blank" rel="external">http://zhihu.sogou.com/</a></p>
<h3 id="表情包"><a href="#表情包" class="headerlink" title="表情包"></a>表情包</h3><p>U表情包: <a href="http://www.ubiaoqing.com/" target="_blank" rel="external">http://www.ubiaoqing.com/</a></p>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p> MBA智库: <a href="http://www.mbalib.com/" target="_blank" rel="external">http://www.mbalib.com/</a><br> OPEN文档: <a href="http://www.open-open.com/" target="_blank" rel="external">http://www.open-open.com/</a></p>
<h3 id="在线工具-http-www-atool-org"><a href="#在线工具-http-www-atool-org" class="headerlink" title="在线工具 http://www.atool.org"></a>在线工具 <a href="http://www.atool.org" target="_blank" rel="external">http://www.atool.org</a></h3><h2 id="虫部落-快搜（上面的搜索网站差不多都有）-http-search-chongbuluo-com"><a href="#虫部落-快搜（上面的搜索网站差不多都有）-http-search-chongbuluo-com" class="headerlink" title="虫部落-快搜（上面的搜索网站差不多都有） http://search.chongbuluo.com/"></a>虫部落-快搜（上面的搜索网站差不多都有） <a href="http://search.chongbuluo.com/" target="_blank" rel="external">http://search.chongbuluo.com/</a></h2><h3 id="淘宝"><a href="#淘宝" class="headerlink" title="淘宝"></a>淘宝</h3><p>阿里旺旺1688(批发网站): <a href="https://www.1688.com/" target="_blank" rel="external">https://www.1688.com/</a><br>知乎/微信 淘宝推荐，可看到很多好的商品店铺推荐</p>
<h3 id="电商"><a href="#电商" class="headerlink" title="电商"></a>电商</h3><p>淘宝教育：<a href="https://xue.taobao.com/?spm=a2174.7365761.a2151k7.1.JtaUDK" target="_blank" rel="external">https://xue.taobao.com/?spm=a2174.7365761.a2151k7.1.JtaUDK</a><br>淘宝大学：<a href="https://daxue.taobao.com" target="_blank" rel="external">https://daxue.taobao.com</a><br>站长大全：<a href="http://wz.admin5.com" target="_blank" rel="external">http://wz.admin5.com</a><br>网商圈：<a href="http://www.wshang.com/community/index.html" target="_blank" rel="external">http://www.wshang.com/community/index.html</a><br>派代：<a href="http://www.paidai.com" target="_blank" rel="external">http://www.paidai.com</a><br>网易公开课：<a href="https://open.163.com" target="_blank" rel="external">https://open.163.com</a><br>钛媒体：<a href="http://www.tmtpost.com" target="_blank" rel="external">http://www.tmtpost.com</a></p>
<h3 id="IT"><a href="#IT" class="headerlink" title="IT"></a>IT</h3><p>掘金：<a href="https://gold.xitu.io" target="_blank" rel="external">https://gold.xitu.io</a><br>实验楼：<a href="https://www.shiyanlou.com" target="_blank" rel="external">https://www.shiyanlou.com</a><br>极客：<a href="http://www.jikexueyuan.com" target="_blank" rel="external">http://www.jikexueyuan.com</a><br>开源：<a href="https://www.oschina.net" target="_blank" rel="external">https://www.oschina.net</a><br>MDN：<a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/</a><br>W3school：<a href="http://www.w3school.com.cn" target="_blank" rel="external">http://www.w3school.com.cn</a><br>github：<a href="https://github.com" target="_blank" rel="external">https://github.com</a><br>FreeBuf：<a href="http://www.freebuf.com" target="_blank" rel="external">http://www.freebuf.com</a><br>stackoverflow：<a href="http://stackoverflow.com" target="_blank" rel="external">http://stackoverflow.com</a><br>Ubuntu：<a href="http://linux.ubuntu.org.cn" target="_blank" rel="external">http://linux.ubuntu.org.cn</a><br>1纳米学习：<a href="http://1nami.com" target="_blank" rel="external">http://1nami.com</a><br>阮一峰：<a href="http://www.ruanyifeng.com/blog/javascript/" target="_blank" rel="external">http://www.ruanyifeng.com/blog/javascript/</a></p>
<h3 id="眼界"><a href="#眼界" class="headerlink" title="眼界"></a>眼界</h3><p>知乎：<a href="https://www.zhihu.com" target="_blank" rel="external">https://www.zhihu.com</a><br>简书：<a href="http://www.jianshu.com" target="_blank" rel="external">http://www.jianshu.com</a><br>豆瓣：<a href="https://www.douban.com" target="_blank" rel="external">https://www.douban.com</a><br>果壳网：<a href="http://www.guokr.com" target="_blank" rel="external">http://www.guokr.com</a><br>爱范儿：<a href="http://www.ifanr.com" target="_blank" rel="external">http://www.ifanr.com</a><br>煎蛋：<a href="http://jandan.net" target="_blank" rel="external">http://jandan.net</a><br>好奇心日报：<a href="http://www.qdaily.com" target="_blank" rel="external">http://www.qdaily.com</a><br>少数派：<a href="http://sspai.com" target="_blank" rel="external">http://sspai.com</a></p>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><h4 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h4><p>精品MAC应用分享：<a href="http://xclient.info" target="_blank" rel="external">http://xclient.info</a><br>MacUpdate：<a href="https://www.macupdate.com" target="_blank" rel="external">https://www.macupdate.com</a></p>
<h4 id="WIN"><a href="#WIN" class="headerlink" title="WIN"></a>WIN</h4><p>软件阁：<a href="http://www.lite6.com" target="_blank" rel="external">http://www.lite6.com</a><br>爱软客：<a href="http://www.bokeboke.net" target="_blank" rel="external">http://www.bokeboke.net</a><br>软件缘：<a href="https://www.appcgn.com" target="_blank" rel="external">https://www.appcgn.com</a><br>大软坊：<a href="http://app.hustonline.net" target="_blank" rel="external">http://app.hustonline.net</a><br>精品绿色便携软件：<a href="http://www.portablesoft.org" target="_blank" rel="external">http://www.portablesoft.org</a><br>PortableAppC（便携版）：<a href="http://www.portableappc.com" target="_blank" rel="external">http://www.portableappc.com</a><br>开心软件园：<a href="http://www.ihacksoft.com/file/" target="_blank" rel="external">http://www.ihacksoft.com/file/</a><br>Yanu：<a href="http://www.ccav1.com" target="_blank" rel="external">http://www.ccav1.com</a><br>精品软件：<a href="http://www.heu8.com/good-software" target="_blank" rel="external">http://www.heu8.com/good-software</a></p>
<h3 id="练习打字"><a href="#练习打字" class="headerlink" title="练习打字"></a>练习打字</h3><p>Typing: <a href="https://www.typing.com/student" target="_blank" rel="external">https://www.typing.com/student</a><br>游戏 <a href="http://zty.pe" target="_blank" rel="external">http://zty.pe</a></p>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>数据图形展示(文图): <a href="http://www.wentu.io" target="_blank" rel="external">http://www.wentu.io</a><br>pdf装换: <a href="https://smallpdf.com" target="_blank" rel="external">https://smallpdf.com</a></p>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>本页查找  Ctrl + F     ( MAC: Command + F )<br>放大缩小  Ctrl + +/—   ( MAC: Command + +/— )<br>选中地址栏 Ctrl + L    ( MAC: Command + L )<br>切换标签页 Ctrl + Tab  ( MAC: Ctrl + Tab )<br>切换窗口   Alt + Tab   ( MAC: Command + ~ )</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#搜索技巧&lt;/p&gt;
&lt;h2 id=&quot;关键词搜索&quot;&gt;&lt;a href=&quot;#关键词搜索&quot; class=&quot;headerlink&quot; title=&quot;关键词搜索&quot;&gt;&lt;/a&gt;关键词搜索&lt;/h2&gt;&lt;p&gt;关键词之间用&lt;strong&gt;空格&lt;/strong&gt;隔开，不要用口语化搜索。&lt;/p&gt;
&lt;h2 id=&quot;语句搜索&quot;&gt;&lt;a href=&quot;#语句搜索&quot; class=&quot;headerlink&quot; title=&quot;语句搜索&quot;&gt;&lt;/a&gt;语句搜索&lt;/h2&gt;&lt;h3 id=&quot;site语句&quot;&gt;&lt;a href=&quot;#site语句&quot; class=&quot;headerlink&quot; title=&quot;site语句&quot;&gt;&lt;/a&gt;site语句&lt;/h3&gt;&lt;p&gt;&lt;em&gt;site&lt;/em&gt; + 关键词，指定在&lt;strong&gt;特定的网站&lt;/strong&gt;里搜索关键词信息&lt;br&gt;语法：site:+网站域名 +关键词（注意:site后面要加冒号“：“，网址后面加关键词之前要有空格键,关键也可以在前面）&lt;br&gt;例如搜：site:&lt;a href=&quot;http://www.nanzao.com/sc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.nanzao.com/sc&lt;/a&gt; 棱X计划 ，搜索结果全都是南华早报下对棱X计划&lt;br&gt;
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
    
      <category term="搜索" scheme="http://yoursite.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Screen 命令</title>
    <link href="http://yoursite.com/other/screen%20%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/other/screen 命令/</id>
    <published>2017-07-12T04:31:34.000Z</published>
    <updated>2017-08-25T01:45:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Screen-命令"><a href="#Screen-命令" class="headerlink" title="Screen 命令"></a>Screen 命令</h1><h2 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h2><p><code>screen</code> 指令是一般 <code>UNIX/Linux</code> 使用者常会使用的终端管理程序，它可以让一个终端当成好几个來使用，对于以 <code>SSH</code> 连接到服务器上工作的人会很有用。</p>
<p>通常一个终端（terminal 或 console）只能开启一个互动式的 <code>shell</code> 來使用，而借助 <code>screen</code> 的帮助，使用者可以在一个终端下，同时开启多个互动式的 <code>shell</code>，除了自己使用之外，还可以让 <code>session</code> 分享给不同的使用者，或是让执行中的 <code>session</code> 暂时分离（detach），随后再重新连接（attach）即可继续操作。<br><a id="more"></a></p>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>某些 <code>Linux</code> 发行版可能本身就已经内建 <code>screen</code> 这个指令了，但如果你所使用的 <code>Linux</code> 系统沒有安裝，通常也都可以直接安裝编译好的版本，因为 <code>screen</code> 是一个很常用的指令之一，通常安裝起來比较简单<br>在 <code>Debian</code> 或 <code>Ubuntu Linux</code> 中若要安装 <code>screen</code> 可以使用 <code>apt-get</code> 來安裝：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install screen</div></pre></td></tr></table></figure>
<p>而 <code>Red Hat</code> 系列的 <code>Linux</code>（如 Fedora 等）则可使用 <code>yum</code>：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install screen</div></pre></td></tr></table></figure>
<p>mac默认已安装 <code>screen</code> ,如果没有安装可使用 <code>Homebrew</code> 安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install screen</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>若要使用 screen 这个工具，就直接在终端执行它：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">screen</div></pre></td></tr></table></figure>
<p>这时候会出现一些信息，按下空格或回车键跳过之后，就可以看到一个新的 <code>shell</code>。执行 <code>exit</code> 退出当前窗口。进入 <code>screen</code> 所建立的新 <code>shell</code> 之后，看起來跟原本的界面一样，但是它其实是一个新的 <code>shell</code>，而在离开 <code>screen</code> 环境之后，就会回到原本的 <code>shell</code> 中。</p>
<p><code>screen</code> 的快捷键是使用 <code>ctrl + a</code> 来实现，如help快捷键为 <code>？</code> ，需要按住<code>control + a</code> 键，然后松开按 <code>？</code> (也就是 <code>shift + ？</code>) 来打开帮助界面，如下<br><img src="http://oimhz3xpl.bkt.clouddn.com/屏幕快照 2017-08-24 下午5.02.11.png" alt="help"><img src="http://oimhz3xpl.bkt.clouddn.com/屏幕快照 2017-08-24 下午5.03.47.png" alt="help1"></p>
<p>分离（Detach）与重新连接（Re-attach）<br>使用 <code>screen</code> 或 <code>screen -S name</code> (指定名字) 进入 screen 的环境，来执行需要进行的操作</p>
<p>如执行一个 <code>ping</code> 指令来测试网络品质。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping aixiuxiu.github.io</div></pre></td></tr></table></figure>
<p>接着按下 Ctrl + a 后，再按下 d 键（detach），这时候 screen 就会被分离，然后出现类似下面的内容</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[detached]</div></pre></td></tr></table></figure>
<p>这时候表示这个 screen 已经被分离了，就像是放进后台中执行一样，而这个时候你甚至可以把 终端关闭并不会影响之前 <code>ping</code> 命令的执行。</p>
<p>之后若要重新连接上这个 screen，可以执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">screen -r</div></pre></td></tr></table></figure>
<p>这样就会回到之前的 <code>screen</code> 环境中，这时候你也可以看到 <code>ping</code> 指令还在执行，并沒有受到影响。</p>
<p>同时使用多个 <code>screen</code> 工作环境,原來的 <code>shell</code> 中再执行一次 <code>screen</code> 指令或使用 <code>^A + c</code> 来打开新的 <code>screen</code> 环境。</p>
<p>使用 <code>screen -ls</code> 來列出目前所有的 screen 工作环境</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">There are screens on:</div><div class="line">        11826.ttys000.bogon     (Attached)</div><div class="line">        23405.ttys003.bogon     (Attached)</div><div class="line">2 Sockets in /var/folders/vb/lcw1_v5s2h726yfzc0l2bkpr0000gn/T/.screen.</div></pre></td></tr></table></figure>
<p>若要连接第一个 <code>11826.ttys000.bogon</code> screen工作环境，则在 -r 参数之后加上这个名称或前面的数字甚至前面数字区别的数字即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">screen -r 11826.ttys000.bogon</div><div class="line">screen -r 11826.ttys000.bogon</div><div class="line">screen -r 1</div></pre></td></tr></table></figure>
<p>如果由于某种原因其中一个会话死掉了（例如人为杀掉该会话），这时 <code>screen -ls</code> 会显示该会话为 <code>dead</code> 状态。使用 <code>screen -wipe</code> 命令清除该会话。</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li><code>screen -S name</code> 新建一个叫name的session</li>
<li><code>screen -ls</code> 列出当前所有的session</li>
<li><code>screen -r name</code> 回到name这个session</li>
<li><code>screen -d name</code> 远程detach某个session</li>
<li><code>screen -d -r name</code> 结束当前session并回到name这个session</li>
<li><code>screen -wipe</code> 删除已经无法使用的screen作业</li>
</ul>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul>
<li><code>^A + ?</code> 显示所有键绑定信息</li>
<li><code>^A + c</code> 创建新的screen环境</li>
<li><code>^A + d</code> 暂时断开窗口</li>
<li><code>^A + k</code> 杀死当前窗口</li>
</ul>
<p>切换窗口：</p>
<ul>
<li><code>^A + w</code> 列出所有窗口</li>
<li><code>^A + n</code> 切换上一个窗口</li>
<li><code>^A + n</code> 切换下一个窗口</li>
<li><code>^A + 0-9</code> 如果窗口太多可以通过数字切换窗口</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.gtwang.org/linux/screen-command-examples-to-manage-linux-terminals/" target="_blank" rel="external">使用 Screen 指令操控 UNIX/Linux 終端機的教學與範例</a><br><a href="https://www.cnblogs.com/mchina/archive/2013/01/30/2880680.html" target="_blank" rel="external">linux screen 命令详解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Screen-命令&quot;&gt;&lt;a href=&quot;#Screen-命令&quot; class=&quot;headerlink&quot; title=&quot;Screen 命令&quot;&gt;&lt;/a&gt;Screen 命令&lt;/h1&gt;&lt;h2 id=&quot;screen&quot;&gt;&lt;a href=&quot;#screen&quot; class=&quot;headerlink&quot; title=&quot;screen&quot;&gt;&lt;/a&gt;screen&lt;/h2&gt;&lt;p&gt;&lt;code&gt;screen&lt;/code&gt; 指令是一般 &lt;code&gt;UNIX/Linux&lt;/code&gt; 使用者常会使用的终端管理程序，它可以让一个终端当成好几个來使用，对于以 &lt;code&gt;SSH&lt;/code&gt; 连接到服务器上工作的人会很有用。&lt;/p&gt;
&lt;p&gt;通常一个终端（terminal 或 console）只能开启一个互动式的 &lt;code&gt;shell&lt;/code&gt; 來使用，而借助 &lt;code&gt;screen&lt;/code&gt; 的帮助，使用者可以在一个终端下，同时开启多个互动式的 &lt;code&gt;shell&lt;/code&gt;，除了自己使用之外，还可以让 &lt;code&gt;session&lt;/code&gt; 分享给不同的使用者，或是让执行中的 &lt;code&gt;session&lt;/code&gt; 暂时分离（detach），随后再重新连接（attach）即可继续操作。&lt;br&gt;
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
    
      <category term="screen" scheme="http://yoursite.com/tags/screen/"/>
    
  </entry>
  
  <entry>
    <title>优化 ipa</title>
    <link href="http://yoursite.com/iOS/%E4%BC%98%E5%8C%96%20ipa%20%E5%AE%89%E8%A3%85%E5%8C%85/"/>
    <id>http://yoursite.com/iOS/优化 ipa 安装包/</id>
    <published>2017-07-05T03:30:34.000Z</published>
    <updated>2017-08-14T09:44:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="优化-ipa-安装包"><a href="#优化-ipa-安装包" class="headerlink" title="优化 ipa 安装包"></a>优化 ipa 安装包</h1><p>下面介绍了 <code>iOS</code> 优化 <code>ipa</code> 安装包大小的几种方法。</p>
<h2 id="配置编译选项"><a href="#配置编译选项" class="headerlink" title="配置编译选项"></a>配置编译选项</h2><h3 id="Generate-Debug-Symbols"><a href="#Generate-Debug-Symbols" class="headerlink" title="Generate Debug Symbols"></a>Generate Debug Symbols</h3><p><code>Generate Debug Symbols</code> 这个设置在 <code>Debug</code> 和 <code>Release</code> 下 均默认为 YES。<br>当 <code>Generate Debug Symbols</code> 设置为 <code>Yes</code> 时，编译产生的 <code>.o</code> 文件会大一些，当然最终生成的可执行文件也大一些。<br>当 <code>Generate Debug Symbols</code> 设置为 <code>No</code> 的时候，在 <code>Xcode</code> 中设置的断点不会中断，同样生成的 <code>ipa</code> 安装包也会小一些。<br><a id="more"></a><br><img src="http://oimhz3xpl.bkt.clouddn.com/屏幕快照 2017-08-14 下午4.36.43.png" alt="屏幕快照 2017-08-14 下午4.36.43"></p>
<h3 id="舍弃架构armv7"><a href="#舍弃架构armv7" class="headerlink" title="舍弃架构armv7"></a>舍弃架构armv7</h3><p>armv7用于支持4s和4，4s是2011年11月正式上线，虽然还有小部分人在使用，但是追求包体大小的完全可以舍弃了。<br><img src="http://oimhz3xpl.bkt.clouddn.com/屏幕快照 2017-08-14 下午4.44.52.png" alt="屏幕快照 2017-08-14 下午4.44.52"></p>
<h3 id="Dead-Code-Stripping"><a href="#Dead-Code-Stripping" class="headerlink" title="Dead Code Stripping"></a>Dead Code Stripping</h3><p><code>build setting</code> 里 <code>DEAD_CODE_STRIPPING</code> = <code>YES</code>（默认就是 <code>YES</code> ）。 确定 <code>dead code</code>（代码被定义但从未被调用）被剥离，去掉冗余的代码，即使一点冗余代码，编译后体积也是很可观的。<br><img src="http://oimhz3xpl.bkt.clouddn.com/屏幕快照 2017-08-14 下午4.33.30.png" alt="屏幕快照 2017-08-14 下午4.33.30"></p>
<h3 id="编译器优化级别"><a href="#编译器优化级别" class="headerlink" title="编译器优化级别"></a>编译器优化级别</h3><p><code>Build Settings</code> -&gt; <code>Optimization Level</code> 有几个编译优化选项，<code>release</code> 版应该选择 <code>Fastest, Smalllest[-Os]</code>，这个选项会开启那些不增加代码大小的全部优化，并让可执行文件尽可能小。</p>
<p><img src="http://oimhz3xpl.bkt.clouddn.com/屏幕快照 2017-08-14 下午4.35.55.png" alt="屏幕快照 2017-08-14 下午4.35.55"></p>
<h3 id="去除符号信息"><a href="#去除符号信息" class="headerlink" title="去除符号信息"></a>去除符号信息</h3><p><code>Strip Debug Symbols During Copy</code> 和 <code>Symbols Hidden by Default</code> 在<code>release</code> 版本应该设为 <code>yes</code>，可以去除不必要的调试符号。<br><code>Symbols Hidden by Default</code> 会把所有符号都定义成”private extern”，设了后会减小体积。</p>
<p><img src="http://oimhz3xpl.bkt.clouddn.com/屏幕快照 2017-08-14 下午4.39.09.png" alt="屏幕快照 2017-08-14 下午4.39.09"><br><img src="http://oimhz3xpl.bkt.clouddn.com/屏幕快照 2017-08-14 下午4.39.34.png" alt="屏幕快照 2017-08-14 下午4.39.34"></p>
<h3 id="Strip-Linked-Product"><a href="#Strip-Linked-Product" class="headerlink" title="Strip Linked Product"></a>Strip Linked Product</h3><p>DEBUG下设为NO，RELEASE下设为YES，用于RELEASE模式下缩减app的大小<br><img src="http://oimhz3xpl.bkt.clouddn.com/屏幕快照 2017-08-14 下午4.42.57.png" alt="屏幕快照 2017-08-14 下午4.42.57"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="去除无用的三方库、代码、readme"><a href="#去除无用的三方库、代码、readme" class="headerlink" title="去除无用的三方库、代码、readme"></a>去除无用的三方库、代码、readme</h3><p>删除项目中无用的文件，如被弃用的类、第三方库等，有些文件在项目中文件中，但是没有添加到项目中，这时需要到项目文件中去看。我就有很多添加到项目中却没使用的文件。</p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>1.将图片加入到 <code>Assets.xcassets</code> 中。打包后在 <code>ipa</code> 中会生成 <code>Assets.car</code> 文件来存储 <code>Assets.xcassets</code> 中的图片，并且文件大小方面也大大降低。</p>
<p>2.删除不需要的图片<br>查找 iOS 工程无用图片资源工具 <a href="https://github.com/tinymind/LSUnusedResources" target="_blank" rel="external">LSUnusedResources</a></p>
<p>使用方法</p>
<blockquote>
<p>点击 Browse.. 选择一个文件夹；<br>点击 Search 开始搜索；<br>等待片刻即可看到结果。</p>
</blockquote>
<p>3.压缩图片<br>基于Mac的图像“瘦身”软件 <a href="https://imageoptim.com/" target="_blank" rel="external">imageoptim</a></p>
<p>一些比较大体积的背景图片压缩成.jpg格式, <code>imageoptim</code> 可优化jpg格式的图片</p>
<p>因为 <code>xcode</code> 里的工程配置，<code>Compress PNG Files</code> 是 <code>YES</code> 的，会对 <code>png</code> 的图片进行压缩，这时使用 <code>imageoptim</code> 压缩之后，不会减小 <code>ipa</code> 大小。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.jianshu.com/p/a49d59b01669" target="_blank" rel="external">iOS 优化ipa包，减小安装包大小</a><br><a href="http://www.jianshu.com/p/a72d03e92c80" target="_blank" rel="external">ipa文件“减肥”初探</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;优化-ipa-安装包&quot;&gt;&lt;a href=&quot;#优化-ipa-安装包&quot; class=&quot;headerlink&quot; title=&quot;优化 ipa 安装包&quot;&gt;&lt;/a&gt;优化 ipa 安装包&lt;/h1&gt;&lt;p&gt;下面介绍了 &lt;code&gt;iOS&lt;/code&gt; 优化 &lt;code&gt;ipa&lt;/code&gt; 安装包大小的几种方法。&lt;/p&gt;
&lt;h2 id=&quot;配置编译选项&quot;&gt;&lt;a href=&quot;#配置编译选项&quot; class=&quot;headerlink&quot; title=&quot;配置编译选项&quot;&gt;&lt;/a&gt;配置编译选项&lt;/h2&gt;&lt;h3 id=&quot;Generate-Debug-Symbols&quot;&gt;&lt;a href=&quot;#Generate-Debug-Symbols&quot; class=&quot;headerlink&quot; title=&quot;Generate Debug Symbols&quot;&gt;&lt;/a&gt;Generate Debug Symbols&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Generate Debug Symbols&lt;/code&gt; 这个设置在 &lt;code&gt;Debug&lt;/code&gt; 和 &lt;code&gt;Release&lt;/code&gt; 下 均默认为 YES。&lt;br&gt;当 &lt;code&gt;Generate Debug Symbols&lt;/code&gt; 设置为 &lt;code&gt;Yes&lt;/code&gt; 时，编译产生的 &lt;code&gt;.o&lt;/code&gt; 文件会大一些，当然最终生成的可执行文件也大一些。&lt;br&gt;当 &lt;code&gt;Generate Debug Symbols&lt;/code&gt; 设置为 &lt;code&gt;No&lt;/code&gt; 的时候，在 &lt;code&gt;Xcode&lt;/code&gt; 中设置的断点不会中断，同样生成的 &lt;code&gt;ipa&lt;/code&gt; 安装包也会小一些。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
      <category term="ipa" scheme="http://yoursite.com/tags/ipa/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis</title>
    <link href="http://yoursite.com/java/Mybatis/"/>
    <id>http://yoursite.com/java/Mybatis/</id>
    <published>2017-07-02T09:12:30.000Z</published>
    <updated>2017-08-01T01:33:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="Mapper-XML"><a href="#Mapper-XML" class="headerlink" title="Mapper XML"></a>Mapper XML</h2><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>查询语句是 <code>MyBatis</code> 中最常用的元素之一，每个插入、更新或删除操作，通常对应多个查询操作。这是 <code>MyBatis</code> 的基本原则之一，也是将焦点和努力放到查询和结果映射的原因。简单查询的 <code>select</code> 查询是非常简单的。比如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPerson"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"hashmap"</span>&gt;</span></div><div class="line">  SELECT * FROM PERSON WHERE ID = #&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>这个语句被称作 <code>selectPerson</code>，接受一个 <code>int</code>（或 <code>Integer</code>）类型的参数，并返回一个 <code>HashMap</code> 类型的对象，其中的键是列名，值便是结果行中的对应值。</p>
<p>注意参数符号： <strong>#{id}</strong></p>
<p>这就告诉 <code>MyBatis</code> 创建一个预处理语句参数，通过 <code>JDBC</code>，这样的一个参数在 <code>SQL</code> 中会由一个“?”来标识，并被传递到一个新的预处理语句中，就像这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Similar JDBC code, NOT MyBatis…</span></div><div class="line">String selectPerson = <span class="string">"SELECT * FROM PERSON WHERE ID=?"</span>;</div><div class="line">PreparedStatement ps = conn.prepareStatement(selectPerson);</div><div class="line">ps.setInt(<span class="number">1</span>,id);</div></pre></td></tr></table></figure>
<p><code>select</code> 元素有很多属性允许你配置，来决定每条语句的作用细节。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span></span></div><div class="line">  <span class="attr">id</span>=<span class="string">"selectPerson"</span></div><div class="line">  <span class="attr">parameterType</span>=<span class="string">"int"</span></div><div class="line">  <span class="attr">parameterMap</span>=<span class="string">"deprecated"</span></div><div class="line">  <span class="attr">resultType</span>=<span class="string">"hashmap"</span></div><div class="line">  <span class="attr">resultMap</span>=<span class="string">"personResultMap"</span></div><div class="line">  <span class="attr">flushCache</span>=<span class="string">"false"</span></div><div class="line">  <span class="attr">useCache</span>=<span class="string">"true"</span></div><div class="line">  <span class="attr">timeout</span>=<span class="string">"10000"</span></div><div class="line">  <span class="attr">fetchSize</span>=<span class="string">"256"</span></div><div class="line">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></div><div class="line">  <span class="attr">resultSetType</span>=<span class="string">"FORWARD_ONLY"</span>&gt;</div></pre></td></tr></table></figure>
<p>具体查看<a href="#property">属性列表</a></p>
<h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>下面就是 <code>insert</code> 语句的示例</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertAuthor"</span>&gt;</span></div><div class="line">  insert into Author (id,username,password,email)</div><div class="line">  values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<p>insert 元素有很多属性,具体查看<a href="#property">属性列表</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">insert</span></span></div><div class="line">  <span class="attr">id</span>=<span class="string">"insertAuthor"</span></div><div class="line">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></div><div class="line">  <span class="attr">flushCache</span>=<span class="string">"true"</span></div><div class="line">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></div><div class="line">  <span class="attr">keyProperty</span>=<span class="string">""</span></div><div class="line">  <span class="attr">keyColumn</span>=<span class="string">""</span></div><div class="line">  <span class="attr">useGeneratedKeys</span>=<span class="string">""</span></div><div class="line">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</div></pre></td></tr></table></figure>
<p>如果你的数据库支持自动生成主键的字段（比如 <code>MySQL</code> 和 <code>SQL Server</code>），那么你可以设置 <code>useGeneratedKeys=”true”</code> ，然后再把 <code>keyProperty</code> 设置到目标属性上就OK了。例如，如果上面的 Author 表已经对 id 使用了自动生成的列类型，那么语句可以修改为:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertAuthor"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span></span></div><div class="line">    <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</div><div class="line">  insert into Author (username,password,email)</div><div class="line">  values (#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果你的数据库还支持多行插入, 你也可以传入一个 <code>Authors</code> 数组或集合，并返回自动生成的主键。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertAuthor"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span></span></div><div class="line">    <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</div><div class="line">  insert into Author (username, password, email) values</div><div class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></div><div class="line">    (#&#123;item.username&#125;, #&#123;item.password&#125;, #&#123;item.email&#125;)</div><div class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<p>对于不支持自动生成类型的数据库或可能不支持自动生成主键 <code>JDBC</code> 驱动来说，<code>MyBatis</code> 可以使用 <code>Oracle</code> 序列生成主键。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertAuthor"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span>&gt;</span></div><div class="line">    select STOCKIDSEQUENCE.NEXTVAL as id from DUAL</div><div class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></div><div class="line">  insert into Author</div><div class="line">    (id, username, password, email)</div><div class="line">  values</div><div class="line">    (#&#123;id&#125;, #&#123;username&#125;, #&#123;password&#125;, #&#123;email&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>下面就是 <code>update</code> 语句的示例</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAuthor"</span>&gt;</span></div><div class="line">  update Author set</div><div class="line">    username = #&#123;username&#125;,</div><div class="line">    password = #&#123;password&#125;,</div><div class="line">    email = #&#123;email&#125;,</div><div class="line">  where id = #&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>update</code> 元素的属性,<a href="#property">属性列表</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span></span></div><div class="line">  <span class="attr">id</span>=<span class="string">"updateAuthor"</span></div><div class="line">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></div><div class="line">  <span class="attr">flushCache</span>=<span class="string">"true"</span></div><div class="line">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></div><div class="line">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>下面就是 <code>update</code> 语句的示例</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteAuthor"</span>&gt;</span></div><div class="line">  delete from Author where id = #&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>update</code> 元素的属性,<a href="#property">属性列表</a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">delete</span></span></div><div class="line">  <span class="attr">id</span>=<span class="string">"deleteAuthor"</span></div><div class="line">  <span class="attr">parameterType</span>=<span class="string">"domain.blog.Author"</span></div><div class="line">  <span class="attr">flushCache</span>=<span class="string">"true"</span></div><div class="line">  <span class="attr">statementType</span>=<span class="string">"PREPARED"</span></div><div class="line">  <span class="attr">timeout</span>=<span class="string">"20"</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="属性列表"><a href="#属性列表" class="headerlink" title="属性列表"></a>属性列表</h3><p><span id="property">属性的详细信息</span></p>
<table>
<thead>
<tr>
<th>属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td style="text-align:left">在命名空间中唯一的标识符，可以被用来引用这条语句</td>
</tr>
<tr>
<td>parameterType</td>
<td style="text-align:left">将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler 推断出具体传入语句的参数，默认值为 unset</td>
</tr>
<tr>
<td><del>parameterMap</del></td>
<td style="text-align:left"><del>这是引用外部 parameterMap 的已经被废弃的方法。使用内联参数映射和 parameterType 属性</del></td>
</tr>
<tr>
<td>resultMap</td>
<td style="text-align:left">外部 resultMap 的命名引用。结果集的映射是 MyBatis 最强大的特性，对其有一个很好的理解的话，许多复杂映射的情形都能迎刃而解。使用 resultMap 或 resultType，但不能同时使用</td>
</tr>
<tr>
<td>flushCache</td>
<td style="text-align:left">将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：true（对应插入、更新和删除语句）</td>
</tr>
<tr>
<td>useCache</td>
<td style="text-align:left">将其设置为 true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true</td>
</tr>
<tr>
<td>timeout</td>
<td style="text-align:left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）</td>
</tr>
<tr>
<td>fetchSize</td>
<td style="text-align:left">这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为 unset（依赖驱动）。</td>
</tr>
<tr>
<td>statementType</td>
<td style="text-align:left">STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td>
</tr>
<tr>
<td>resultSetType</td>
<td style="text-align:left">FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动）</td>
</tr>
<tr>
<td>useGeneratedKeys</td>
<td style="text-align:left">（仅对 insert 和 update 有用）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系数据库管理系统的自动递增字段），默认值：false</td>
</tr>
<tr>
<td>keyProperty</td>
<td style="text-align:left">（仅对 insert 和 update 有用）唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 的返回值或者通过 insert 语句的 selectKey 子元素设置它的键值，默认：unset。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。</td>
</tr>
<tr>
<td>keyColumn</td>
<td style="text-align:left">（仅对 insert 和 update 有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像 PostgreSQL）是必须的，当主键列不是表中的第一列的时候需要设置。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。</td>
</tr>
</tbody>
</table>
<h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><p>这个元素可以被用来定义可重用的 SQL 代码段，可以包含在其他语句中。它可以被静态地(在加载参数) 参数化. 不同的属性值通过包含的实例变化. 比如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"userColumns"</span>&gt;</span> $&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.password <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个 SQL 片段可以被包含在其他语句中，例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></div><div class="line">  select</div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t1"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>,</div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"userColumns"</span>&gt;</span><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"alias"</span> <span class="attr">value</span>=<span class="string">"t2"</span>/&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">  from some_table t1</div><div class="line">    cross join some_table t2</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>属性值可以用于包含的 <code>refid</code> 属性或者包含的字句里面的属性值，例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"sometable"</span>&gt;</span></div><div class="line">  $&#123;prefix&#125;Table</div><div class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"someinclude"</span>&gt;</span></div><div class="line">  from</div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"$&#123;include_target&#125;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"select"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></div><div class="line">  select</div><div class="line">    field1, field2, field3</div><div class="line">  <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"someinclude"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"Some"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"include_target"</span> <span class="attr">value</span>=<span class="string">"sometable"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="动态-SQL"><a href="#动态-SQL" class="headerlink" title="动态 SQL"></a>动态 SQL</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>动态 <code>SQL</code> 通常要做的事情是有条件地包含 <code>where</code> 子句的一部分。比如:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogWithTitleLike"</span></span></div><div class="line">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</div><div class="line">  SELECT * FROM BLOG</div><div class="line">  WHERE state = ‘ACTIVE’</div><div class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></div><div class="line">    AND title like #&#123;title&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这条语句提供了一个可选的文本查找类型的功能。如果没有传入 <code>title</code>，那么所有处于 <code>ACTIVE</code> 状态的 BLOG 都会返回；反之若传入了 <code>title</code> ，那么就会把模糊查找 <code>title</code> 内容的 BLOG 结果返回。</p>
<h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose, when, otherwise"></a>choose, when, otherwise</h3><p>有些时候，我们不想用到所有的条件语句，而只想从中择其一二。针对这种情况，<code>MyBatis</code> 提供了 <code>choose</code> 元素，它有点像 <code>Java</code> 中的 <code>switch</code> 语句, <code>choose</code> 为 <code>switch</code>，<code>when</code> 为 <code>case</code>，<code>otherwise</code> 则为 <code>default</code>。</p>
<p>还是上面的例子，但是这次变为提供了 <code>title</code> 就按 <code>title</code> 查找，提供了 <code>author</code> 就按 <code>author</code> 查找，若两者都没有提供，就返回所有符合条件的 BLOG（实际情况可能是由管理员按一定策略选出 BLOG 列表，而不是返回大量无意义的随机结果）。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></div><div class="line">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</div><div class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</div><div class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></div><div class="line">      AND title like #&#123;title&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></div><div class="line">      AND author_name like #&#123;author.name&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></div><div class="line">      AND featured = 1</div><div class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim, where, set"></a>trim, where, set</h3><p><code>&lt;where&gt;</code> 标签会知道如果它包含的标签中有返回值的话，它就插入一个 <code>WHERE</code>。此外，如果标签返回的内容是以 <code>AND</code> 或 <code>OR</code> 开头的，则它会剔除掉。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span></span></div><div class="line">     <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</div><div class="line">  SELECT * FROM BLOG</div><div class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state != null"</span>&gt;</span></div><div class="line">         state = #&#123;state&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></div><div class="line">        AND title like #&#123;title&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></div><div class="line">        AND author_name like #&#123;author.name&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果 <code>where</code> 元素没有按正常套路出牌，我们还是可以通过自定义 <code>trim</code> 元素来定制我们想要的功能。比如，和 <code>where</code> 元素等价的自定义 <code>trim</code> 元素为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"WHERE"</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND |OR "</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>prefix</code> 内容之前加的前缀<br><code>suffix</code> 内容之后加的后缀<br><code>prefixOverrides</code> 属性会忽略通过管道分隔的文本序列（注意此例中的<strong>空格</strong>也是必要的）。它带来的结果就是所有在 <code>prefixOverrides</code> 属性中指定的内容将被移除，并且插入 <code>prefix</code> 属性中指定的内容。</p>
<p>当在 <code>update</code> 语句中使用 <code>&lt;if&gt;</code> 标签时，如果前面的 <code>&lt;if&gt;</code> 没有执行，则或导致逗号多余错误。使用 <code>&lt;set&gt;</code> 标签可以将动态的配置 <code>SET</code> 关键字，和剔除追加到条件末尾的任何不相关的逗号。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateAuthorIfNecessary"</span>&gt;</span></div><div class="line">  update Author</div><div class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null"</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"bio != null"</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">  where id=#&#123;id&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<p>若你对等价的自定义 <code>trim</code> 元素的样子感兴趣，那这就应该是它的真面目：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p><code>&lt;foreach&gt;</code> 是循环，用来读取传入的 <code>list</code> 参数,<code>&lt;foreach&gt;</code> 标签中的 <code>collection</code> 属性表示传入的是什么集合类型，<code>item</code> 表示的是集合</p>
<p>动态 SQL 的另外一个常用的必要操作是需要对一个集合进行遍历，通常是在构建 IN 条件语句的时候。比如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPostIn"</span> <span class="attr">resultType</span>=<span class="string">"domain.blog.Post"</span>&gt;</span></div><div class="line">  SELECT *</div><div class="line">  FROM POST P</div><div class="line">  WHERE ID in</div><div class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"list"</span></span></div><div class="line">      <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</div><div class="line">        #&#123;item&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li>item： 就相当于 string 的作用，用来遍历 collection</li>
<li>index： 就是集合的索引</li>
<li>open： 表示标签以什么开始</li>
<li>close： 表示标签以什么结束</li>
<li>seprator： 表示元素之间的间隔</li>
</ul>
<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p><code>bind</code> 元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文。比如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBlogsLike"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"'%' + _parameter.getTitle() + '%'"</span> /&gt;</span></div><div class="line">  SELECT * FROM BLOG</div><div class="line">  WHERE title LIKE #&#123;pattern&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>对 <code>&lt;bind&gt;</code> 参数的调用可以通过 <code>#{}</code> 或 <code>${}</code> 方式获取，<code>#{}</code> 可以防止注入。</p>
<h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBatchByXXX"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    DELETE FROM 表名 WHERE groupon_id IN</div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span> =<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></div><div class="line">        #&#123;item&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">foreach</span> &gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">delete</span> &gt;</span></div></pre></td></tr></table></figure>
<h3 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertBatch"</span> &gt;</span></div><div class="line">    INSERT INTO 表名 (uid, groupon_id, create_time, receive_time) VALUES</div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span> =<span class="string">"index"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></div><div class="line">        (#&#123;item.uid&#125;, #&#123;item.grouponId&#125;, #&#123;item.createTime&#125;, #&#123;item.receiveTime&#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">foreach</span> &gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h3><p>用法和之前的基本相同，但是需要注意传入的参数是 <code>map</code> 类型。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"batchUpdateStudentWithMap"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span> &gt;</span></div><div class="line">    UPDATE STUDENT SET name = #&#123;name&#125; WHERE id IN</div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"idList"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></div><div class="line">        #&#123;item&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<p>更新多条记录为多个字段为不同的值</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBatch"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.List"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">open</span>=<span class="string">""</span> <span class="attr">close</span>=<span class="string">""</span> <span class="attr">separator</span>=<span class="string">";"</span>&gt;</span></div><div class="line">        UPDATE course</div><div class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">            name=$&#123;item.name&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line">        WHERE id=$&#123;item.id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样一条记录 <code>update</code> 一次，性能比较差，容易造成阻塞。</p>
<p>MySQL 没有提供直接的方法来实现批量更新，但可以使用 <code>case</code> <code>when</code> 语法来实现这个功能。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> course</div><div class="line">    <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="keyword">CASE</span> <span class="keyword">id</span></div><div class="line">        <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'name1'</span></div><div class="line">        <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">'name2'</span></div><div class="line">        <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="string">'name3'</span></div><div class="line">    <span class="keyword">END</span>,</div><div class="line">    title = <span class="keyword">CASE</span> <span class="keyword">id</span></div><div class="line">        <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'New Title 1'</span></div><div class="line">        <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">'New Title 2'</span></div><div class="line">        <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="string">'New Title 3'</span></div><div class="line">    <span class="keyword">END</span></div><div class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</div></pre></td></tr></table></figure>
<p>这条 SQL 的意思是，如果 <code>id</code> 为 1，则 <code>name</code> 的值为 name1，<code>title</code> 的值为 New Title1；依此类推</p>
<p>在 Mybatis 中的写法则如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBatch"</span> <span class="attr">parameterType</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    UPDATE course</div><div class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"peopleId=CASE"</span> <span class="attr">suffix</span>=<span class="string">"END,"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"i"</span> <span class="attr">index</span>=<span class="string">"index"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"i.peopleId!=null"</span>&gt;</span>WHEN id=#&#123;i.id&#125; THEN #&#123;i.peopleId&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"roadgridid=CASE"</span> <span class="attr">suffix</span>=<span class="string">"END,"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"i"</span> <span class="attr">index</span>=<span class="string">"index"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"i.roadgridid!=null"</span>&gt;</span>WHEN id=#&#123;i.id&#125; THEN #&#123;i.roadgridid&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"type=CASE"</span> <span class="attr">suffix</span>=<span class="string">"END,"</span> &gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"i"</span> <span class="attr">index</span>=<span class="string">"index"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"i.type!=null"</span>&gt;</span>WHEN id=#&#123;i.id&#125; THEN #&#123;i.type&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"unitsid=CASE"</span> <span class="attr">suffix</span>=<span class="string">"END,"</span> &gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"i"</span> <span class="attr">index</span>=<span class="string">"index"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"i.unitsid!=null"</span>&gt;</span>WHEN id=#&#123;i.id&#125; THEN #&#123;i.unitsid&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></div><div class="line">    WHERE</div><div class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">separator</span>=<span class="string">"or"</span> <span class="attr">item</span>=<span class="string">"i"</span> <span class="attr">index</span>=<span class="string">"index"</span>&gt;</span>id=#&#123;i.id&#125;<span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><p>使用 LIKE 语句</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--MySql</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="keyword">CONCAT</span>(<span class="string">'%'</span>,#&#123;<span class="keyword">name</span>&#125;,<span class="string">'%'</span>)</div><div class="line"><span class="comment">--Oracle</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="keyword">CONCAT</span>(<span class="string">'%'</span>,#&#123;<span class="keyword">name</span>&#125;,<span class="string">'%'</span>)</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%'</span>||#&#123;<span class="keyword">name</span>&#125;||<span class="string">'%'</span></div><div class="line"><span class="comment">--SQLServer</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%'</span>+#&#123;<span class="keyword">name</span>&#125;+<span class="string">'%'</span></div><div class="line"><span class="comment">--DB2</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="keyword">CONCAT</span>(<span class="string">'%'</span>,#&#123;<span class="keyword">name</span>&#125;,<span class="string">'%'</span>)</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%'</span>||#&#123;<span class="keyword">name</span>&#125;||<span class="string">'%'</span></div></pre></td></tr></table></figure>
<p>或者使用bind</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPersons"</span> <span class="attr">resultType</span>=<span class="string">"person"</span> <span class="attr">parameterType</span>=<span class="string">"person"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"'%' + _parameter.username + '%'"</span> /&gt;</span></div><div class="line">  select id,sex,age,username,password</div><div class="line">  from person</div><div class="line">  where username LIKE #&#123;pattern&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="和"><a href="#和" class="headerlink" title="#{} 和 ${}"></a>#{} 和 ${}</h3><p><code>#{}</code> 与 <code>${}</code> 的区别<br><code>#{}</code> 会根据传进来的参数的类型自动加上相应的信息，例如字符串两边会加上 ‘’，日期对象会自动的转化成 SQL 识别的内容，可以防止 SQL 注入攻击。<br><code>${}</code> 直接替换，例如传进来的是字符串，不会在字符串两边加上 ‘’，使用的场景有如 <code>ORDER BY</code>，表名 等</p>
<h3 id="使用-Param-传递多个参数"><a href="#使用-Param-传递多个参数" class="headerlink" title="使用 @Param 传递多个参数"></a>使用 @Param 传递多个参数</h3><p>传递多个参数可以使用</p>
<ul>
<li>Map</li>
<li>JavaBean 中存放多个属性</li>
<li>@Param</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsers</span><span class="params">(@Param(<span class="string">"offset"</span>)</span> <span class="keyword">int</span> offset, @<span class="title">Param</span><span class="params">(<span class="string">"count"</span>)</span> <span class="keyword">int</span> count)</span>;</div></pre></td></tr></table></figure>
<h3 id="CDATA"><a href="#CDATA" class="headerlink" title="CDATA"></a>CDATA</h3><p>术语 <code>CDATA</code> 指的是不应由 XML 解析器进行解析的文本数据（Unparsed Character Data）。<br>在 <code>XML</code> 元素中，”&lt;” 和 “&amp;” 是非法的。</p>
<ul>
<li>“&lt;” 会产生错误，因为解析器会把该字符解释为新元素的开始。</li>
<li>“&amp;” 也会产生错误，因为解析器会把该字符解释为字符实体的开始。</li>
</ul>
<p>某些文本，比如 <code>JavaScript</code> 代码，包含大量 “&lt;” 或 “&amp;” 字符。为了避免错误，可以将脚本代码定义为 <code>CDATA</code>。<br><code>CDATA</code> 部分中的所有内容都会被解析器忽略。<br><code>CDATA</code> 部分由 <code>&lt;![CDATA[</code> 开始，由 <code>]]&gt;</code> 结束：</p>
<p>在 <code>mapper</code> 文件中写 <code>sql</code> 语句时，遇到特殊字符时，如：<code>&lt;</code> 等，建议使用 <code>&lt;![CDATA[ sql 语句 ]]&gt;</code> 标记，将 <code>sql</code> 语句包裹住，不被解析器解析</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="external">mybatis</a><br><a href="https://xtuer.github.io/spring-web-mybatis-syntax/" target="_blank" rel="external">Mybatis 语法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis&quot;&gt;&lt;a href=&quot;#Mybatis&quot; class=&quot;headerlink&quot; title=&quot;Mybatis&quot;&gt;&lt;/a&gt;Mybatis&lt;/h1&gt;&lt;h2 id=&quot;Mapper-XML&quot;&gt;&lt;a href=&quot;#Mapper-XML&quot; class=&quot;headerlink&quot; title=&quot;Mapper XML&quot;&gt;&lt;/a&gt;Mapper XML&lt;/h2&gt;&lt;h3 id=&quot;select&quot;&gt;&lt;a href=&quot;#select&quot; class=&quot;headerlink&quot; title=&quot;select&quot;&gt;&lt;/a&gt;select&lt;/h3&gt;&lt;p&gt;查询语句是 &lt;code&gt;MyBatis&lt;/code&gt; 中最常用的元素之一，每个插入、更新或删除操作，通常对应多个查询操作。这是 &lt;code&gt;MyBatis&lt;/code&gt; 的基本原则之一，也是将焦点和努力放到查询和结果映射的原因。简单查询的 &lt;code&gt;select&lt;/code&gt; 查询是非常简单的。比如：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;selectPerson&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;parameterType&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;int&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;resultType&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hashmap&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  SELECT * FROM PERSON WHERE ID = #&amp;#123;id&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>tomcat</title>
    <link href="http://yoursite.com/java/tomcat/"/>
    <id>http://yoursite.com/java/tomcat/</id>
    <published>2017-06-28T02:31:34.000Z</published>
    <updated>2017-07-28T02:16:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="http://tomcat.apache.org" target="_blank" rel="external">下载地址</a><br>将 <code>tomcat</code> 文件夹复制到 <code>/Library</code> 目录下,然后修改权限</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 755 /Library/tomcat</div></pre></td></tr></table></figure>
<p>添加环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=$PATH:/Users/yourname/Library/tomcat/bin</div></pre></td></tr></table></figure>
<p>验证tomcat是否安装成功<br>执行 <code>startup.sh</code> 命令启动 <code>tomcat</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startup.sh</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>打开 <a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a> 验证tomcat是否安装成功<br><img src="http://oimhz3xpl.bkt.clouddn.com/屏幕快照 2017-07-27 下午4.23.05.png" alt="屏幕快照 2017-07-27 下午4.23.05"></p>
<p>##配置Tomcat启动脚本</p>
<p>Tomcat的目录层次结构<br>使用文本编辑器添加以下代码：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></div><div class="line">start)</div><div class="line">sh /Users/yourname/Library/tomcat/bin/startup.sh</div><div class="line">;;</div><div class="line">stop)</div><div class="line">sh /Users/yourname/Library/tomcat/bin/shutdown.sh</div><div class="line">;;</div><div class="line">restart)</div><div class="line">sh /Users/yourname/Library/tomcat/bin/shutdown.sh</div><div class="line">sh /Users/yourname/Library/tomcat/bin/startup.sh</div><div class="line">;;</div><div class="line">*)</div><div class="line"><span class="built_in">echo</span> “Usage: start|stop|restart”</div><div class="line">;;</div><div class="line"><span class="keyword">esac</span></div><div class="line"></div><div class="line"><span class="built_in">exit</span> 0</div></pre></td></tr></table></figure>
<p><code>/Users/yourname/Library/tomcat/bin</code> 要根据tomcat实际的安装路径来写</p>
<p>将文件保存为 <code>tomcat</code> 小写并不带后缀，存放到 <code>/usr/local/bin</code> 或 <code>/usr/bin</code> 。赋予文件执行权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 tomcat</div></pre></td></tr></table></figure>
<p>之后便可以在终端中简单地输入 <code>tomcat start</code> 和 <code>tomcat stop</code> 启用和关闭tomcat了。<br>快捷命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tomcat start </div><div class="line">tomcat stop</div><div class="line">tomcat restart</div></pre></td></tr></table></figure>
<h2 id="Tomcat-目录的结构"><a href="#Tomcat-目录的结构" class="headerlink" title="Tomcat 目录的结构"></a>Tomcat 目录的结构</h2><p>bin:  存放启动和关闭tomcat的脚本文件</p>
<p>conf：存放tomcat服务器的各种配置文件</p>
<p>lib:  存放tomcat服务器支撑的jar包</p>
<p>logs: 存放tomcat的日志文件</p>
<p>temp: 存放tomcat运行时产生的临时文件</p>
<p>webapps: web应用虽在目录，即供外界访问的web资源的存放目录</p>
<p>work: tomcat的工作目录</p>
<p>主要文件介绍<br>bin </p>
<blockquote>
<p>catalina.sh 用于启动和关闭tomcat服务器<br>configtest.sh 用于检查配置文件<br>startup.sh 启动tomcat脚本<br>shutdown.sh 关闭tomcat脚本</p>
</blockquote>
<p>conf</p>
<blockquote>
<p>server.xml tomcat 的全局配置文件<br>web.xml 为不同的tomcat配置的web应用设置缺省值的文件<br>tomcat-users.xml tomcat用户认证的配置文件<br>logging.properties tomcat通过自己内部实现的JAVA日志记录器来记录操作相关的日志<br>context.xml：所有host的默认配置信息</p>
</blockquote>
<p>logs</p>
<blockquote>
<p>localhost_access_log.2017-06-28.txt 访问日志<br>localhost.2017-06-28.log 错误和其它日志<br>manager.2017-06-28.log 管理日志<br>catalina.2017-06-28.log tomcat启动或关闭日志文件</p>
</blockquote>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="静态部署"><a href="#静态部署" class="headerlink" title="静态部署"></a>静态部署</h3><p>1.直接将 <code>web</code> 项目文件件拷贝到 <code>webapps</code> 目录中<br>将 <code>war</code> 包直接拷贝到 <code>webapps</code> 目录中，服务器会自动解开这个 <code>war</code> 包，并在这个目录下生成一个同名的文件夹<br><code>webapps</code> 这个默认的应用目录也是可以改变。打开 <code>tomcat</code> 的 <code>conf</code> 目录下的 <code>server.xml</code> 文件，找到下面内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Host name=&quot;localhost&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot; xmlNamespaceAware=&quot;false&quot;&gt;</div></pre></td></tr></table></figure>
<p>将 <code>appBase</code> 修改即可。</p>
<p>2.在 <code>server.xml</code> 中指定<br>在 <code>tomcat</code> 的配置文件中，一个 <code>Web</code> 应用就是一个特定的 <code>Context</code> ，可以通过在 <code>server.xml</code> 中新建 <code>Context</code> 里部署一个 <code>JSP</code> 应用程序。打开 <code>server.xml</code> 文件，在 <code>Host</code> 标签内建一个 <code>Context</code> ，内容如下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;Context path =&quot;/hello&quot; docBase =&quot;/Users/yourname/workspace/hello/WebRoot&quot; debug =&quot;0&quot; privileged =&quot;true&quot;&gt;</div><div class="line">&lt;/Context&gt;</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<blockquote>
<p>path： 是虚拟路径；<br>docBase： 是应用程序的物理路径；<br>workDir： 是这个应用的工作目录，存放运行时生成的与这个应用相关的文件；<br>debug： 则是设定 debug level,  0 表示提供最少的信息， 9 表示提供最多的信息<br>privileged： 设置为 true 的时候，才允许 Tomcat 的 Web 应用使用容器内的 Servlet<br>reloadable： 如果为 true ，则 tomcat 会自动检测应用程序的 /WEB-INF/lib 和 /WEB-INF/classes 目录的变化，自动装载新的应用程序，可以在不重起 tomcat 的情况下改变应用程序，实现热部署<br>antiResourceLocking 和 antiJARLocking： 热部署是需要配置的参数，默认 false 避免 更新了某个 webapp ，有时候 Tomcat 并不能把旧的 webapp 完全删除，通常会留下 WEB-INF/lib 下的某个 jar 包，必须关闭 Tomcat 才能删除，这就导致自动部署失败。设置为 true ， Tomcat 在运行对应的 webapp 时，会把相应的源文件和 jar 文件复制到一个临时目录里。</p>
</blockquote>
<p>3.创建一个Context 文件<br>在 <code>conf\Catalina\localhost</code> 目录中，新建一个 <code>xml</code> 文件，名字不可以随意取，要和 <code>path</code> 后的那个名字一致，按照下边这个 <code>path</code> 的配置， <code>xml</code> 的名字应该就应该是 <code>hello</code> （ hello.xml ），该 <code>xml</code> 文件的内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;Context path =&quot;/hello&quot; docBase =&quot;/Users/yourname/workspace/hello/WebRoot&quot; debug =&quot;0&quot; privileged =&quot;true&quot;&gt;</div><div class="line">&lt;/Context&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>注：删除一个 Web 应用同时也要删除 webapps 下相应的文件夹和 server.xml 中相应的 Context ，还要将 Tomcat 的 conf/catalina/localhost 目录下相应的 xml 文件删除，否则 Tomcat 仍会去配置并加载。</p>
</blockquote>
<h3 id="动态部署"><a href="#动态部署" class="headerlink" title="动态部署"></a>动态部署</h3><p>先了解 <code>tomcat</code> 图形管理接口<br><img src="http://oimhz3xpl.bkt.clouddn.com/屏幕快照 2017-07-27 下午5.03.47.png" alt="屏幕快照 2017-07-27 下午5.03.47"></p>
<p><code>Server Status</code> 主要用来查看服务器的状态<br><code>Manager App</code> 主要用来管理应用程序的部署及监控<br><code>Host Manager</code> 主要用来管理虚拟主机</p>
<p>Manager 的四个管理角色：</p>
<blockquote>
<p>manager-gui - allows access to the HTML GUI and the status pages<br>manager-script - allows access to the text interface and the status pages<br>manager-jmx - allows access to the JMX proxy and the status pages<br>manager-status - allows access to the status pages only</p>
</blockquote>
<p>在用户认证的配置文件 <code>tomcat-users.xml</code> 文件中添加用户名和密码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;role rolename=&quot;tomcat&quot;/&gt;</div><div class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;</div><div class="line">&lt;role rolename=&quot;admin-gui&quot;/&gt;</div><div class="line">&lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;tomcat,manager-gui,admin-gui&quot;/&gt;</div></pre></td></tr></table></figure>
<p>登陆 tomcat 管理控制台： <a href="http://localhost:8080/manager/html" target="_blank" rel="external">http://localhost:8080/manager/html</a> ，输入上面配置的用户名和密码后便可管理应用并动态发布。<br><img src="http://oimhz3xpl.bkt.clouddn.com/屏幕快照 2017-07-27 下午5.08.18.png" alt="屏幕快照 2017-07-27 下午5.08.18"><br>在 <code>Context Path(required)</code> 中输入 <code>/yourwebname</code> ，这代表你的应用的访问地址。<br><code>XML Configration file URL</code> 中要指定一个 <code>xml</code> 文件，比如我们在 /user/yourname/work/ 下建立一个 <code>hellow.xml</code> 文件，内容如下： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Context reloadable=&quot;false&quot; /&gt;</div></pre></td></tr></table></figure>
<p>其中 <code>docBase</code> 不用写了，因为在下一个文本框中填入。或者更简单点，这个文本框什么都不填，在 WAR or Directory URL: 中键入 /user/yourname/work/hello.war 即可，然后点击 Deploy 按钮，上面就可以看到了 web 应用程序，名字就 <code>Context Path(required)</code> 中的名字。</p>
<p>或者直接使用下面的 <code>Select WAR file uploae</code> 点击浏览选择 <code>war</code> 文件，然后点击<code>Deploy</code> 即可。   </p>
<h3 id="远程部署"><a href="#远程部署" class="headerlink" title="远程部署"></a>远程部署</h3><p>首先你要知道远程服务1：IP或域名，2:用户名，密码 3:远程服务器已经装有 <code>ssh</code><br>登录到远程服务器（一般服务机都会提供ssh协议）：<code>ssh username@servername</code><br>接下来会提示输入密码：<code>password</code></p>
<p>密码正确后会进入服务提供的根目录中，这时候可以进入到tomact目录中.<br>关闭tomcat服务要先进入tomcat的bin目录然后输入：<code>./shutdown.sh</code><br>启动tomcat服务要在bin 目录中输入：<code>./startup.sh</code></p>
<p>如果要查看启动运行日志可以进入logs目录下，然后输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail  -f catalina.out</div></pre></td></tr></table></figure>
<p>这样就可以查看动态日志, <code>ctrl＋c</code> 退出</p>
<p>复制本地文件到服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp /path/filename username@servername:/path</div></pre></td></tr></table></figure>
<p>复制目录到服务器使用 <code>scp -r</code></p>
<p>复制本地文件到服务器并重新启动 <code>tomcat</code> 就完成了部署。</p>
<p>还有一些其它操作：<br>删除某个文件目录（如果把 <code>-r</code> 换成 <code>-rf</code> 就不会每次让你一个一个确认了）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -r 目标文件</div></pre></td></tr></table></figure>
<p>删除某个文件直接（执行删除时会提示是否要删除，输入：y 表示确认）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm 目标文件</div></pre></td></tr></table></figure>
<p>编辑文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim server.xml</div></pre></td></tr></table></figure>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="jdk版本切换"><a href="#jdk版本切换" class="headerlink" title="jdk版本切换"></a>jdk版本切换</h3><p>JDK的安装目录(版本号根据情况略有不同)</p>
<blockquote>
<p>JDK 1.6：/Library/Java/JavaVirtualMachines/1.6.0.jdk<br>JDK 1.7：/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk<br>JDK 1.8：/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk</p>
</blockquote>
<p>打开 <code>~/.bash_profile</code> 文件（zsh 打开<code>~/.zshrc</code> ），添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 设置 JDK 6</span></div><div class="line">export JAVA_6_HOME=`/usr/libexec/java_home -v 1.6` </div><div class="line"><span class="meta">#</span><span class="bash"> 设置 JDK 7 </span></div><div class="line">export JAVA_7_HOME=`/usr/libexec/java_home -v 1.7` </div><div class="line"><span class="meta">#</span><span class="bash"> 设置 JDK 8 </span></div><div class="line">export JAVA_8_HOME=`/usr/libexec/java_home -v 1.8`</div><div class="line"><span class="meta"> #</span><span class="bash">默认JDK 7 </span></div><div class="line">export JAVA_HOME=$JAVA_7_HOME </div><div class="line"><span class="meta">#</span><span class="bash"><span class="built_in">alias</span>命令动态切换JDK版本 </span></div><div class="line">alias jdk6="export JAVA_HOME=$JAVA_6_HOME” </div><div class="line">alias jdk7="export JAVA_HOME=$JAVA_7_HOME” </div><div class="line">alias jdk8="export JAVA_HOME=$JAVA_8_HOME"</div></pre></td></tr></table></figure>
<h3 id="tomcat报错解决"><a href="#tomcat报错解决" class="headerlink" title="tomcat报错解决"></a>tomcat报错解决</h3><p>启动失败，在 <code>catalina.2017-06-28.log</code> 报如下面的错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.apache.catalina.core.StandardContext.startInternal Context [/hello] startup failed due to previous errors</div></pre></td></tr></table></figure>
<p>这个时候此应用就启动失败了，访问会出现404错误。但是日志里面也没有写具体是什么问题导致启动失败，对调试带来了一些困难，下面是解决方法：<br>在 <code>tomcat</code> 的 <code>conf/loggings.properties</code> 文件或者该应用的 <code>WEB-INF/classes</code> 目录中新建一个 <code>loggings.properties</code> 文件，再加上以下两句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">org.apache.catalina.core.ContainerBase.[Catalina].level = INFO</div><div class="line">org.apache.catalina.core.ContainerBase.[Catalina].handlers = </div><div class="line">java.util.logging.ConsoleHandler</div></pre></td></tr></table></figure>
<p>之后重启 <code>tomcat</code>，这样应用再启动失败后就可以在 <code>tomcat</code> 的 <code>logs/catalina.out</code> 或者 <code>logs/localhost_yyyy_mm_dd</code> 日志文件中找到更加详细的错误信息。</p>
<h3 id="ssh链接错误"><a href="#ssh链接错误" class="headerlink" title="ssh链接错误"></a>ssh链接错误</h3><p>在链接ssh时报如下错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Permanently added (RSA) to the list of known hosts</div></pre></td></tr></table></figure>
<p>解决给 <code>known_hosts</code> 添加权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 600 ~/.ssh/known_hosts</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://blog.csdn.net/yangxueyong/article/details/6130065" target="_blank" rel="external">Tomcat部署Web应用方法总结</a><br><a href="http://www.jianshu.com/p/3d0fb3476a26" target="_blank" rel="external">Tomcat系列之服务器的安装与配置以及各组件详解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;tomcat&quot;&gt;&lt;a href=&quot;#tomcat&quot; class=&quot;headerlink&quot; title=&quot;tomcat&quot;&gt;&lt;/a&gt;tomcat&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://tomcat.apache.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;br&gt;将 &lt;code&gt;tomcat&lt;/code&gt; 文件夹复制到 &lt;code&gt;/Library&lt;/code&gt; 目录下,然后修改权限&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo chmod 755 /Library/tomcat&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;添加环境变量&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;export PATH=$PATH:/Users/yourname/Library/tomcat/bin&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;验证tomcat是否安装成功&lt;br&gt;执行 &lt;code&gt;startup.sh&lt;/code&gt; 命令启动 &lt;code&gt;tomcat&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;startup.sh&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="tomcat" scheme="http://yoursite.com/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号支付</title>
    <link href="http://yoursite.com/java/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E6%94%AF%E4%BB%98/"/>
    <id>http://yoursite.com/java/微信公众号支付/</id>
    <published>2017-06-15T04:31:34.000Z</published>
    <updated>2017-07-28T01:25:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信公众号支付"><a href="#微信公众号支付" class="headerlink" title="微信公众号支付"></a>微信公众号支付</h1><h2 id="开发配置"><a href="#开发配置" class="headerlink" title="开发配置"></a>开发配置</h2><p>首先申请公众号的支付功能，在微信公众平台打开 <strong>微信支付</strong> 的开发配置，配置 <strong>支付授权目录</strong> （即调用支付接口的地址，以”/“结尾）。<br>注：公众平台微信支付公众号支付授权目录、扫码支付回调URL配置入口将在8月1日迁移至商户平台（pay.weixin.qq.com）</p>
<p>js接口安全域名和网络授权域名，都要设置好。<br><a id="more"></a><br>登陆商户平台 设置 <strong>API秘钥</strong> ，一定要记下来，这个和 <code>AppSecret</code> 一样的不能查看。证书的话退款等操作才需要，现在不需要先不下载。</p>
<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p>首先在微信公众平台技术文档看到微信JS-SDK说明文档中有微信支付接口。<br>发起一个微信支付请求</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">wx.chooseWXPay(&#123;</div><div class="line">    <span class="attr">timestamp</span>: <span class="number">0</span>, <span class="comment">// 支付签名时间戳，注意微信jssdk中的所有使用timestamp字段均为小写。但最新版的支付后台生成签名使用的timeStamp字段名需大写其中的S字符</span></div><div class="line">    nonceStr: <span class="string">''</span>, <span class="comment">// 支付签名随机串，不长于 32 位</span></div><div class="line">    package: <span class="string">''</span>, <span class="comment">// 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=***）</span></div><div class="line">    signType: <span class="string">''</span>, <span class="comment">// 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'</span></div><div class="line">    paySign: <span class="string">''</span>, <span class="comment">// 支付签名</span></div><div class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="comment">// 支付成功后的回调函数</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>备注：prepay_id 通过微信支付统一下单接口拿到，paySign 采用统一的微信支付 Sign 签名生成方法，注意这里 appId 也要参与签名，appId 与 config 中传入的 appId 一致，即最后参与签名的参数有appId, timeStamp, nonceStr, package, signType。</p>
</blockquote>
<p>同时还有微信支付开发文档：<a href="https://pay.weixin.qq.com/wiki/doc/api/index.html" target="_blank" rel="external">https://pay.weixin.qq.com/wiki/doc/api/index.html</a><br>查看公众号支付可以看到</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBridgeReady</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   WeixinJSBridge.invoke(</div><div class="line">       <span class="string">'getBrandWCPayRequest'</span>, &#123;</div><div class="line">           <span class="string">"appId"</span>:<span class="string">"wx2421b1c4370ec43b"</span>,     <span class="comment">//公众号名称，由商户传入     </span></div><div class="line">           <span class="string">"timeStamp"</span>:<span class="string">"1395712654"</span>,         <span class="comment">//时间戳，自1970年以来的秒数     </span></div><div class="line">           <span class="string">"nonceStr"</span>:<span class="string">"e61463f8efa94090b1f366cccfbbb444"</span>, <span class="comment">//随机串     </span></div><div class="line">           <span class="string">"package"</span>:<span class="string">"prepay_id=u802345jgfjsdfgsdg888"</span>,     </div><div class="line">           <span class="string">"signType"</span>:<span class="string">"MD5"</span>,         <span class="comment">//微信签名方式：     </span></div><div class="line">           <span class="string">"paySign"</span>:<span class="string">"70EA570631E4BB79628FBCA90534C63FF7FADD89"</span> <span class="comment">//微信签名 </span></div><div class="line">       &#125;,</div><div class="line">       <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;     </div><div class="line">           <span class="keyword">if</span>(res.err_msg == <span class="string">"get_brand_wcpay_request:ok"</span> ) &#123;&#125;     <span class="comment">// 使用以上方式判断前端返回,微信团队郑重提示：res.err_msg将在用户支付成功后返回    ok，但并不保证它绝对可靠。 </span></div><div class="line">       &#125;</div><div class="line">   ); </div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> WeixinJSBridge == <span class="string">"undefined"</span>)&#123;</div><div class="line">   <span class="keyword">if</span>( <span class="built_in">document</span>.addEventListener )&#123;</div><div class="line">       <span class="built_in">document</span>.addEventListener(<span class="string">'WeixinJSBridgeReady'</span>, onBridgeReady, <span class="literal">false</span>);</div><div class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent)&#123;</div><div class="line">       <span class="built_in">document</span>.attachEvent(<span class="string">'WeixinJSBridgeReady'</span>, onBridgeReady); </div><div class="line">       <span class="built_in">document</span>.attachEvent(<span class="string">'onWeixinJSBridgeReady'</span>, onBridgeReady);</div><div class="line">   &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">   onBridgeReady();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这两个应该都可以用，我用的 <code>js-sdk</code> 的方法。</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>在微信支付开发文档下载SDK与DEMO，我是用的java开发，所以下载的java版，查看 <strong>readme</strong> 文件，可以看到SDK的使用方法：安装 使用maven<br>配置类 <strong>Config</strong> 需要 <strong>appiId（公众号id）</strong> ， <strong>mchId（商户号）</strong> 和 <strong>apiKey（API秘钥）</strong> ，证书可以先注释掉。</p>
<p>根据readme中的统一下单来demo获取预支付交易会话标识 <strong>prepay_id</strong><br>需要的参数有</p>
<ul>
<li>body  商品描述 <a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=4_2" target="_blank" rel="external">参数规定</a></li>
<li>detail 商品详情 对于使用单品优惠的商户，改字段必须按照规范上传，<a href="https://pay.weixin.qq.com/wiki/doc/api/danpin.php?chapter=9_102&amp;index=2" target="_blank" rel="external">单品优惠参数说明</a></li>
<li>total_fee 订单总金额 单位为分，详见<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=4_2" target="_blank" rel="external">支付金额</a></li>
<li>fee_type 标价币种 符合ISO 4217标准的三位字母代码，默认人民币：CNY <a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=4_2" target="_blank" rel="external">货币类型详细列表</a></li>
<li>out_trade<em>no  商户订单号 要求32个字符内，只能是数字、大小写字母</em>-|*@ ，且在同一个商户号下唯一</li>
<li>device_info  设备号 非必输，公众号内支付可以传”WEB”</li>
<li>spbill_create_ip  终端IP APP和网页支付提交用户端ip, <code>request.getRemoteAddr()</code> 获取</li>
<li>notify_url 通知地址 异步接收微信支付结果通知的回调地址，通知url必须为外网可访问的url，不能携带参数。</li>
<li>trade_type  交易类型 JSAPI(微信公众号)</li>
<li>openid   用户标识 trade_type=JSAPI时（即公众号支付），此参数必传，此参数为微信用户在商户对应appid下的唯一标识</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 支付</div><div class="line">* </div><div class="line">* <span class="doctag">@param</span> request</div><div class="line">* <span class="doctag">@param</span> response</div><div class="line">* <span class="doctag">@return</span></div><div class="line">* <span class="doctag">@throws</span> Exception</div><div class="line">*/</div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/pay"</span>, method = RequestMethod.POST)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">wechatPay</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">   Map&lt;String, Object&gt; ret = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">   Gson gson = <span class="keyword">new</span> Gson();</div><div class="line"></div><div class="line">   <span class="comment">// 获取用户信息</span></div><div class="line">   Customer customer = getLoginUserInfo(request);</div><div class="line"></div><div class="line">   WeChatPayConfig config = WeChatPayConfig.getInstance();</div><div class="line">   WXPay wxpay = <span class="keyword">new</span> WXPay(config);</div><div class="line"></div><div class="line">   HashMap&lt;String, String&gt; data = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">   data.put(<span class="string">"body"</span>, <span class="string">"测试-充值"</span>);</div><div class="line">   data.put(<span class="string">"detail"</span>, <span class="string">""</span>);</div><div class="line">   data.put(<span class="string">"out_trade_no"</span>, getTradeNo(customer.getPhone()));</div><div class="line">   data.put(<span class="string">"device_info"</span>, <span class="string">""</span>);</div><div class="line">   data.put(<span class="string">"fee_type"</span>, <span class="string">"CNY"</span>);</div><div class="line">   data.put(<span class="string">"total_fee"</span>, getFinalMoney(request.getParameter(<span class="string">"money"</span>)));</div><div class="line">   data.put(<span class="string">"spbill_create_ip"</span>, request.getRemoteAddr());</div><div class="line">   data.put(<span class="string">"notify_url"</span>, getRequestPath(request) + <span class="string">"/wxPay/wechat_notify"</span>);</div><div class="line">   data.put(<span class="string">"trade_type"</span>, <span class="string">"JSAPI"</span>);</div><div class="line">   data.put(<span class="string">"openid"</span>, customer.getOpenid());</div><div class="line"></div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">       Map&lt;String, String&gt; result = wxpay.unifiedOrder(data);</div><div class="line">       String prepay_id = result.get(<span class="string">"prepay_id"</span>);</div><div class="line">       Map&lt;String, String&gt; paySignMap = getPaySign(prepay_id, request);</div><div class="line">       ret.put(<span class="string">"items"</span>, paySignMap);</div><div class="line">       ret.put(<span class="string">"success"</span>, <span class="keyword">true</span>);</div><div class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">       logger.error(<span class="string">"wechat/pay Exception e:["</span> + e.getMessage().toString() + <span class="string">"]"</span>);</div><div class="line">       ret.put(<span class="string">"success"</span>, <span class="keyword">false</span>);</div><div class="line">       ret.put(<span class="string">"message"</span>, e.getMessage().toString());</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> gson.toJson(ret);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>WeChatPayConfig 配置文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.github.wxpay.sdk.WXPayConfig;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChatPayConfig</span> <span class="keyword">implements</span> <span class="title">WXPayConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] certData;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WeChatPayConfig PAYCONFIG;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeChatPayConfig</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// String certPath = "/path/apiclient_cert.p12";</span></div><div class="line">        <span class="comment">// File file = new File(certPath);</span></div><div class="line">        <span class="comment">// InputStream certStream = new FileInputStream(file);</span></div><div class="line">        <span class="comment">// this.certData = new byte[(int) file.length()];</span></div><div class="line">        <span class="comment">// certStream.read(this.certData);</span></div><div class="line">        <span class="comment">// certStream.close();</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WeChatPayConfig <span class="title">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (PAYCONFIG == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (WeChatPayConfig.class) &#123;</div><div class="line">                <span class="keyword">if</span> (PAYCONFIG == <span class="keyword">null</span>) &#123;</div><div class="line">                    PAYCONFIG = <span class="keyword">new</span> WeChatPayConfig();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> PAYCONFIG;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAppID</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> WeChatConstant.WECHAT_APP_ID;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMchID</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> WeChatConstant.WECHAT_MCH_ID;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> WeChatConstant.WECHAT_API_KEY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getCertStream</span><span class="params">()</span> </span>&#123;</div><div class="line">        ByteArrayInputStream certBis = <span class="keyword">new</span> ByteArrayInputStream(<span class="keyword">this</span>.certData);</div><div class="line">        <span class="keyword">return</span> certBis;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHttpConnectTimeoutMs</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">8000</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHttpReadTimeoutMs</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">10000</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其它</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 验证签名</div><div class="line">* </div><div class="line">* <span class="doctag">@param</span> prepay_id</div><div class="line">* <span class="doctag">@param</span> request</div><div class="line">* <span class="doctag">@return</span></div><div class="line">* <span class="doctag">@throws</span> Exception</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getPaySign</span><span class="params">(String prepay_id, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  Map&lt;String, String&gt; paySignaram = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">  String timestamp = WeixinUtils.create_timestamp();</div><div class="line">  String nonce_str = WeixinUtils.create_nonce_str();</div><div class="line">    </div><div class="line">  paySignaram.put(<span class="string">"appId"</span>, WeChatConstant.WECHAT_APP_ID);</div><div class="line">  paySignaram.put(<span class="string">"timeStamp"</span>, timestamp);</div><div class="line">  paySignaram.put(<span class="string">"nonceStr"</span>, nonce_str);</div><div class="line">  paySignaram.put(<span class="string">"package"</span>, <span class="string">"prepay_id="</span> + prepay_id);</div><div class="line">  paySignaram.put(<span class="string">"signType"</span>, <span class="string">"MD5"</span>);</div><div class="line">    </div><div class="line">  String sign = WXPayUtil.generateSignature(paySignaram, WeChatConstant.WECHAT_API_KEY);</div><div class="line">  paySignaram.put(<span class="string">"paySign"</span>, sign);</div><div class="line">    </div><div class="line"><span class="keyword">return</span> paySignaram;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 金额转化为分为单位</div><div class="line">* </div><div class="line">* <span class="doctag">@param</span> money</div><div class="line">* <span class="doctag">@return</span></div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getFinalMoney</span><span class="params">(String money)</span> </span>&#123;</div><div class="line">   <span class="keyword">float</span> sessionMoney = Float.parseFloat(money);</div><div class="line">   String finalMoney = String.format(<span class="string">"%.2f"</span>, sessionMoney);</div><div class="line">   finalMoney = finalMoney.replace(<span class="string">"."</span>, <span class="string">""</span>);</div><div class="line">   <span class="keyword">int</span> intMoney = Integer.parseInt(finalMoney);</div><div class="line">   <span class="keyword">return</span> String.valueOf(intMoney);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 订单编号</div><div class="line">* </div><div class="line">* <span class="doctag">@param</span> phone</div><div class="line">* <span class="doctag">@return</span></div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getTradeNo</span><span class="params">(String phone)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">"ceshi"</span> + phone + System.currentTimeMillis();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 获取当前目录</div><div class="line">* <span class="doctag">@param</span> request</div><div class="line">* <span class="doctag">@return</span></div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getRequestPath</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">   String realPath = request.getScheme() <span class="comment">// 当前链接使用的协议</span></div><div class="line">           + <span class="string">"://"</span> + request.getServerName()<span class="comment">// 服务器地址</span></div><div class="line">           + request.getContextPath();<span class="comment">// 项目文件名</span></div><div class="line">   <span class="keyword">return</span> realPath;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>刚开始以为 <code>paySign</code>（支付签名），是和 <code>prepay_id</code> 一同返回的，后来在仔细看，JS-SDK的文档，如下</p>
<blockquote>
<p>备注：prepay_id 通过微信支付统一下单接口拿到，paySign 采用统一的微信支付 Sign 签名生成方法，注意这里 appId 也要参与签名，appId 与 config 中传入的 appId 一致，即最后参与签名的参数有appId, timeStamp, nonceStr, package, signType。</p>
</blockquote>
<p><code>paySign</code> 是appId, timeStamp, nonceStr, package, signType来进行签名的，具体算法可以查看<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=4_3" target="_blank" rel="external">验证签名算法</a><br>我直接用 <code>WXPayUtil</code> 中的签名方法。</p>
<h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">ajax_action(&#123;</div><div class="line">    <span class="attr">url</span>:<span class="string">"&lt;%=basePath%&gt;/wxPay/pay"</span>,</div><div class="line">    <span class="attr">params</span>:&#123;</div><div class="line">        <span class="string">"money"</span>: payment,</div><div class="line">        <span class="string">"name"</span>: <span class="string">"$&#123;name&#125;"</span>,</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">callback</span>:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(data.success)&#123;</div><div class="line">            wxpay(data.items);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            alert(data.message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">wxpay</span>(<span class="params">data</span>) </span>&#123;             </div><div class="line">    wx.chooseWXPay(&#123;</div><div class="line">          <span class="attr">appId</span>: data.appId,</div><div class="line">          <span class="attr">timestamp</span>: data.timeStamp, <span class="comment">// 支付签名时间戳，注意微信jssdk中的所有使用timestamp字段均为小写。但最新版的支付后台生成签名使用的timeStamp字段名需大写其中的S字符</span></div><div class="line">          nonceStr: data.nonceStr, <span class="comment">// 支付签名随机串，不长于 32 位</span></div><div class="line">          package: data.package, <span class="comment">// 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=***）</span></div><div class="line">          signType: data.signType, <span class="comment">// 签名方式，默认为'MD5'</span></div><div class="line">          paySign: data.paySign, <span class="comment">// 支付签名</span></div><div class="line">          success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">              <span class="keyword">if</span>(res.errMsg == <span class="string">"chooseWXPay:ok"</span> ) &#123;</div><div class="line">                  alert(<span class="string">"支付成功"</span>);</div><div class="line">              &#125;<span class="keyword">else</span>&#123;</div><div class="line">                  alert(res.errMsg);</div><div class="line">              &#125;</div><div class="line">          &#125;,</div><div class="line">          <span class="attr">cancel</span>:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">              alert(<span class="string">"取消支付"</span>);</div><div class="line">          &#125;</div><div class="line">      &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>文档中没有 <code>appId</code>，但是验证签名时有用到 <code>appId</code> ，所以把它加上可，不知道不加能不能调通。</p>
<p>回调地址，查看文档<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_7" target="_blank" rel="external">支付结果通知</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 微信支付回调页面</div><div class="line">* </div><div class="line">* <span class="doctag">@Title</span>: wechatPayNotify</div><div class="line">* <span class="doctag">@return</span> void</div><div class="line">* <span class="doctag">@throws</span> Exception</div><div class="line">*/</div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/wechat_notify"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wechatPayNotify</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">   InputStream inStream = request.getInputStream();</div><div class="line">   ByteArrayOutputStream outSteam = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">   <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">   <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">   <span class="keyword">while</span> ((len = inStream.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">       outSteam.write(buffer, <span class="number">0</span>, len);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   outSteam.close();</div><div class="line">   inStream.close();</div><div class="line">   String result = <span class="keyword">new</span> String(outSteam.toByteArray(), <span class="string">"utf-8"</span>);</div><div class="line"></div><div class="line">   WeChatPayConfig config = WeChatPayConfig.getInstance();</div><div class="line">   WXPay wxpay = <span class="keyword">new</span> WXPay(config);</div><div class="line"></div><div class="line">   Map&lt;String, String&gt; map = wxpay.processResponseXml(result);</div><div class="line"></div><div class="line">   String return_code = map.get(<span class="string">"return_code"</span>);</div><div class="line">   String result_code = map.get(<span class="string">"result_code"</span>);</div><div class="line">   String returnXml = <span class="string">""</span>;</div><div class="line">   <span class="keyword">if</span> (return_code.equals(<span class="string">"SUCCESS"</span>)) &#123;</div><div class="line">        <span class="keyword">if</span> (result_code.equals(<span class="string">"SUCCESS"</span>)) &#123;</div><div class="line">            String out_trade_no = map.get(<span class="string">"out_trade_no"</span>);</div><div class="line">            <span class="comment">// 此处就是你的逻辑代码</span></div><div class="line">            logger.info(<span class="string">"~~~~~~~~~~~付款成功~~~~~~~~~"</span>);</div><div class="line">            logger.info(<span class="string">"微信支付回调：订单="</span> + out_trade_no);</div><div class="line">            returnXml = setXML(<span class="string">"SUCCESS"</span>, <span class="string">"OK"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            logger.info(<span class="string">"~~~~~~~~~~~支付失败~~~~~~~~~"</span>);</div><div class="line">            returnXml = setXML(<span class="string">"FAIL"</span>, <span class="string">"业务失败"</span>);</div><div class="line">        &#125;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       logger.info(<span class="string">"~~~~~~~~~~~支付失败~~~~~~~~~"</span>);</div><div class="line">       returnXml = setXML(<span class="string">"FAIL"</span>, map.get(<span class="string">"return_msg"</span>));</div><div class="line">   &#125;</div><div class="line">   response.getWriter().write(returnXml);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">* 生成返回xml</div><div class="line">* </div><div class="line">* <span class="doctag">@param</span> return_code</div><div class="line">* <span class="doctag">@param</span> return_msg</div><div class="line">* <span class="doctag">@return</span></div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">setXML</span><span class="params">(String return_code, String return_msg)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">"&lt;xml&gt;&lt;return_code&gt;&lt;![CDATA["</span> + return_code + <span class="string">"]]&gt;&lt;/return_code&gt;&lt;return_msg&gt;&lt;![CDATA["</span> + return_msg</div><div class="line">           + <span class="string">"]]&gt;&lt;/return_msg&gt;&lt;/xml&gt;"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样的通知可能会多次发送给商户系统。商户系统必须能够正确处理重复的通知。需要返回正确的参数（xml文件）</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>支付结果返回：<code>invalid total_fee</code>  这是微信支付提交的金额是不能带小数点的。</li>
<li>签名失败，可能是签名的键值大小写错误，如 <code>timeStamp</code> 签名时S大小，<code>wx.chooseWXPay</code> 时为小写。</li>
<li>业务处理，js返回的支付结果并不可靠，所以我们需要在回调结果中处理，没找到demo，所以我直接在获取临时订单 <code>prepay_id</code> 时，把订单存入数据库，在回调函数中更改订单状态，并进行业务处理。</li>
<li>回调结果多次，返回的xml错误，刚开始是使用 <code>BufferedOutputStream</code> 返回的，一直有问题，如下，不知道为什么。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BufferedOutputStream out = <span class="keyword">new</span> BufferedOutputStream(response.getOutputStream());  </div><div class="line">out.write(resXml.getBytes());  </div><div class="line">out.flush();  </div><div class="line">out.close();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;微信公众号支付&quot;&gt;&lt;a href=&quot;#微信公众号支付&quot; class=&quot;headerlink&quot; title=&quot;微信公众号支付&quot;&gt;&lt;/a&gt;微信公众号支付&lt;/h1&gt;&lt;h2 id=&quot;开发配置&quot;&gt;&lt;a href=&quot;#开发配置&quot; class=&quot;headerlink&quot; title=&quot;开发配置&quot;&gt;&lt;/a&gt;开发配置&lt;/h2&gt;&lt;p&gt;首先申请公众号的支付功能，在微信公众平台打开 &lt;strong&gt;微信支付&lt;/strong&gt; 的开发配置，配置 &lt;strong&gt;支付授权目录&lt;/strong&gt; （即调用支付接口的地址，以”/“结尾）。&lt;br&gt;注：公众平台微信支付公众号支付授权目录、扫码支付回调URL配置入口将在8月1日迁移至商户平台（pay.weixin.qq.com）&lt;/p&gt;
&lt;p&gt;js接口安全域名和网络授权域名，都要设置好。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="微信" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="支付" scheme="http://yoursite.com/tags/%E6%94%AF%E4%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>Spring+Mybatis 多个数据源</title>
    <link href="http://yoursite.com/java/Spring+Mybatis%20%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
    <id>http://yoursite.com/java/Spring+Mybatis 多个数据源/</id>
    <published>2017-06-09T08:31:34.000Z</published>
    <updated>2017-07-28T01:25:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Mybatis-多个数据源"><a href="#Spring-Mybatis-多个数据源" class="headerlink" title="Spring+Mybatis 多个数据源"></a>Spring+Mybatis 多个数据源</h1><p>一般我们都会一个项目只用一个 <code>DB</code>，但是也有特殊情况，可能会使用到多个 <code>DB</code>。下面是 <code>Spring MVC + Mybatis</code> 下的多数据源配置。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="继承AbstractRoutingDataSource"><a href="#继承AbstractRoutingDataSource" class="headerlink" title="继承AbstractRoutingDataSource"></a>继承AbstractRoutingDataSource</h3><p><code>AbstractRoutingDataSource</code> 是spring提供的一个多数据源抽象类。spring会在使用事务的地方来调用此类的 <code>determineCurrentLookupKey()</code> 方法来获取数据源的key值。我们继承此抽象类并实现此方法：<br><a id="more"></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</div><div class="line"><span class="comment">/**</span></div><div class="line">* 实现spring多路由配置</div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Logger <span class="title">getParentLogger</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> DataSourceContextHolder.getDataSource();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建数据库切换类"><a href="#创建数据库切换类" class="headerlink" title="创建数据库切换类"></a>创建数据库切换类</h3><p><code>MultipleDataSource</code> 类中通过 <code>DataSourceContextHolder.getDataSource()</code> 获取数据源的key值。此方法应该和线程绑定。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 数据库切换工具类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceContextHolder</span> </span>&#123;</div><div class="line">    <span class="comment">// 数据源名称线程池</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; contextHolder = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置数据源</div><div class="line">     * <span class="doctag">@param</span> datasource 数据源名称</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(String datasource)</span> </span>&#123;</div><div class="line">     contextHolder.set(datasource);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取数据源</div><div class="line">     * <span class="doctag">@return</span> 数据源名称</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> contextHolder.get();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 清空数据源</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">     contextHolder.remove();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建数据库常量类"><a href="#创建数据库常量类" class="headerlink" title="创建数据库常量类"></a>创建数据库常量类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceType</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB1 = <span class="string">"dataSource1"</span>; <span class="comment">//数据源1</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB2 = <span class="string">"dataSource2"</span>; <span class="comment">//数据源2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="配置数据库属性文件-dbcp-properties"><a href="#配置数据库属性文件-dbcp-properties" class="headerlink" title="配置数据库属性文件 dbcp.properties"></a>配置数据库属性文件 dbcp.properties</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">initialSize=20</div><div class="line">maxActive=200</div><div class="line">maxIdle=20</div><div class="line">minIdle=1</div><div class="line">maxWait=20000</div><div class="line"></div><div class="line">data1.driver=com.mysql.jdbc.Driver</div><div class="line">data1.url=jdbc:mysql://localhsot:3306/test</div><div class="line">data1.username=admin</div><div class="line">data1.password=123456</div><div class="line"></div><div class="line">data2.driver=com.mysql.jdbc.Driver</div><div class="line">data2.url=jdbc:mysql://localhsot:3307/test</div><div class="line">data2.username=admin</div><div class="line">data2.password=123456</div></pre></td></tr></table></figure>
<h3 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h3><p>重点 <code>multipleDataSource</code>，事务采用拦截器方式，并支持 <code>@Transcational</code> 注解方式</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 数据源1：dataSource1--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource1"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></div><div class="line">     <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;data1.driver&#125;"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;data1.url&#125;"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;data1.username&#125;"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;data1.password&#125;"</span> /&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 初始化连接大小 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;initialSize&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 连接池最大数量 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 连接池最大空闲 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 连接池最小空闲 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;minIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 获取连接最大等待时间 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxWait&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 数据源2：dataSource2--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource2"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></div><div class="line">     <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;data2.driver&#125;"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;data2.url&#125;"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;data2.username&#125;"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;data2.password&#125;"</span> /&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 初始化连接大小 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;initialSize&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 连接池最大数量 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 连接池最大空闲 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 连接池最小空闲 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;minIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 获取连接最大等待时间 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxWait&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 多数据源bean创建 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipleDataSource"</span> <span class="attr">class</span>=<span class="string">"com.utils.MultipleDataSource"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>多数据源路由<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetDataSources"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">map</span> <span class="attr">key-type</span>=<span class="string">"java.lang.String"</span>&gt;</span></div><div class="line">           <span class="comment">&lt;!-- 指定lookupKey和与之对应的数据源 --&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"dataSource1"</span> <span class="attr">value-ref</span>=<span class="string">"dataSource1"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"dataSource2"</span> <span class="attr">value-ref</span>=<span class="string">"dataSource2"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 这里可以指定默认的数据源 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultTargetDataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"multipleDataSource"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:com/mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!--basePackage指定要扫描的包，在此包之下的映射器都会被搜索到。 可指定多个包，包与包之间用逗号或分号分隔 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.mapper"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 事务管理 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"multipleDataSource"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--声明式事务配置--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!--需要扫描的包--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="调用示例"><a href="#调用示例" class="headerlink" title="调用示例"></a>调用示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">TestMapper testMapper;</div><div class="line">public List&lt;Test&gt; queryTest(String id) throws Exception &#123;</div><div class="line">   DataSourceContextHolder.setDataSource(DataSourceType.DB1); //设置数据源</div><div class="line">   return testMapper.queryInvestorsById(id);</div><div class="line">   DataSourceContextHolder.clearDataSource(); //查询完清除DB类型</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><h3 id="自定义数据源注解类"><a href="#自定义数据源注解类" class="headerlink" title="自定义数据源注解类"></a>自定义数据源注解类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 数据源注解类</div><div class="line"> */</div><div class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DataSource &#123;</div><div class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="定义一个数据源切面类"><a href="#定义一个数据源切面类" class="headerlink" title="定义一个数据源切面类"></a>定义一个数据源切面类</h3><p>指定注解以后，我们可以通过AOP拦截所有service方法，在方法执行之前获取方法上的注解：即数据源的key值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Order</span>(<span class="number">1</span>) <span class="comment">//请注意：这里order一定要小于tx:annotation-driven的order，即先执行DataSourceAspect切面，再执行事务切面，才能获取到最终的数据源</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceAspect</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 切入点 service包及子孙包下的所有类</div><div class="line">     */</div><div class="line">    	<span class="meta">@Pointcut</span>(<span class="string">"execution(* com.service.*.*(..))"</span>)  </div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aspect</span><span class="params">()</span> </span>&#123;</div><div class="line">     &#125; </div><div class="line">	</div><div class="line">     <span class="meta">@Before</span>(<span class="string">"aspect()"</span>)</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint point)</span> </span>&#123;</div><div class="line">        Class&lt;?&gt; target = point.getTarget().getClass();</div><div class="line">        MethodSignature signature = (MethodSignature) point.getSignature();</div><div class="line">        Method method = signature.getMethod() ;</div><div class="line">        DataSource dataSource = <span class="keyword">null</span> ;</div><div class="line">        <span class="comment">//从类初始化</span></div><div class="line">        dataSource = <span class="keyword">this</span>.getDataSource(target, method) ;</div><div class="line">        <span class="comment">//从接口初始化</span></div><div class="line">        <span class="keyword">if</span>(dataSource == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">for</span> (Class&lt;?&gt; clazz : target.getInterfaces()) &#123;</div><div class="line">                dataSource = getDataSource(clazz, method);</div><div class="line">                <span class="keyword">if</span>(dataSource != <span class="keyword">null</span>)&#123;</div><div class="line">                    <span class="keyword">break</span> ;<span class="comment">//从某个接口中一旦发现注解，不再循环</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(dataSource != <span class="keyword">null</span> &amp;&amp; !StringUtils.isEmpty(dataSource.value()) )&#123;</div><div class="line">            DataSourceContextHolder.setDataSource(dataSource.value());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@After</span>(<span class="string">"aspect()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint point)</span> </span>&#123;</div><div class="line">        <span class="comment">//使用完记得清空</span></div><div class="line">        DataSourceContextHolder.clearDataSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取方法或类的注解对象DataSource</div><div class="line">     * <span class="doctag">@param</span> target      类class</div><div class="line">     * <span class="doctag">@param</span> method    方法</div><div class="line">     * <span class="doctag">@return</span> DataSource</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">(Class&lt;?&gt; target, Method method)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//优先方法注解</span></div><div class="line">            Class&lt;?&gt;[] types = method.getParameterTypes();</div><div class="line">            Method m = target.getMethod(method.getName(), types);</div><div class="line">            <span class="keyword">if</span> (m != <span class="keyword">null</span> &amp;&amp; m.isAnnotationPresent(DataSource.class)) &#123;</div><div class="line">                <span class="keyword">return</span> m.getAnnotation(DataSource.class);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//其次类注解</span></div><div class="line">            <span class="keyword">if</span> (target.isAnnotationPresent(DataSource.class)) &#123;</div><div class="line">                <span class="keyword">return</span> target.getAnnotation(DataSource.class);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            logger.error(MessageFormat.format(<span class="string">"通过注解切换数据源时发生异常[class=&#123;0&#125;,method=&#123;1&#125;]："</span></div><div class="line">                    , target.getName(), method.getName()),e)  ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AOP顺序"><a href="#AOP顺序" class="headerlink" title="AOP顺序"></a>AOP顺序</h3><p>由于我使用的注解式事务，和我们的AOP数据源切面有一个顺序的关系。数据源切换必须先执行，数据库事务才能获取到正确的数据源。所以要明确指定 注解式事务和 我们AOP数据源切面的先后顺序。</p>
<p>我们数据源切换的AOP是通过注解来实现的，只需要在AOP类上加上一个 <code>order(1)</code> 注解即可，其中1代表顺序号。</p>
<p>注解式事务的是通过xml配置启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; order=&quot;2&quot; /&gt;</div></pre></td></tr></table></figure>
<h3 id="示例Demo"><a href="#示例Demo" class="headerlink" title="示例Demo"></a>示例Demo</h3><p>在每个service方法前使用 <code>@DataSource(&quot;数据源key&quot;)</code> 注解即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">TestMapper testMapper;</div><div class="line"></div><div class="line"><span class="meta">@DataSource</span>(DataSourceType.DB1)</div><div class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>, propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Test&gt; <span class="title">queryTest</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> testMapper.queryInvestorsById(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.jianshu.com/p/fddcc1a6b2d8" target="_blank" rel="external">Spring MVC+Mybatis 多数据源配置</a><br><a href="https://blog.liyang.io/480.html" target="_blank" rel="external">Spring+Mybatis 多个数据源配置</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Mybatis-多个数据源&quot;&gt;&lt;a href=&quot;#Spring-Mybatis-多个数据源&quot; class=&quot;headerlink&quot; title=&quot;Spring+Mybatis 多个数据源&quot;&gt;&lt;/a&gt;Spring+Mybatis 多个数据源&lt;/h1&gt;&lt;p&gt;一般我们都会一个项目只用一个 &lt;code&gt;DB&lt;/code&gt;，但是也有特殊情况，可能会使用到多个 &lt;code&gt;DB&lt;/code&gt;。下面是 &lt;code&gt;Spring MVC + Mybatis&lt;/code&gt; 下的多数据源配置。&lt;/p&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;h3 id=&quot;继承AbstractRoutingDataSource&quot;&gt;&lt;a href=&quot;#继承AbstractRoutingDataSource&quot; class=&quot;headerlink&quot; title=&quot;继承AbstractRoutingDataSource&quot;&gt;&lt;/a&gt;继承AbstractRoutingDataSource&lt;/h3&gt;&lt;p&gt;&lt;code&gt;AbstractRoutingDataSource&lt;/code&gt; 是spring提供的一个多数据源抽象类。spring会在使用事务的地方来调用此类的 &lt;code&gt;determineCurrentLookupKey()&lt;/code&gt; 方法来获取数据源的key值。我们继承此抽象类并实现此方法：&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://yoursite.com/other/git/"/>
    <id>http://yoursite.com/other/git/</id>
    <published>2017-06-06T13:10:00.000Z</published>
    <updated>2017-07-11T09:38:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在 <code>Mac</code> 上安装 <code>Git</code> 有多种方式。 最简单的方法是安装 <code>Xcode Command Line Tools</code>。 <code>Mavericks （10.9</code>） 或更高版本的系统中，在 <code>Terminal</code> 里尝试首次运行 <code>git</code> 命令即可。 如果没有安装过命令行开发者工具，将会提示你安装。</p>
<p>使用图形化的 Git 安装工具,<a href="https://git-scm.com/download/mac" target="_blank" rel="external">下载地址</a></p>
<p>安装完成之后就是开始使用了，<code>git</code> 有两种使用方式 <strong>GUI</strong> 和 <strong>命令行</strong>。<br>使用 <code>GUI</code> 可以去<a href="https://git-scm.com/downloads/guis" target="_blank" rel="external">git提供的GUI</a>中选择，下面主要介绍命令行的使用方法。<br><a id="more"></a></p>
<h2 id="获取-Git-仓库"><a href="#获取-Git-仓库" class="headerlink" title="获取 Git 仓库"></a>获取 Git 仓库</h2><p>有两种取得 Git 项目仓库的方法。 第一种是在现有项目或目录下导入所有文件到 Git 中； 第二种是从一个服务器克隆一个现有的 Git 仓库。</p>
<h3 id="在现有目录中初始化仓库"><a href="#在现有目录中初始化仓库" class="headerlink" title="在现有目录中初始化仓库"></a>在现有目录中初始化仓库</h3><p>在当前目录执行 <code>git init</code><br>该命令将创建一个名为 <code>.git</code> 的子目录，这个子目录含有你初始化的 <code>Git</code> 仓库中所有的必须文件，这些文件是 <code>Git</code> 仓库的骨干。 但是，在这个时候，我们仅仅是做了一个初始化的操作，你的项目里的文件还没有被跟踪。<br>你可通过 <code>git add</code> 命令来实现对指定文件的跟踪，然后执行 <code>git commit</code> 提交：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git add -a</div><div class="line">git commit -m 'initial project version'</div></pre></td></tr></table></figure>
<p>也可以新建一个目录，将其初始化为 <code>Git</code> 代码库</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init [project-name]</div></pre></td></tr></table></figure>
<h3 id="克隆现有的仓库"><a href="#克隆现有的仓库" class="headerlink" title="克隆现有的仓库"></a>克隆现有的仓库</h3><p>当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。<br>克隆仓库的命令格式是 <code>git clone [url]</code> 。 比如，要克隆 <code>Git</code> 的可链接库 <code>libgit2</code>，可以用下面的命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/libgit2/libgit2</div></pre></td></tr></table></figure>
<p>如果想自定义本地仓库的名字可使用：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/libgit2/libgit2 mylibgit</div></pre></td></tr></table></figure>
<h2 id="文件的操作"><a href="#文件的操作" class="headerlink" title="文件的操作"></a>文件的操作</h2><h3 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h3><p>使用 <code>git status</code> 查看当前文件状态,使用 <code>git status -s</code> 命令或 <code>git status --short</code> 命令，你将得到一种更为紧凑的格式输出。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git status</div><div class="line">On branch master</div><div class="line">Initial commit</div><div class="line">nothing to commit (create/copy files and use "git add" to track)</div></pre></td></tr></table></figure>
<p>这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。 此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪状态的新文件，否则 <code>Git</code> 会在这里列出来。 最后，该命令还显示了当前所在分支，并告诉你这个分支同远程服务器上对应的分支没有偏离。 现在，分支名是 <code>master</code>,这是默认的分支名。</p>
<p>现在，让我们在项目下创建一个新的 <code>README</code> 文件。 如果之前并不存在这个文件，使用 <code>git status</code> 命令，你将看到一个新的未跟踪文件 <code>README</code>：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">echo "git" &gt;  README</div><div class="line">git status</div><div class="line">On branch master</div><div class="line">Initial commit</div><div class="line">Untracked files:</div><div class="line">  (use "git add &lt;file&gt;..." to include in what will be committed)</div><div class="line">	README</div><div class="line">nothing added to commit but untracked files present (use "git add" to track)</div></pre></td></tr></table></figure>
<p>它告诉我有一个还未追踪的文件，并提示我可以使用 <code>git add &lt;file&gt;...</code> 把它加进去。</p>
<h3 id="查看已暂存和未暂存的修改"><a href="#查看已暂存和未暂存的修改" class="headerlink" title="查看已暂存和未暂存的修改"></a>查看已暂存和未暂存的修改</h3><p>如果 <code>git status</code> 命令的输出对于你来说过于模糊，你想知道具体修改了什么地方，可以用 <code>git diff</code> 命令,<code>git diff</code> 可以看文件做了哪些变化<br>它默认跟最新的一个commit进行比较。<br>红色（前面有减号-）表示删除，绿色（前面有加号+）表示添加。</p>
<p><code>git diff --cached</code> 查看已暂存的将要添加到下次提交里的内容</p>
<p>假如现在想撤销这些更改 <code>git checkout -- .</code><br><code>git checkout -- file</code> 可以丢弃工作区的修改<br>这里有两种情况：<br>一种是自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
<h3 id="跟踪新文件"><a href="#跟踪新文件" class="headerlink" title="跟踪新文件"></a>跟踪新文件</h3><p>更新状态使用 <code>git add -A</code> 或 <code>git add .</code> （空格+ 点） 表示当前目录所有文件</p>
<p>再次使用 <code>git status</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git add README</div><div class="line">git status</div><div class="line">On branch master</div><div class="line">Initial commit</div><div class="line">Changes to be committed:</div><div class="line">  (use "git rm --cached &lt;file&gt;..." to unstage)</div><div class="line">	new file:   README</div></pre></td></tr></table></figure>
<p>状态变了 <code>README</code> 处于暂存状态,说明add成功了.<br><code>Changes to be committed</code> 说明现在可以执行 <code>commit</code> 了<br><code>git rm --cached &lt;file&gt;...</code> 将文件从 <code>stage</code> 里移出</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git rm --cached README</div><div class="line">rm 'README'</div></pre></td></tr></table></figure>
<blockquote>
<p>git reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了<br>git reset HEAD XXX/XXX/XXX.Java 就是对某个文件进行撤销了<br><strong>HEAD</strong>，表示最新的版本</p>
</blockquote>
<h3 id="提交更新"><a href="#提交更新" class="headerlink" title="提交更新"></a>提交更新</h3><p><code>git commit -m &quot;提交信息&quot;</code><br>将文件提交到 <code>repository</code> 里</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git commit -m "first commit"</div><div class="line">[master (root-commit) a74782d] first commit</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line"> create mode 100644 README</div></pre></td></tr></table></figure>
<p><code>git commit</code> 这种方式会启动文本编辑器以便输入本次提交的说明。</p>
<p>提交时记录的是放在暂存区域的快照。 任何还未暂存的仍然保持已修改状态。如果觉得这么做略显繁琐，可以直接跳过使用暂存区域。<br>只要在提交的时候，给 <code>git commit</code> 加上 <code>-a</code> 选项，<code>Git</code> 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤。</p>
<p>修改 <code>README</code> 文件，直接提交：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git commit -a -m "commit"</div><div class="line">[master 1a61fd5] commit</div><div class="line"> 1 file changed, 1 insertion(+)</div></pre></td></tr></table></figure>
<p>提交之前不再需要 <code>git add</code> <code>README</code> 文件了，但是如果是未跟踪过（新建）的文件是不能被提交的，所以不建议这样用。</p>
<p><code>git commit --amend</code> 重新提交,这个命令会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令），那么快照会保持不变，而你所修改的只是提交信息。就是代替上次提交的结果。</p>
<h3 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h3><p>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git rm README</div><div class="line">rm 'README'</div></pre></td></tr></table></figure>
<p>相当于</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rm README</div><div class="line">git add README</div></pre></td></tr></table></figure>
<p>下一次提交时，该文件就不再纳入版本管理了。 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 <code>-f</code>（译注：即 <code>force</code> 的首字母）。 这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 <code>Git</code> 恢复。</p>
<p>另外一种情况是，我们想把文件从 <code>Git</code> 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 <code>Git</code> 继续跟踪。 当你忘记添加 <code>.gitignore</code> 文件，不小心把一个很大的日志文件或一堆 .a 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用 <code>--cached</code> 选项：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm --cached README</div></pre></td></tr></table></figure>
<p>恢复文件<br>如果还未提交缓存区（没<code>add</code>）直接使用</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -- README</div></pre></td></tr></table></figure>
<p>即可恢复<br>如果已提交缓存区，需要回到最近一次 <code>git commit</code> 或 <code>git add</code> 时的状态，再恢复。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git reset HEAD</div><div class="line">git checkout -- README</div></pre></td></tr></table></figure>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p>要在 Git 中对文件改名 <code>git mv file_from file_to</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git mv README README.md</div></pre></td></tr></table></figure>
<p>相当于运行了下面三条命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mv README README.md</div><div class="line">git rm README</div><div class="line">git add README.md</div></pre></td></tr></table></figure>
<h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><p><code>git log</code> 可以看到提交的记录，会按提交时间列出所有的更新，最近的更新排在最上面。<br>常用的选项如：<br><code>git log -1</code> 最近一次的提交<br><code>git log -p -2</code> 显示最近两次提交的内容差异<br><code>git log --stat</code> <code>--stat</code> 选项在每次提交的下面列出额所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了<br><code>git log --pretty=oneline</code> 将每个提交放在一行显示，查看的提交数很大时非常有用<br><code>git log --pretty=oneline --graph</code> <code>--graph</code> 选项添加了一些 <code>ASCII</code> 字符串来形象地展示你的分支、合并历史。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git log</div><div class="line">commit a74782dd6876921c0a1fb338c4637afe722623d8</div><div class="line">Author: yourname &lt;youremail@email.com&gt;</div><div class="line">Date:   Tue Jul 4 16:29:43 2017 +0800</div><div class="line">    first commit</div></pre></td></tr></table></figure>
<p><strong>q</strong>键可以退出</p>
<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p><code>git log --pretty=oneline</code> 获取版本号的commit_id<br><code>git reset --hard commit_id</code>  取版本号前7位也可以</p>
<p><code>Git</code> 必须知道当前版本是哪个版本，在 <code>Git</code> 中，用<strong>HEAD</strong>表示当前版本，也就是最新的提交的，上一个版本就是 <code>HEAD^</code>，上上一个版本就是 <code>HEAD^^</code>，当然往上100个版本不可能写100个<code>^</code> ，应写成 <code>HEAD~100</code>。</p>
<p>如何回到最新版呢<br><code>git reflog</code> 记录你的每一次命令。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git reflog</div><div class="line">2008cf5 HEAD@&#123;2&#125;: reset: moving to HEAD</div><div class="line">a74782d HEAD@&#123;13&#125;: commit (initial): first commit</div></pre></td></tr></table></figure>
<p>第一行表示当前 <code>HEAD</code> 所在的版本号是 2008cf5 ，而之所以在这个版本号，是由于我们执行了 <code>reset</code> 命令。<br>再用一次 <code>reset</code>，将 <code>HEAD</code> 指向 a74782d<br><code>git reset --hard a74782d</code><br>回到第一次reset前的状态了</p>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建与合并"><a href="#创建与合并" class="headerlink" title="创建与合并"></a>创建与合并</h3><p>创建dev分支，然后切换到dev分支：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b dev</div></pre></td></tr></table></figure>
<p><code>git checkout</code> 命令加上-b参数表示创建并切换，相当于以下两条命令：</p>
<blockquote>
<p>git branch dev<br>git checkout dev</p>
</blockquote>
<p><code>git branch</code> 查看当前分支<br><code>git branch</code> 命令会列出所有分支，当前分支前面会标一个 * 号。</p>
<p>修改内容后提交，切换回 <code>master</code> 分支：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout master</div></pre></td></tr></table></figure>
<p>修改的内容不见了,因为那个提交是在 <code>dev</code> 分支上，而 <code>master</code> 分支此刻的提交点并没有变</p>
<p>把 <code>dev</code> 分支的工作成果合并到 <code>master</code> 分支上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge dev</div></pre></td></tr></table></figure>
<p><code>git merge</code> 命令用于合并指定分支到当前分支。合并后就可以看到，和dev分支的最新提交是完全一样的。</p>
<p>合并完成后，就可以放心地删除 <code>dev</code> 分支了(不能删除当前分支)<br><code>git branch -d dev</code></p>
<p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在 <code>master</code> 分支上工作效果是一样的，但过程更安全。</p>
<h3 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h3><p>当分支中更改的内容在 <code>master</code> 分支已经更改，合并时会发生冲突。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git merge dev</div><div class="line">Auto-merging README.md</div><div class="line">CONFLICT (content): Merge conflict in README.md</div><div class="line">Automatic merge failed; fix conflicts and then commit the result.</div></pre></td></tr></table></figure>
<p><code>git status</code> 也可以告诉我们冲突的文件<br>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存在提交。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add</div><div class="line">git commit -m   #提交</div><div class="line">git branch -d   #最后，删除分支。</div></pre></td></tr></table></figure>
<p><code>git log --graph</code> 命令可以看到分支合并图</p>
<p>合并分支时，如果可能，Git会用 <code>Fast forward</code> 模式，但这种模式下，删除分支后，会丢掉分支信息<br>强制禁用 <code>Fast forward</code> 模式，Git就会在 <code>merge</code> 时生成一个新的 <code>commit</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge --no-ff -m "merge with no-ff" dev</div></pre></td></tr></table></figure>
<p><code>--no-ff</code> 表示禁用 Fast forward<br><code>-m</code> 把 commit 描述写进去</p>
<h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3><p>开发中，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。<br>当前正在分支上进行的工作还没有提交，需要先存起来。<br>Git还提供了 <code>stash</code> 功能，可以把当前工作现场<strong>储藏</strong>起来，等以后恢复现场后继续工作。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash</div></pre></td></tr></table></figure>
<p>现在，用 <code>git status</code> 查看工作区，就是干净的。<br>然后再到 <code>master</code> 分支上创建分支，修改后和并，删除分支。</p>
<p>回到之前的分支，查看 <code>stash</code> 列表</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash list</div></pre></td></tr></table></figure>
<p>两种方法恢复,<code>git stash pop</code> 方法，自动删除 <code>stash</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash pop</div></pre></td></tr></table></figure>
<p>还有一种就是先用 <code>git stash apply</code> 恢复，再删除 <code>stash</code> 内容。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git stash apply stash@&#123;0&#125;</div><div class="line">git stash drop</div></pre></td></tr></table></figure>
<p>你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令 <code>git stash apply stash@{0}</code></p>
<p>删除分支 <code>git branch -D &lt;name&gt;</code> 强行删除</p>
<h3 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h3><p>当你从远程仓库克隆时，实际上Git自动把本地的 <code>master</code> 分支和远程的 <code>master</code> 分支对应起来了，并且，远程仓库的默认名称是 <code>origin</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git remot       #查看远程库的信息</div><div class="line">git remote -v   #显示更详细的信息 </div><div class="line">origin	https://github.com/AIxiuxiu/anna.git (fetch) #抓取地址</div><div class="line">origin	https://github.com/AIxiuxiu/anna.git (push)  #推送地址</div></pre></td></tr></table></figure>
<p>推送分支<br>master分支 </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>推送其他分支比如 <code>dev</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin dev</div></pre></td></tr></table></figure>
<p>创建分支 <code>git checkout -b newbranch</code><br>将新的分支推送到 <code>github</code>  <code>git push origin newbranch</code></p>
<p>抓取分支  <code>git checkout -b dev origin/dev</code><br>失败则需要建立本地分支和远程分支的关联</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch --set-upstream-to=origin/newbranch</div><div class="line">git pull</div></pre></td></tr></table></figure>
<p>注：多人协作的工作模式通常是这样：</p>
<blockquote>
<p>首先，可以试图用git push origin branch-name推送自己的修改；</p>
<p>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</p>
<p>如果合并有冲突，则解决冲突，并在本地提交；</p>
<p>没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！</p>
<p>如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream branch-name origin/branch-name。</p>
</blockquote>
<h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><p>打标签 <code>git tag &lt;name&gt;</code> ，默认标签是打在当前分支上最新提交的commit上的<br>历史标签，找到历史提交的 <code>commit id</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git log --pretty=oneline --abbrev-commit</div><div class="line">git tag &lt;name&gt; commit_id #提交打标签</div></pre></td></tr></table></figure>
<p>查看标签 <code>git tag</code><br>查看标签信息 <code>git show &lt;tagname&gt;</code></p>
<p>创建带有说明的标签，用-a指定标签名，-m指定说明文字</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -a &lt;标签名&gt; -m "说明文字" commit_id</div></pre></td></tr></table></figure>
<p>删除标签 <code>git tag -d &lt;tagname&gt;</code></p>
<p>推送某个标签到远程 <code>git push origin &lt;tagname&gt;</code></p>
<p>一次性推送全部尚未推送到远程的本地标签 <code>git push origin --tags</code></p>
<p>如果标签已经推送到远程，要删除远程标签就麻烦一点，</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git tag -d &lt;tagname&gt;  #先从本地删除</div><div class="line">git push origin :refs/tags/&lt;tagname&gt;  #从远程删除</div></pre></td></tr></table></figure>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><h3 id="创建-SSH-公钥"><a href="#创建-SSH-公钥" class="headerlink" title="创建 SSH 公钥"></a>创建 SSH 公钥</h3><p>使用命令创建 <code>ssh-key</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C "youremail@example.com"</div></pre></td></tr></table></figure>
<p>然后在用户主目录里找到 <code>.ssh</code> 目录，里面有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，这两个就是 <code>SSH Key</code> 的秘钥对，<code>id_rsa</code> 是私钥，不能泄露出去，<code>id_rsa.pub</code> 是公钥。<br>然后登陆 <code>GitHub</code>，打开 <code>Account settings</code>，<code>SSH Keys</code> 页面：<br>在 <code>Key</code> 文本框里粘贴 <code>id_rsa.pub</code> 文件的内容.</p>
<p>可以使用 <code>ssh -T git@github.com</code> 测试是否连接成功</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com</div><div class="line">Hi yourName! You've successfully authenticated, but GitHub does not provide shell access.</div></pre></td></tr></table></figure>
<h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><p>登陆 <code>GitHub</code>，然后，在右上角找到 <code>Create a new repository</code> 按钮<br>填写 <code>Repository name</code> 创建 <code>Create repository</code><br>新建本地仓库并关联</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">echo "# github" &gt;&gt; README.md</div><div class="line">git init</div><div class="line">git add README.md</div><div class="line">git commit -m "first commit"</div><div class="line">git remote add origin https://github.com/yourName/repositoryName.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>把一个已有的本地仓库与之关联</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/AIxiuxiu/anna.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>由于远程库是空的，我们第一次推送 <code>master</code> 分支时，加上了 <code>-u</code> 参数</p>
<p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code> 或 <code>git push</code> 推送最新修改。</p>
<h3 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h3><p>假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆<br>最好勾选 <code>Initialize this repository with a README</code>，<code>GitHub</code> 会自动为我们创建一个 <code>README.md</code> 文件，</p>
<p>之后用命令 <code>git clone</code> 克隆一个本地库</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/AIxiuxiu/anna.git</div></pre></td></tr></table></figure>
<p><code>GitHub</code> 支持 <code>HTTPS</code> 和 <code>SSH</code> 协议(建议使用 <code>SSH</code> ，快一点)</p>
<h3 id="Fork-项目"><a href="#Fork-项目" class="headerlink" title="Fork 项目"></a>Fork 项目</h3><p>首先在你要 <code>fork</code> 的项目点击 <code>fork</code> ，项目就会在你的空间中创建一个完全属于你的项目副本，但在你自己的计算机上并没有这个仓库的文件。使用 <code>clone</code> 把项目拷贝到本地。</p>
<p>通过配置 <code>Git</code> 来同步你 <code>fork</code> 的原始项目，复制原始项目的仓库 URL，命令行到本地项目目录。<br>输入 <code>git remove -v</code>，按下回车键，你将会看到你的 fork 当前配置的远程仓库：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git remote -v</div><div class="line">origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)</div><div class="line">origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</div></pre></td></tr></table></figure>
<p>输入 <code>git remote add upstream &lt;URL&gt;</code> <code>URL</code> 原项目地址。再次输入 git remote -v。你将会看到你 <code>fork</code> 的 <code>URL</code> 作为原始的地址，而原始的仓库的 <code>URL</code> 作为 <code>upstream</code>。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git</div><div class="line">git remote -v</div><div class="line">origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)</div><div class="line">origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)</div><div class="line">upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)</div><div class="line">upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)</div></pre></td></tr></table></figure>
<p>从上游仓库 <code>fetch</code> 分支和提交点，提交给本地 <code>master</code>，并会被存储在一个本地分支 <code>upstream/master</code><br>切换到本地主分支(如果不在) <code>git checkout master</code><br>把 <code>upstream/master</code> 分支合并到本地 <code>master</code> 上，这样就完成了同步，并且不会丢掉本地修改的内容。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git fetch upstream</div><div class="line">git checkout master</div><div class="line">git merge upstream/master</div></pre></td></tr></table></figure>
<p>接着就是熟悉的推送本地仓库到远程仓库</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>其他<br><code>github</code> 上最新和最酷的东西 <a href="https://github.com/explore" target="_blank" rel="external">Explore GitHub</a><br><code>github</code> 教程 <a href="https://github.com/gotgit/gotgithub" target="_blank" rel="external">gotgithub</a></p>
<h3 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h3><p>需要.gitignore文件<br>所有配置文件可以直接在线浏览：<a href="https://github.com/github/gitignore" target="_blank" rel="external">https://github.com/github/gitignore</a></p>
<p>加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了,如忽略 <code>class</code> 文件。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add App.class</div><div class="line">The following paths are ignored by one of your .gitignore files:</div><div class="line">App.class</div><div class="line">Use -f if you really want to add them.</div></pre></td></tr></table></figure>
<p>可以用-f强制添加到Git：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add -f App.class</div></pre></td></tr></table></figure>
<p>可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git check-ignore -v App.class</div><div class="line">.gitignore:3:*.class    App.class</div></pre></td></tr></table></figure>
<h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><p>只需要敲一行命令，告诉Git，以后 <code>st</code> 就表示 <code>status</code>，如：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git config --global alias.st status</div><div class="line">git config --global alias.co checkout</div><div class="line">git config --global alias.ci commit</div><div class="line">git config --global alias.br branch</div></pre></td></tr></table></figure>
<p>把暂存区的修改撤销掉（unstage）</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global alias.unstage 'reset HEAD'</div></pre></td></tr></table></figure>
<p>配置一个git last，让其显示最后一次提交信息：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global alias.last 'log -1'</div></pre></td></tr></table></figure>
<p>配置lg</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</div></pre></td></tr></table></figure>
<p>加上 <code>--global</code> 是针对当前用户起作用的,如果不加，那只针对当前的仓库起作用。</p>
<p>每个仓库的Git配置文件都放在 <code>.git/config</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">cat .git/config</div><div class="line">[core]</div><div class="line">    repositoryformatversion = 0</div><div class="line">    filemode = true</div><div class="line">    bare = false</div><div class="line">    logallrefupdates = true</div><div class="line">    ignorecase = true</div><div class="line">    precomposeunicode = true</div><div class="line">[remote "origin"]</div><div class="line">    url = git@github.com:michaelliao/learngit.git</div><div class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</div><div class="line">[branch "master"]</div><div class="line">    remote = origin</div><div class="line">    merge = refs/heads/master</div><div class="line">[alias]</div><div class="line">    last = log -1</div></pre></td></tr></table></figure>
<p>别名就在 <code>[alias]</code> 后面，要删除别名，直接把对应的行删掉即可</p>
<p>而当前用户的 <code>Git</code> 配置文件放在用户主目录下的一个隐藏文件 <code>.gitconfig</code> 中</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰Git教程</a><br><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">Git</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;Mac&lt;/code&gt; 上安装 &lt;code&gt;Git&lt;/code&gt; 有多种方式。 最简单的方法是安装 &lt;code&gt;Xcode Command Line Tools&lt;/code&gt;。 &lt;code&gt;Mavericks （10.9&lt;/code&gt;） 或更高版本的系统中，在 &lt;code&gt;Terminal&lt;/code&gt; 里尝试首次运行 &lt;code&gt;git&lt;/code&gt; 命令即可。 如果没有安装过命令行开发者工具，将会提示你安装。&lt;/p&gt;
&lt;p&gt;使用图形化的 Git 安装工具,&lt;a href=&quot;https://git-scm.com/download/mac&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装完成之后就是开始使用了，&lt;code&gt;git&lt;/code&gt; 有两种使用方式 &lt;strong&gt;GUI&lt;/strong&gt; 和 &lt;strong&gt;命令行&lt;/strong&gt;。&lt;br&gt;使用 &lt;code&gt;GUI&lt;/code&gt; 可以去&lt;a href=&quot;https://git-scm.com/downloads/guis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git提供的GUI&lt;/a&gt;中选择，下面主要介绍命令行的使用方法。&lt;br&gt;
    
    </summary>
    
      <category term="mac" scheme="http://yoursite.com/categories/mac/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>修改AppStore中的公司名称</title>
    <link href="http://yoursite.com/iOS/%E4%BF%AE%E6%94%B9AppStore%E4%B8%AD%E7%9A%84%E5%85%AC%E5%8F%B8%E5%90%8D%E7%A7%B0/"/>
    <id>http://yoursite.com/iOS/修改AppStore中的公司名称/</id>
    <published>2017-06-06T06:36:02.000Z</published>
    <updated>2017-07-28T01:25:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改AppStore中的公司名称"><a href="#修改AppStore中的公司名称" class="headerlink" title="修改AppStore中的公司名称"></a>修改AppStore中的公司名称</h1><p>公司更改了名字，所以appstore里的开发商名称需要更改，现在改好了，把过程记录一下，并不一定是最正确的方法。</p>
<h2 id="代理人-agent"><a href="#代理人-agent" class="headerlink" title="代理人(agent)"></a>代理人(agent)</h2><p>苹果客服必须确认你是<strong>苹果开发者账号代理人</strong>，才会给你修改。<br>如果你不知道这个代理人是谁，或者这个代理人已经离职，而你拥有这个开发者账号和密码，那么登陆 <code>Developer</code> 打开 <code>Membership</code> 就能看见代理人是谁。<br><a id="more"></a><br><img src="http://oimhz3xpl.bkt.clouddn.com/agent.png" alt="agent"></p>
<p>如果已经离职，你可以修改代理人信息，但是还要和代理人认证，所以直接对苹果客服声称自己就是代理人就即可。也可以添加管理员然后更换代理人。</p>
<h2 id="更改名称"><a href="#更改名称" class="headerlink" title="更改名称"></a>更改名称</h2><h3 id="联系苹果客服"><a href="#联系苹果客服" class="headerlink" title="联系苹果客服"></a>联系苹果客服</h3><p>拨打苹果开发者(中国)电话 400-670-1855 告诉客服你要更改公司名称，必须要说你是代理人。或者用代理人的邮箱直接写邮件：“我需要更改公司名称”发送到 chinadev@asia.apple.com。</p>
<p>然后客服会给你发一封邮件，邮件中包括需要你提供的信息和邓白氏的联系方式。</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">您好：</div><div class="line"></div><div class="line">感谢您对开发者计划的支持。我是XXX，很高兴为您服务。</div><div class="line"></div><div class="line">请回复此电子邮件并提供以下信息，以协助我们处理您的申请：</div><div class="line"></div><div class="line">1) 您原来组织的中英文名称是什么？</div><div class="line">2) 您原来的组织是否有应用在 App Store 上发布或处于审核状态？</div><div class="line">3) 您请求更新是否是因为您的应用或原来的组织已被收购？如果是，请回答以下问题：</div><div class="line">     • 只有应用被收购？还是组织也被收购？</div><div class="line">     • 组织被全盘收购？还是其中的某些部门被收购？</div><div class="line">     • 原来的组织仍在运营？还是已经解散？</div><div class="line">4) 您的新组织的中英文名称是什么？</div><div class="line">5) 您的新组织的地址和电话号码是什么（如果原来的地址和电话号码已更改）？</div><div class="line">6) 您的组织是否具有新的法人实体类型（例如 LLC）？</div><div class="line">7) 您的组织是否有新的“税务登记号”？如果有，请提供该编号。</div><div class="line"></div><div class="line">如果我们需要其他文件来验证此变更，我们将通知您。</div><div class="line">如果贵组织有 D-U-N-S 编号，建议您发送电子邮件至 D&amp;B，以确认您的档案处于最新状态：</div><div class="line"></div><div class="line">Dun &amp; Bradstreet 全球支持部门</div><div class="line">appdeveloper@dnb.com</div></pre></td></tr></table></figure>
<p>如果你需要更该英文名称，你需要联系邓白氏，因为一个公司只有一个邓白氏编码，为了保证，你现在的新名称公司将沿用之前的邓白氏码。</p>
<h3 id="联系邓白氏"><a href="#联系邓白氏" class="headerlink" title="联系邓白氏"></a>联系邓白氏</h3><p>发送邮件到 appdeveloper@dnb.com，邮件内容是你需要修改的信息，并且一定要备注下：“请下单到中国邓白氏”！</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">公司名称需要做一下更改：</div><div class="line">1.XXXX技术有限公司改为“xxxx有限公司”</div><div class="line">2.xxxx Technology Co., Ltd.改为"xxxx Co., Ltd.”</div><div class="line">备注：“请下单到中国邓白氏”</div></pre></td></tr></table></figure>
<p>然后会收到苹果邓白氏的回复，大概如下：</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Thank you for submitting your D-U-N-S Number request / update to D&amp;B. </div><div class="line">It should be completed by 07/05/2017, or sooner.</div><div class="line"></div><div class="line">Your request id is: 100000-100000. </div><div class="line"></div><div class="line">A D&amp;B representative may be contacting you directly.  </div><div class="line">Your cooperation will help to expedite the resolution of this request.</div><div class="line"></div><div class="line">Please contact applecs@dnb.com if you have any questions.</div></pre></td></tr></table></figure>
<p>然后差不多第二天华夏邓白氏会联系你进行公司的信息核实。</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">您好，</div><div class="line"> </div><div class="line">我们是上海华夏邓白氏，现收到您在苹果网站提交的申请，在给到编码之前我们需要核实信息，原订单有给到编码是属于XXXX技术有限公司，若您不是该公司请不要使用编码，我们核实好信息后，系统会发送正确的编码给到您，拨打座机02988993783，该订单是6/28 到期，请最晚于6/28 下午1点前回复邮件，若不能及时取得联系，该订单只能无法确认处理了，谢谢</div><div class="line"> </div><div class="line">以下是需要核实的内容</div><div class="line"> </div><div class="line">公司的注册名字 中英文</div><div class="line">公司若更过注册名字，请写出之前名字</div><div class="line">公司的实际办公地址及邮编（邮编请写详细的）  中英文</div><div class="line">公司电话（请与办公地址的城市保持一致）</div><div class="line">公司有无分公司或办事处</div><div class="line">公司有无英文缩写或简称，有请写出</div><div class="line">公司企业性质（营业执照上的公司类型）</div><div class="line">公司大致的员工人数</div><div class="line">公司主营业务(一个最主要的业务)</div><div class="line">贵公司苹果项目负责人的名字，职务，性别，联系电话</div></pre></td></tr></table></figure>
<p>回复之后等待回复，下面是华夏邓白氏回复的信息</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">稍后办理好，24小时内系统会自动发编码到苹果注册邮箱内，最晚14个工作日编码才能使用。</div><div class="line">若着急使用，可以在一周后尝试，但请注意尝试次数不要超过3次，超过次数编码会被锁住，</div><div class="line">解锁及注册方面问题请找苹果客服，电话：4006701855</div><div class="line">注：包含邓白氏编码的邮件是由系统自动发送的，里面的信息是当时您自己在苹果网站上提交的原始信息，并不是核实好的内容。</div><div class="line">由于使用编码时需要再次填写公司信息，请和今天核实好的公司名字与地址保持一致。</div></pre></td></tr></table></figure>
<p>最后收到苹果发来的邓白氏编码，就说明已将更新完成了。</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Your D-U-N-S Number request/update submitted on 6/21/2017 with ID Number 1000000-100000 has been completed.  </div><div class="line">You may start using your number in 14 days.</div><div class="line"></div><div class="line">D-U-N-S Number: 111111111</div><div class="line"></div><div class="line">Resolution Description: Match Found via host investigation, host database updated</div><div class="line"></div><div class="line">The following information was submitted as part of your request:</div><div class="line">Business Name: xxxx co., LTD</div><div class="line">City: xx</div><div class="line">Country: xxxx</div><div class="line"></div><div class="line">Thank you for using D&amp;B's Mini Investigation Service.</div></pre></td></tr></table></figure>
<p>邮件会附带你公司之前的信息，而且说明最晚14天之后才会更新到苹果的数据库。这我也不知道如何去查询是否已更新。我是等了一个星期，然后使用 <a href="https://developer.apple.com/enroll/duns-lookup/" target="_blank" rel="external">D-U-N-S Number look up tool</a> 工具来查询的。<br>更新之后就可以给苹果客服回复了(也就是第一封邮件)，所以如果要更新邓白氏最好新联系邓白氏，然后再联系苹果客服。</p>
<p>之后苹果会让你将你公司的营业执照以及公司变更名称证明发送给他。</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">您好：</div><div class="line"></div><div class="line">我们负责跟进您对于更新帐户中所示公司名称的请求。</div><div class="line"></div><div class="line">关于您的请求，我们需要更进一步的信息。我已经开通您的上传功能。</div><div class="line">请您尝试使用以下的链接上传贵公司的营业执照以及公司变更名称证明：</div><div class="line"></div><div class="line">https://developer.apple.com/contact/file-upload/</div><div class="line"></div><div class="line">我们建议您使用 Apple 的 Safari 浏览器。请注意档案大小不可超过 5MB。</div><div class="line">我们接受以下档案类型：JPG、PNG、TIFF、以及 PDF。</div><div class="line"></div><div class="line">上传后请您回复此邮件。</div><div class="line"></div><div class="line">请使用 Safari 浏览器来上载您的文件。</div><div class="line"></div><div class="line">若您只是需要更新您的英文公司名称，请直接联系 Dun &amp; Bradstreet (D&amp;B)，并请求更新您的 D&amp;B 档案：</div><div class="line"></div><div class="line">Dun &amp; Bradstreet 全球支持部门</div><div class="line"></div><div class="line">appdeveloper@dnb.com</div><div class="line"></div><div class="line">在他们确认已更新您的英文公司名称后，请回复此电子邮件。</div><div class="line"></div><div class="line">请注意，我们最长可能需要 14 个工作日才能从 D&amp;B 收到更新后的公司名称并在我们的系统中进行更新。</div><div class="line"></div><div class="line">如果您有任何问题或需要进一步的帮助，欢迎与我们联系。</div><div class="line">我们的办公时间是北京时间周一至周五，09:00 至 17:00，电话号码是 4006 701 855。</div><div class="line">当您来电时请告知我们案例编号: 10000000000 以便我们可以快速的找到您的申请。</div></pre></td></tr></table></figure>
<p>上传证明之后一两天就会把公司名称改过来。</p>
<p>看到这好像更改英文名称只需要联系邓白氏，更改 appstore 里的中文名称才需要联系苹果开发者。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.jianshu.com/p/1d2262f69a6a" target="_blank" rel="external">如何修改AppStore中的公司名称</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;修改AppStore中的公司名称&quot;&gt;&lt;a href=&quot;#修改AppStore中的公司名称&quot; class=&quot;headerlink&quot; title=&quot;修改AppStore中的公司名称&quot;&gt;&lt;/a&gt;修改AppStore中的公司名称&lt;/h1&gt;&lt;p&gt;公司更改了名字，所以appstore里的开发商名称需要更改，现在改好了，把过程记录一下，并不一定是最正确的方法。&lt;/p&gt;
&lt;h2 id=&quot;代理人-agent&quot;&gt;&lt;a href=&quot;#代理人-agent&quot; class=&quot;headerlink&quot; title=&quot;代理人(agent)&quot;&gt;&lt;/a&gt;代理人(agent)&lt;/h2&gt;&lt;p&gt;苹果客服必须确认你是&lt;strong&gt;苹果开发者账号代理人&lt;/strong&gt;，才会给你修改。&lt;br&gt;如果你不知道这个代理人是谁，或者这个代理人已经离职，而你拥有这个开发者账号和密码，那么登陆 &lt;code&gt;Developer&lt;/code&gt; 打开 &lt;code&gt;Membership&lt;/code&gt; 就能看见代理人是谁。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="ios" scheme="http://yoursite.com/tags/ios/"/>
    
      <category term="AppStore" scheme="http://yoursite.com/tags/AppStore/"/>
    
  </entry>
  
  <entry>
    <title>nvm node版本管理</title>
    <link href="http://yoursite.com/Mac/nvm%20node%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%20/"/>
    <id>http://yoursite.com/Mac/nvm node版本管理 /</id>
    <published>2017-06-05T04:30:02.000Z</published>
    <updated>2017-07-28T01:26:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h1><p>管理 node 版本，<a href="https://github.com/creationix/nvm#install-script" target="_blank" rel="external">nvm 地址</a></p>
<p>##安装<br>使用 <code>curl</code> 方式</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>或 <code>Wget</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</div></pre></td></tr></table></figure>
<p>验证是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">command -v nvm</div></pre></td></tr></table></figure>
<p>成功返回 <code>nvm</code></p>
<p>完成后 <code>nvm</code> 就被安装在了 <code>~/.nvm</code> 下，接下来就需要配一下环境变量，使用的 <code>zsh</code> 的话，就需要在 <code>~/.zshrc</code> 这个配置文件中配置，否则在 <code>~/.profile</code> 或 <code>~/.bash_profile</code> 中配置。<br>在配置文件中添加</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NVM_DIR="$HOME/.nvm"</div><div class="line">[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh" # This loads nvm</div></pre></td></tr></table></figure>
<p>但是 <code>. &quot;$NVM_DIR/nvm.sh&quot;</code> 会拖慢终端的启动。<br>解决方案 <a href="https://github.com/creationix/nvm/issues/860" target="_blank" rel="external">issue#860</a> 使用 <code>--no-use</code> 和 手动指定默认 <code>node</code> 路径来加快执行速度<br>默认路径可以通过 <code>nvm which default</code> 获取</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export NVM_DIR="$HOME/.nvm"</div><div class="line">[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh"  --no-use</div><div class="line">export PATH=$HOME/.nvm/versions/node/v8.0.0/bin/:$PATH</div></pre></td></tr></table></figure>
<p>输入 <code>nvm</code> 可以看到如下信息</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">Node Version Manager</div><div class="line">Note: &lt;version&gt; refers to any version-like string nvm understands. This includes:</div><div class="line">  - full or partial version numbers, starting with an optional "v" (0.10, v0.1.2, v1)</div><div class="line">  - default (built-in) aliases: node, stable, unstable, iojs, system</div><div class="line">  - custom aliases you define with `nvm alias foo`</div><div class="line"></div><div class="line"> Any options that produce colorized output should respect the `--no-colors` option.</div><div class="line"></div><div class="line">Usage:</div><div class="line">  nvm --help                                Show this message</div><div class="line">  nvm --version                             Print out the latest released version of nvm</div><div class="line">  nvm install [-s] &lt;version&gt;                Download and install a &lt;version&gt;, [-s] from source. Uses .nvmrc if available</div><div class="line">    --reinstall-packages-from=&lt;version&gt;     When installing, reinstall packages installed in &lt;node|iojs|node version number&gt;</div><div class="line">    --lts                                   When installing, only select from LTS (long-term support) versions</div><div class="line">    --lts=&lt;LTS name&gt;                        When installing, only select from versions for a specific LTS line</div><div class="line">  nvm uninstall &lt;version&gt;                   Uninstall a version</div><div class="line">  nvm uninstall --lts                       Uninstall using automatic LTS (long-term support) alias `lts/*`, if available.</div><div class="line">  nvm uninstall --lts=&lt;LTS name&gt;            Uninstall using automatic alias for provided LTS line, if available.</div><div class="line">  nvm use [--silent] &lt;version&gt;              Modify PATH to use &lt;version&gt;. Uses .nvmrc if available</div><div class="line">    --lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.</div><div class="line">    --lts=&lt;LTS name&gt;                        Uses automatic alias for provided LTS line, if available.</div><div class="line">  nvm exec [--silent] &lt;version&gt; [&lt;command&gt;] Run &lt;command&gt; on &lt;version&gt;. Uses .nvmrc if available</div><div class="line">    --lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.</div><div class="line">    --lts=&lt;LTS name&gt;                        Uses automatic alias for provided LTS line, if available.</div><div class="line">  nvm run [--silent] &lt;version&gt; [&lt;args&gt;]     Run `node` on &lt;version&gt; with &lt;args&gt; as arguments. Uses .nvmrc if available</div><div class="line">    --lts                                   Uses automatic LTS (long-term support) alias `lts/*`, if available.</div><div class="line">    --lts=&lt;LTS name&gt;                        Uses automatic alias for provided LTS line, if available.</div><div class="line">  nvm current                               Display currently activated version</div><div class="line">  nvm ls                                    List installed versions</div><div class="line">  nvm ls &lt;version&gt;                          List versions matching a given &lt;version&gt;</div><div class="line">  nvm ls-remote                             List remote versions available for install</div><div class="line">    --lts                                   When listing, only show LTS (long-term support) versions</div><div class="line">  nvm ls-remote &lt;version&gt;                   List remote versions available for install, matching a given &lt;version&gt;</div><div class="line">    --lts                                   When listing, only show LTS (long-term support) versions</div><div class="line">    --lts=&lt;LTS name&gt;                        When listing, only show versions for a specific LTS line</div><div class="line">  nvm version &lt;version&gt;                     Resolve the given description to a single local version</div><div class="line">  nvm version-remote &lt;version&gt;              Resolve the given description to a single remote version</div><div class="line">    --lts                                   When listing, only select from LTS (long-term support) versions</div><div class="line">    --lts=&lt;LTS name&gt;                        When listing, only select from versions for a specific LTS line</div><div class="line">  nvm deactivate                            Undo effects of `nvm` on current shell</div><div class="line">  nvm alias [&lt;pattern&gt;]                     Show all aliases beginning with &lt;pattern&gt;</div><div class="line">  nvm alias &lt;name&gt; &lt;version&gt;                Set an alias named &lt;name&gt; pointing to &lt;version&gt;</div><div class="line">  nvm unalias &lt;name&gt;                        Deletes the alias named &lt;name&gt;</div><div class="line">  nvm reinstall-packages &lt;version&gt;          Reinstall global `npm` packages contained in &lt;version&gt; to current version</div><div class="line">  nvm unload                                Unload `nvm` from shell</div><div class="line">  nvm which [&lt;version&gt;]                     Display path to installed node version. Uses .nvmrc if available</div><div class="line">  nvm cache dir                             Display path to the cache directory for nvm</div><div class="line">  nvm cache clear                           Empty cache directory for nvm</div><div class="line"></div><div class="line">Example:</div><div class="line">  nvm install v0.10.32                  Install a specific version number</div><div class="line">  nvm use 0.10                          Use the latest available 0.10.x release</div><div class="line">  nvm run 0.10.32 app.js                Run app.js using node v0.10.32</div><div class="line">  nvm exec 0.10.32 node app.js          Run `node app.js` with the PATH pointing to node v0.10.32</div><div class="line">  nvm alias default 0.10.32             Set default node version on a shell</div><div class="line"></div><div class="line">Note:</div><div class="line">  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)</div></pre></td></tr></table></figure>
<p>可以看到 <code>nvm</code> 的全部命令<br>各项命令的详细用法及含义可参考 <a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm文档</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>查看可用的安装版本：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm ls-remote</div></pre></td></tr></table></figure>
<p>最好使用 <code>LTS</code>(Long Term Support) 版本</p>
<p>安装 <code>node</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nvm install v6.11.0</div><div class="line">nvm install node #最新版本</div></pre></td></tr></table></figure>
<p>如果您想查看已安装的版本：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm ls</div></pre></td></tr></table></figure>
<p>注：如果已经安装了 <code>node</code>，最好先删除已安装的 <code>node</code> 和全局 <code>node</code> 模块(node_modules)。<br><code>node</code> 命令在 <code>/usr/local/bin/node</code><br><code>npm</code> 命令在 <code>/usr/local/lib[lib64]/node_modules/npm</code></p>
<p><code>npm ls -g --depth=0</code> // 查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 <code>node</code> 版本重新进行全局安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm ls -g --depth=0 // 查看已经安装在全局的模块，以便删除这些全局模块后再按照不同的 node 版本重新进行全局安装</div><div class="line">sudo rm -rf /usr/local/lib/node_modules // 删除全局 node_modules 目录</div><div class="line">sudo rm /usr/local/bin/node // 删除 node</div><div class="line">cd /usr/local/bin &amp;&amp; ls -l | grep "../lib/node_modules/" | awk '&#123;print $9&#125;'| xargs rm #删除全局 node 模块注册的软链</div></pre></td></tr></table></figure>
<p>安装完成，<code>nvm</code> 会将各个版本的node安装在 <code>~/.nvm/versions/node</code> 目录下</p>
<p>看看目录下有些什么，安装的版本文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ls -a ~/.nvm/versions/node</div><div class="line">.       ..      v6.11.0</div></pre></td></tr></table></figure>
<p><code>nvm</code> 会在 <code>$PATH</code> 前面安插指定版本的目录，可以确认实际的 <code>$PATH</code> 看看：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $PATH</div></pre></td></tr></table></figure>
<p>接下来我们可以使用 <code>nvm use &lt;version&gt;</code> 切换版本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm use v6.11.0</div></pre></td></tr></table></figure>
<p>指定一个默认的 <code>node</code> 版本</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nvm alias default v6.11.0</div><div class="line">nvm current #查看当前版本</div></pre></td></tr></table></figure>
<p>设置别名 <code>nvm alias my_alias &lt;name&gt;</code>，方便选择版本</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nvm alias 6 v6.11.0</div></pre></td></tr></table></figure>
<p><code>nvm install</code> 命令经常执行失败，这时你需要到 <code>nodejs</code> 官网下载你想安装的版本，解压缩，然后复制到 <code>~/.nvm/versions/node/</code> 文件夹中，同样可以使用 <code>nvm</code> 切换。</p>
<p>使用 <code>.nvmrc</code> 文件配置项目所使用的 <code>node</code> 版本</p>
<p>如果你的默认 <code>node</code> 版本（通过 <code>nvm alias</code> 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 <code>.nvmrc</code> 文件，在文件中指定使用的 <code>node</code> 版本号</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd &lt;项目根目录&gt;  #进入项目根目录</div><div class="line">echo "v6.11.0" &gt; .nvmrc #添加 .nvmrc 文件并指定版本</div><div class="line">nvm use #无需指定版本号，会自动使用 .nvmrc 文件中配置的版本</div><div class="line">node -v #查看 node 是否切换为对应版本</div></pre></td></tr></table></figure>
<h2 id="nvm-切换镜像源"><a href="#nvm-切换镜像源" class="headerlink" title="nvm 切换镜像源"></a>nvm 切换镜像源</h2><p>根据 nvm 官方提供的帮助文档，我们可以通过以下命令进行切换</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export NVM_NODEJS_ORG_MIRROR="http://npm.taobao.org/mirrors/node"</div></pre></td></tr></table></figure>
<p><a href="http://npm.taobao.org/mirrors/node" target="_blank" rel="external">http://npm.taobao.org/mirrors/node</a> 是 <a href="https://npm.taobao.org" target="_blank" rel="external">淘宝NPM镜像</a> 提供的国内 <code>Node.js</code> 的安装镜像源。</p>
<p>但是种方式，在每次重启终端都会失效。如果并不想每次打开终端，都需要重新设置 <code>NVM_NODEJS_ORG_MIRROR</code> 环境变量。需要在终端配置文件中添加：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NVM_NODEJS_ORG_MIRROR="http://npm.taobao.org/mirrors/node"</div><div class="line">source ~/.nvm/nvm.sh</div></pre></td></tr></table></figure>
<p> Windows 系统我们可以找到 <code>nvm-windows</code> 软件的安装目录中的 <code>settings.txt</code> 文件，增加以下内容:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node_mirror=http://npm.taobao.org/mirrors/node/</div></pre></td></tr></table></figure>
<h2 id="npm-镜像"><a href="#npm-镜像" class="headerlink" title="npm 镜像"></a>npm 镜像</h2><p><code>npm</code> 默认从国外的源 <a href="https://registry.npmjs.org/" target="_blank" rel="external">https://registry.npmjs.org/</a> 获取和下载包信息，国内访问速度很不理想。</p>
<p>国内 <code>npm</code> 镜像源</p>
<p><code>cnpmjs</code> 镜像：<br>搜索地址：<a href="https://cnpmjs.org/" target="_blank" rel="external">https://cnpmjs.org/</a><br>registry: <a href="https://r.cnpmjs.org/" target="_blank" rel="external">https://r.cnpmjs.org/</a></p>
<p>淘宝 <code>npm</code> 镜像：<br>搜索地址：<a href="https://npm.taobao.org/" target="_blank" rel="external">https://npm.taobao.org/</a><br>registry: <a href="https://registry.npm.taobao.org/" target="_blank" rel="external">https://registry.npm.taobao.org/</a></p>
<p>使用方法<br>1.临时使用(不建议)</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install express --registry https://r.cnpmjs.org/</div></pre></td></tr></table></figure>
<p>2.持久使用</p>
<p>命令行修改 <code>npm</code> 配置</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm config set registry https://r.cnpmjs.org/ #配置 registry</div><div class="line">npm config get registry #验证配置是否修改成功</div></pre></td></tr></table></figure>
<p>或添加 <code>npm</code> 配置文件 <code>.npmrc</code> 编辑 <code>~/.npmrc</code> 加入下面内容</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">registry = https://r.cnpmjs.org</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://segmentfault.com/a/1190000004404505" target="_blank" rel="external">node版本管理工具nvm-Mac下安装及使用</a><br><a href="https://segmentfault.com/a/1190000007998600" target="_blank" rel="external">使用nvm安装管理多个版本的node.js(适用于Mac和Windows系统)</a><br><a href="http://riny.net/2014/cnpm/" target="_blank" rel="external">国内优秀npm镜像推荐及使用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;nvm&quot;&gt;&lt;a href=&quot;#nvm&quot; class=&quot;headerlink&quot; title=&quot;nvm&quot;&gt;&lt;/a&gt;nvm&lt;/h1&gt;&lt;p&gt;管理 node 版本，&lt;a href=&quot;https://github.com/creationix/nvm#install-script&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nvm 地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##安装&lt;br&gt;使用 &lt;code&gt;curl&lt;/code&gt; 方式&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="mac" scheme="http://yoursite.com/categories/mac/"/>
    
    
      <category term="nvm" scheme="http://yoursite.com/tags/nvm/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>cmder</title>
    <link href="http://yoursite.com/win/cmder/"/>
    <id>http://yoursite.com/win/cmder/</id>
    <published>2017-06-04T10:36:02.000Z</published>
    <updated>2017-07-28T01:26:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cmder"><a href="#cmder" class="headerlink" title="cmder"></a>cmder</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="http://cmder.net/" target="_blank" rel="external">Cmder</a>是一款Windows环境下非常简洁美观易用的 <code>cmd</code> 替代者,因为它是即压即用的存在，所以点击根目录下的 <code>Cmder.exe</code> 即可运行。<br>下载的时候，有两个版本，分别是 <code>mini</code> 与 <code>full</code> 版；唯一的差别在于有没有内建 <code>msysgit</code> 工具，这是 <code>Git for Windows</code> 的标准配备；全安装版 Cmder自带了 <code>msysgit</code>,除了 <code>git</code> 本身这个命令之外, 里面可以使用大量的 <code>linux</code> 命令；比如 <code>grep</code>, <code>curl</code>, <code>tar</code>, <code>unzip</code>, <code>ssh</code>, <code>bash</code>, <code>perl</code> 等。</p>
<a id="more"></a>
<h2 id="配置-Cmder"><a href="#配置-Cmder" class="headerlink" title="配置 Cmder"></a>配置 Cmder</h2><h3 id="启动-Cmder"><a href="#启动-Cmder" class="headerlink" title="启动 Cmder"></a>启动 Cmder</h3><p>1.把 <code>Cmder</code> 加到环境变量，把 <code>Cmder.exe</code> 存放的目录添加到系统环境变量 <code>Path</code>；加完之后, <code>Win+r</code> 一下输入 <code>cmder</code>,即可使用。<br>2.添加 <code>Cmder</code> 到右键菜单，以管理员权限打开cmder终端输入以下语句回车即可: <code>Cmder.exe /REGISTER ALL</code>。<br>3.使用<code>AutoHotKey</code>热键，在<code>ahk</code>文件中添加如下代码，则使用 <code>Alt+c</code> 来打开 <code>cmder</code>    ,但有些新增命令无法使用，如 <code>node</code> <code>npm</code> 等。</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">!c:: run, D:<span class="tag">\<span class="name">*</span></span>*<span class="tag">\<span class="name">cmder</span></span>_mini<span class="tag">\<span class="name">Cmder</span></span>.exe</div><div class="line">return</div></pre></td></tr></table></figure>
<h3 id="修改命令提示符号"><a href="#修改命令提示符号" class="headerlink" title="修改命令提示符号"></a>修改命令提示符号</h3><p><code>Cmder</code> 预设的命列列提示符号是 <code>λ</code>;如果用着不习惯，可以将这个字元改成 <code>Mac/Linux</code> 环境下常见的 <code>$</code> 符号，具体操作如下：<br>打开 <code>cmder</code> 安装目录下的 <code>\vendor\clink.lua</code> 文件，将里面的 <code>λ</code> 替换为 <code>$</code>。但在使用 <code>powerShell</code> 时需要另行设置，<br>将 <code>\vendor\profile.ps1</code> 文件中的 <code>λ</code> 替换为 <code>$</code> 。</p>
<h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><p>在设置中添加语言环境，<code>win+alt+p</code> 打开设置面板，找到 <code>Startup -&gt; Envrioment</code> 选项<br>在下面的文本框里添加一行 <code>set LANG=zh_CN.UTF-8</code>，然后重启。</p>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>背景的透明度,找到 <code>Features -&gt; Transparency</code> 选项就可调节透明度。<br><code>Features -&gt; Colors</code> 可以调节颜色，<code>schemes</code> 可以选择主题。</p>
<h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>自定义 <code>aliases</code> 打开Cmder目录下的 <code>config</code> 文件夹，里面的 <code>user-aliases</code> 文件就是我们可以配置的别名文件。像下面几个。</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">..=cd ..  //输入..返回上一级文件夹</div><div class="line">gc=git commit -m <span class="formula">$1  //git提交</span></div><div class="line">sbl="D:<span class="tag">\<span class="name">Program</span></span> Files<span class="tag">\<span class="name">Sublime</span></span> Text 3<span class="tag">\<span class="name">sublime</span></span>_text.exe" $1 -new_console:s50H  //在窗口右边50<span class="comment">%横向打开sublime</span></div></pre></td></tr></table></figure>
<p>但 <code>user-aliase</code> 中的别名只能在 <code>cmd</code> 下使用，在使用 <code>powershell</code> 时需要编辑  <code>\vendor\profile.ps1</code>  文件,如</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Set-Alias sbl "C:<span class="tag">\<span class="name">Program</span></span> Files<span class="tag">\<span class="name">Sublime</span></span> Text 3<span class="tag">\<span class="name">sublime</span></span>_text.exe"</div><div class="line"></div><div class="line">function Git-Status &#123; git status &#125;</div><div class="line">Set-Alias gs Git-Status</div></pre></td></tr></table></figure>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul>
<li>打开设置面板                                                          =&gt; Win+Alt+P </li>
<li>打开新的页签                                                          =&gt; Ctrl+T </li>
<li>关闭页签                                                                 =&gt; Ctrl+W </li>
<li>切换页签                                                                 =&gt; Ctrl+Tab </li>
<li>关闭所有页签                                                         =&gt; Alt+F4 </li>
<li>快速打开一个 CMD                                                 =&gt; Shift+Alt+1 </li>
<li>快速打开一个 PowerShell                                     =&gt; Shift+Alt+2 </li>
<li>快速打开一个 PowerShell(系统管理员权限)         =&gt; Shift+Alt+2 </li>
<li>快速切换到第 1 个页签                                         =&gt; Ctrl+1 </li>
<li>快速切换到第 n 个页签(n值无上限)                     =&gt; Ctrl+n </li>
<li>历史命令搜索                                                         =&gt; Ctr+r </li>
<li>全屏                                                                     =&gt; Alt+Enter</li>
</ul>
<h2 id="Chocolatey-软件包管理"><a href="#Chocolatey-软件包管理" class="headerlink" title="Chocolatey 软件包管理"></a>Chocolatey 软件包管理</h2><p><a href="https://chocolatey.org/packages" target="_blank" rel="external">Chocolatey</a> 是用命令行来安装应用程序的个包管理工具。</p>
<h3 id="安装-chocolatey"><a href="#安装-chocolatey" class="headerlink" title="安装 chocolatey"></a>安装 chocolatey</h3><p>使用cmd，运行如下命令即可</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@"%SystemRoot%\System32\WindowsPowerShell\v1<span class="number">.0</span>\powershell.exe<span class="string">" -NoProfile -ExecutionPolicy Bypass -Command "</span>iex ((New-Object System.Net.WebClient).DownloadString(<span class="string">'https://chocolatey.org/install.ps1'</span>))<span class="string">" &amp;&amp; SET "</span>PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin<span class="string">"</span></div></pre></td></tr></table></figure>
<h3 id="choco-安装软件"><a href="#choco-安装软件" class="headerlink" title="choco 安装软件"></a>choco 安装软件</h3><p>安装软件命令 <code>choco install softwareName</code>, 短写是 <code>cinst softwareName</code><br>可安装的应用程序，默认安装在 <code>C:\Program Files\</code>，可以参见其 <a href="https://chocolatey.org/packages" target="_blank" rel="external">Package</a> 列表</p>
<p>以下是 <code>window</code> 下开发常用的开发环境应用:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">choco <span class="keyword">install</span> autohotkey.portable    <span class="comment">#安装 AutoHotkey (Portable)</span></div><div class="line">choco <span class="keyword">install</span> nodejs.<span class="keyword">install</span>  <span class="comment">#安装 node</span></div><div class="line">choco <span class="keyword">install</span> git.<span class="keyword">install</span>     <span class="comment">#安装 git</span></div><div class="line">choco <span class="keyword">install</span> ruby            <span class="comment">#安装 ruby</span></div><div class="line">choco <span class="keyword">install</span> python          <span class="comment">#安装 python</span></div><div class="line">choco <span class="keyword">install</span> jdk8            <span class="comment">#安装 JDK8</span></div><div class="line">choco <span class="keyword">install</span> googlechrome    <span class="comment">#安装 Chrome</span></div><div class="line">choco <span class="keyword">install</span> google-chrome-x64 <span class="comment">#Google Chrome (64-bit only)</span></div><div class="line">choco <span class="keyword">install</span> firefox         <span class="comment">#安装 firefox</span></div><div class="line">choco <span class="keyword">install</span> notepadplusplus.<span class="keyword">install</span> <span class="comment">#安装 notepad++</span></div><div class="line">choco <span class="keyword">install</span> Atom                    <span class="comment">#安装 Atom</span></div><div class="line">choco <span class="keyword">install</span> SublimeText3            <span class="comment">#安装 SublimeText3</span></div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.jianshu.com/p/7a706c0a3411" target="_blank" rel="external">cmder 一个比cmd强n倍的神器</a><br><a href="https://vxhly.github.io/2017/04/08/install-cmder-on-windows/" target="_blank" rel="external">在 windows 下安装 Cmder</a><br><a href="https://chocolatey.org/packages" target="_blank" rel="external">chocolatey</a><br><a href="http://cmder.net/" target="_blank" rel="external">cmder</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;cmder&quot;&gt;&lt;a href=&quot;#cmder&quot; class=&quot;headerlink&quot; title=&quot;cmder&quot;&gt;&lt;/a&gt;cmder&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://cmder.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cmder&lt;/a&gt;是一款Windows环境下非常简洁美观易用的 &lt;code&gt;cmd&lt;/code&gt; 替代者,因为它是即压即用的存在，所以点击根目录下的 &lt;code&gt;Cmder.exe&lt;/code&gt; 即可运行。&lt;br&gt;下载的时候，有两个版本，分别是 &lt;code&gt;mini&lt;/code&gt; 与 &lt;code&gt;full&lt;/code&gt; 版；唯一的差别在于有没有内建 &lt;code&gt;msysgit&lt;/code&gt; 工具，这是 &lt;code&gt;Git for Windows&lt;/code&gt; 的标准配备；全安装版 Cmder自带了 &lt;code&gt;msysgit&lt;/code&gt;,除了 &lt;code&gt;git&lt;/code&gt; 本身这个命令之外, 里面可以使用大量的 &lt;code&gt;linux&lt;/code&gt; 命令；比如 &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;tar&lt;/code&gt;, &lt;code&gt;unzip&lt;/code&gt;, &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;perl&lt;/code&gt; 等。&lt;/p&gt;
    
    </summary>
    
      <category term="win" scheme="http://yoursite.com/categories/win/"/>
    
    
      <category term="cmder" scheme="http://yoursite.com/tags/cmder/"/>
    
  </entry>
  
  <entry>
    <title>oh-my-zsh 插件</title>
    <link href="http://yoursite.com/Mac/oh-my-zsh%20%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/Mac/oh-my-zsh 插件/</id>
    <published>2017-06-03T12:30:02.000Z</published>
    <updated>2017-07-28T01:26:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="oh-my-zsh-插件"><a href="#oh-my-zsh-插件" class="headerlink" title="oh-my-zsh 插件"></a>oh-my-zsh 插件</h1><p><code>oh-my-zsh</code> 自带很多插件，有兴趣可以看<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="external">wiki的插件介绍</a></p>
<h2 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a><a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="external">zsh-syntax-highlighting</a></h2><p>高亮 <code>zsh</code> 的关键字。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</div></pre></td></tr></table></figure>
<p>在 <code>~/.zshrc</code> 中的 <code>plugins=()</code> 处添加 <code>zsh-syntax-highlighting</code></p>
<a id="more"></a>
<h2 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a><a href="https://github.com/wting/autojump" target="_blank" rel="external">autojump</a></h2><p>目录快速跳转，它会根据你 <code>cd</code> 的历史纪录智能判断你想去到哪个目录。也可以用 <code>oh-my-zsh</code> 自带的插件 <code>z</code>。</p>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install autojump</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/joelthelion/autojump.git</div><div class="line"></div><div class="line">cd autojump #解压缩后进入目录</div><div class="line">./install.py</div></pre></td></tr></table></figure>
<p>根据提示在~/.zshrc 或 ~/.bash_profile 中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ -f /usr/local/etc/profile.d/autojump.sh ] &amp;&amp; . /usr/local/etc/profile.d/autojump.sh</div></pre></td></tr></table></figure>
<p>在 <code>~/.zshrc</code> 中的 <code>plugins=()</code> 处添加 <code>autojump</code></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>cd 目录</code> 之后，使用 <code>j 文件名</code> 就可以到文件目录</p>
<p><code>j -h</code> 查看help<br><code>jc</code> 打开子目录<br><code>jo</code> 打开目录的文件管理器<br><code>jco</code> 打开子目录的文件管理器</p>
<p><code>j --stat</code> 各个目录的权重</p>
<p><code>j -i</code> [权重] // 增加<br><code>j -d</code> [权重] // 减少</p>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git" target="_blank" rel="external">git</a></h2><p><code>oh-my-zsh</code> 默认开启的插件，提供了大量 <code>git</code> 的 <code>alias</code>。</p>
<p>提供<strong>git</strong>的 <code>aliase</code> 常用有：</p>
<table>
<thead>
<tr>
<th>Alias</th>
<th>Command</th>
</tr>
</thead>
<tbody>
<tr>
<td>gaa</td>
<td>git add -all</td>
</tr>
<tr>
<td>gst</td>
<td>git status</td>
</tr>
<tr>
<td>glola</td>
<td>git log –graph –pretty = format:’%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit –all</td>
</tr>
<tr>
<td>gd</td>
<td>git diff</td>
</tr>
<tr>
<td>gcmsg</td>
<td>git commit -m</td>
</tr>
<tr>
<td>gpoat</td>
<td>git push origin —all &amp;&amp; git push origin —tags</td>
</tr>
<tr>
<td>gl</td>
<td>git pull</td>
</tr>
</tbody>
</table>
<h2 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a><a href="https://github.com/zsh-users/zsh-autosuggestions" target="_blank" rel="external">zsh-autosuggestions</a></h2><p>这是模仿 <code>fish shell</code> 的一个插件，作用基本上就是根据历史记录即时提示。</p>
<h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git：//github.com/zsh-users/zsh-autosuggestions $ ZSH_CUSTOM / plugins / zsh-autosuggestions</div></pre></td></tr></table></figure>
<p>添加插件 <code>plugins=(zsh-autosuggestions)</code></p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>使用 <code>→按键</code> 、 <code>End</code> 或 <code>ctrl+E</code> 来完成。</p>
<p>更改颜色：<br>将 <a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/src/config.zsh" target="_blank" rel="external">配置文件</a> 放到 $ZSH_CUSTOM （/Users/user/.oh-my-zsh/custom） 文件下更改 <code>ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#39;fg=8&#39;</code> 颜色为iTerm的偏好设置（写颜色或数字0-15）。<br>或者直接更改 <strong>Black Bright</strong> 的颜色。<br><img src="http://oimhz3xpl.bkt.clouddn.com/屏幕快照 2017-06-28 下午5.37.32.png" alt="color"></p>
<h2 id="icdiff"><a href="#icdiff" class="headerlink" title="icdiff"></a><a href="https://github.com/jeffkaufman/icdiff" target="_blank" rel="external">icdiff</a></h2><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install icdiff</div></pre></td></tr></table></figure>
<h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><p>比较两个文件的差异 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">icdiff &lt;file_1&gt; &lt;file_2&gt;</div></pre></td></tr></table></figure>
<p>git 用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git difftool --extcmd icdiff</div></pre></td></tr></table></figure>
<p>精简用法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git icdiff</div></pre></td></tr></table></figure>
<p>如果你想直接git diff的时候直接用icdiff取代</p>
<p>在 <code>/usr/local/bin/</code> 创建脚本 <code>ext-diff</code> 添加内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">icdiff $2 $5</div></pre></td></tr></table></figure>
<p>给脚本权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x ext-diff</div></pre></td></tr></table></figure>
<p>在git配置文件 <code>~/.gitconfig</code> 中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[diff]</div><div class="line">    external = /usr/local/bin/ext-diff</div></pre></td></tr></table></figure>
<p>更新 <code>source ~/.gitconfig</code></p>
<p>这样就替换git默认的diff，但不建议这样使用。</p>
<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UnicodeDecodeError: <span class="string">'ascii'</span> codec can<span class="string">'t decode byte 0xc3 in position 32: ordinal not in range(128)</span></div></pre></td></tr></table></figure>
<p>根据 <a href="https://github.com/jeffkaufman/icdiff/issues/36" target="_blank" rel="external">issues36</a> 可知，需要使用<strong>Python3</strong>，更改 <code>/usr/local/Cellar/icdiff/1.9.0/bin/icdiff</code> 文件的 <code>#!/usr/bin/env python</code> 为 <code>#!/usr/bin/env python3</code>。（已经安装python3）。</p>
<h2 id="extract"><a href="#extract" class="headerlink" title="extract"></a><a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/extract" target="_blank" rel="external">extract</a></h2><p>功能强大的解压插件，所有类型的文件解压一个命令x全搞定，再也不需要去记tar后面到底是哪几个参数了。</p>
<p>直接添加插件 <code>plugins=(extract)</code></p>
<h2 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h2><p>该插件可以使用命令行打开sublime。<br>常用命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">st          # 直接打开sublime</div><div class="line">st file_a   # 用sublime打开文件 file</div><div class="line">st dir_a    # 用sublime打开目录 dir</div><div class="line">stt         # 在sublime打开当前目录，相当于 st .</div></pre></td></tr></table></figure>
<p>直接添加插件 <code>plugins=(sublime)</code></p>
<h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p>它的作用就是连按两下 Esc 键在命令的开头加上或去掉 sudo 关键字。</p>
<p>直接添加插件 <code>plugins=(sudo)</code></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://wulfric.me/2015/08/zsh/" target="_blank" rel="external">一些命令行效率工具</a><br><a href="http://blog.yxjxx.com/2016/01/22/Most-useful-oh-my-zsh-plugins.html" target="_blank" rel="external">我常用的 oh-my-zsh 插件</a><br><a href="https://github.com/jeffkaufman/icdiff/issues/14" target="_blank" rel="external">issues14</a><br><a href="https://github.com/jeffkaufman/icdiff/issues/36" target="_blank" rel="external">issues36</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;oh-my-zsh-插件&quot;&gt;&lt;a href=&quot;#oh-my-zsh-插件&quot; class=&quot;headerlink&quot; title=&quot;oh-my-zsh 插件&quot;&gt;&lt;/a&gt;oh-my-zsh 插件&lt;/h1&gt;&lt;p&gt;&lt;code&gt;oh-my-zsh&lt;/code&gt; 自带很多插件，有兴趣可以看&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wiki的插件介绍&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;zsh-syntax-highlighting&quot;&gt;&lt;a href=&quot;#zsh-syntax-highlighting&quot; class=&quot;headerlink&quot; title=&quot;zsh-syntax-highlighting&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/zsh-users/zsh-syntax-highlighting&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;zsh-syntax-highlighting&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;高亮 &lt;code&gt;zsh&lt;/code&gt; 的关键字。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&amp;#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&amp;#125;/plugins/zsh-syntax-highlighting&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;~/.zshrc&lt;/code&gt; 中的 &lt;code&gt;plugins=()&lt;/code&gt; 处添加 &lt;code&gt;zsh-syntax-highlighting&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mac" scheme="http://yoursite.com/categories/mac/"/>
    
    
      <category term="zsh" scheme="http://yoursite.com/tags/zsh/"/>
    
      <category term="plugin" scheme="http://yoursite.com/tags/plugin/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2 + oh my zsh</title>
    <link href="http://yoursite.com/Mac/iTerm2%20zsh/"/>
    <id>http://yoursite.com/Mac/iTerm2 zsh/</id>
    <published>2017-06-02T10:36:02.000Z</published>
    <updated>2017-07-07T02:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iTerm2-oh-my-zsh"><a href="#iTerm2-oh-my-zsh" class="headerlink" title="iTerm2 + oh my zsh"></a>iTerm2 + oh my zsh</h1><h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h2><p>iTerm2 下载地址 <a href="http://www.iterm2.com" target="_blank" rel="external">http://www.iterm2.com</a></p>
<h3 id="偏好设置"><a href="#偏好设置" class="headerlink" title="偏好设置"></a>偏好设置</h3><ol>
<li>打开热键 <code>Preferences - Keys</code>，勾选 <code>Hotkey</code> 中的 <code>Show/hide iTerm2 with a system-wide hotkey</code>，然后设定一个热键。如 <code>Command + .</code>，然后按 <code>Command + .</code> 就可以随时调出或者隐藏 <code>iTerm2</code> 了。</li>
<li>颜色主题 <code>Preferences - Profiles - Colors</code> 右下角 <code>Color Presets</code> 选择主题。或从 <a href="http://iterm2colorschemes.com/" target="_blank" rel="external">iTerm Themes</a> 网站中下载第三方主题包，选择主题下的 <code>import</code> 操作，把下载的主题导入。<a id="more"></a></li>
<li>终端灰蒙蒙 <code>Preferences - Profiles - Text - Text Rendering</code>，将 Draw bold text in bright colors 前面的勾去掉。</li>
<li>复用上个会话的目录 <code>Preferences - Profiles - Working Directory</code> 勾选 Reuse previous session’s directory。</li>
</ol>
<h3 id="Solarized主题"><a href="#Solarized主题" class="headerlink" title="Solarized主题"></a>Solarized主题</h3><p>更改配色方案为 <a href="http://ethanschoonover.com/solarized" target="_blank" rel="external">Solarized</a><br>直接去主页下载或者使用 Git</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/altercation/solarized.git</div></pre></td></tr></table></figure>
<p>然后双击 <code>solarized/iterm2-colors-solarized/</code> 双击里面的文件，或 <code>import</code> 导入，然后再偏好设置中选择相应的主题。<br>也有terminal的配色 <code>solarized/osx-terminal.app-colors-solarized</code> 双击，然后再偏好设置中更改默认主题。</p>
<h3 id="Vim主题配置"><a href="#Vim主题配置" class="headerlink" title="Vim主题配置"></a>Vim主题配置</h3><p>将 <code>solarized/vim-colors-solarized/colors</code> 中的 <code>solarized.vim</code> 文件复制到 <code>~/.vim/colors</code> 目录下。定修改 <code>.vimrc</code> 文件。命令如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> cd solarized/vim-colors-solarized/colors</div><div class="line"><span class="meta">$</span> mkdir -p ~/.vim/colors</div><div class="line"><span class="meta">$</span> cp solarized.vim ~/.vim/colors/</div><div class="line"><span class="meta">$</span> vi ~/.vimrc</div><div class="line"></div><div class="line">syntax enable</div><div class="line">set background=dark</div><div class="line">colorscheme solarized</div></pre></td></tr></table></figure>
<h3 id="item2启动慢"><a href="#item2启动慢" class="headerlink" title="item2启动慢"></a>item2启动慢</h3><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>oh-my-zsh加载的插件太多</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vi ~/.zshrc</div><div class="line">plugins=(git autojump zsh-syntax-highlighting)</div></pre></td></tr></table></figure>
<h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>清理系统日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm /private/var/log/asl/*.asl</div></pre></td></tr></table></figure>
<p>打开 item2 时使用 <code>/usr/bin/login</code> 命令使用户登录 <code>login</code> 命令需要读取 <code>asl</code> 文件，当 <code>asl</code> 文件很大时就会拖慢启动速度。所以也可以不让 <code>login</code> 命令显示上次登录时间：<br>打开 <code>iTerm2</code> 的偏好设置里，在 <code>Profiles - General - Command</code> 里选择为 <code>Command</code>，然后里边写入  <code>/usr/bin/login -pfq xxx</code> 其中 <code>xxx</code> 是你的用户名。</p>
<h4 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h4><p><code>. &quot;$NVM_DIR/nvm.sh&quot;</code> 会拖慢了终端的启动。<br>解决方案 <a href="https://github.com/creationix/nvm/issues/860" target="_blank" rel="external">issue#860</a> 使用 <code>--no-use</code> 和 手动指定默认 <code>node</code> 路径来加快执行速度<br>默认路径可以通过 <code>nvm which default</code> 获取</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export NVM_DIR="$HOME/.nvm"</div><div class="line">[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; . "$NVM_DIR/nvm.sh"  --no-use</div><div class="line">export PATH=$HOME/.nvm/versions/node/v8.0.0/bin/:$PATH</div></pre></td></tr></table></figure>
<h3 id="iTerm2快捷键"><a href="#iTerm2快捷键" class="headerlink" title="iTerm2快捷键"></a>iTerm2快捷键</h3><p>标签</p>
<ul>
<li>新建标签：command + t</li>
<li>关闭标签：command + w</li>
<li>切换标签：command + 数字 / command + 左右方向键</li>
</ul>
<p>分屏</p>
<ul>
<li>垂直分屏：command + d</li>
<li>水平分屏：command + shift + d</li>
<li><p>屏幕</p>
</li>
<li><p>切换全屏：command + enter</p>
</li>
<li>清屏1：command + r</li>
<li>清屏2：ctrl + l</li>
<li>查找：command + f</li>
<li>查看历史命令：command + ;</li>
<li>查看剪贴板历史：command + shift + h</li>
<li>搜索命令历史：ctrl + r</li>
</ul>
<p>文本编辑</p>
<ul>
<li>交换光标处文本：ctrl + t</li>
<li>前进后退：ctrl + f/b (相当于左右方向键)</li>
<li>到行首：ctrl + a</li>
<li>到行尾：ctrl + e</li>
<li>删除当前光标的字符：ctrl + d</li>
<li>删除光标之前的字符：ctrl + h</li>
<li>删除到文本末尾：ctrl + k（光标后）</li>
<li>删除到文本开始：ctrl + u（光标前）</li>
<li>删除光标之前的单词：ctrl + w</li>
</ul>
<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><p>Mac系统自带了 <code>zsh</code>,但不是最新版本的 <code>zsh</code>，使用 <code>zsh --version</code> 查看版本号，需要使用 <strong>5.x</strong> 版本，如果不是可以用 <code>brew install</code> 安装最新的 5.x。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew install zsh</div><div class="line">sudo rm /bin/zsh    # 替换系统自带 zsh</div><div class="line">sudo ln -s `brew --prefix zsh`/bin/zsh /bin/zsh</div><div class="line">chsh -s /bin/zsh  # 切换系统当前用户的默认 shell 为 zsh</div></pre></td></tr></table></figure>
<p>安装完毕，<code>Command + W</code> 关闭 <code>iTerm2</code> 当前窗口，然后按 <code>Command + .</code> 重新打开，此时 <code>shell</code> 已经换成 <code>zsh</code> 了。<br>切换到 <code>bash</code> 系统</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh -s /bin/bash</div></pre></td></tr></table></figure>
<h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><p><code>oh-my-zsh</code> 是一套十分强大的 <code>zsh</code> 配置方案。具有自动补全参数和自定义配置功能。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>curl</code> 方式</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</div></pre></td></tr></table></figure>
<p><code>wget</code> 方式</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c "$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)"</div></pre></td></tr></table></figure>
<h3 id="配置-zshrc"><a href="#配置-zshrc" class="headerlink" title="配置 zshrc"></a>配置 zshrc</h3><p>修改 .zshrc(~/.zshrc) 文件</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ZSH_THEME="agnoster"           # 使用 agnoster 主题，颜值高</div><div class="line">DEFAULT_USER="你的用户名"       # 增加这一项，可以隐藏掉路径前面那串用户名</div><div class="line">plugins=(git autojump zsh-autosuggestions)    # 自己按需把要用的 plugin 写上</div></pre></td></tr></table></figure>
<p><code>.oh-my-zsh/themes</code> 文件中是所有的主题文件，可任意挑选，Oh My Zsh提供的所有主题<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="external">在线预览</a>。</p>
<p>修改完后，刷新配置文件，然后重新启动 <code>iTerm</code> 主题就有了。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.zshrc</div></pre></td></tr></table></figure>
<p>会有乱码问题，这时还需要安装一个Mac的字体库 <a href="https://github.com/powerline/fonts" target="_blank" rel="external">Powerline-patched font</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> clone</div><div class="line">git clone https://github.com/powerline/fonts.git</div><div class="line"><span class="meta">#</span> install</div><div class="line">cd fonts</div><div class="line">./install.sh</div><div class="line"><span class="meta">#</span> clean-up a bit</div><div class="line">cd ..</div><div class="line">rm -rf fonts</div></pre></td></tr></table></figure>
<p>安装完成之后，在偏好设置中把 <code>Anti-aliased Font</code> 和 <code>Non-ASCII Font</code> 都改为 <code>powerline</code> 的字体。</p>
<p>或者直接安装 <code>Menlo</code> 字体补丁<br>下载并安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/abertsch/Menlo-for-Powerline.git</div></pre></td></tr></table></figure>
<p><code>Profiles / Text</code>，把 <code>Anti-aliased Font</code> 和 <code>Non-ASCII Font</code> 都换成 <code>Menlo</code>。</p>
<p>如果使用 <code>MacVim</code> 选择相应的字体添加配置到 <code>.vimrc</code>: </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set guifont=Menlo\ for\ Powerline</div></pre></td></tr></table></figure>
<h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><p>如更新 <code>cocoapods</code> 时  输入  <code>pod update --verbose --no-repo-update</code><br>可使用命令别名来简化命令行的输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias pod_update=&apos;pod update --verbose --no-repo-update&apos;</div></pre></td></tr></table></figure>
<p>可以使用alias命令来显示所有命令别名<br>永久添加，添加到.zshrc中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">alias zshconfig=&quot;vim ~/.zshrc&quot;</div><div class="line">alias tree=&quot;find . -print | sed -e &apos;s;[^/]*/;|____;g;s;____|; |;g’&quot;</div><div class="line">alias pod_update=&apos;pod update --verbose --no-repo-update&apos;</div><div class="line">alias pod_install=&apos;pod install --verbose --no-repo-update&apos;</div></pre></td></tr></table></figure>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h4 id="补全"><a href="#补全" class="headerlink" title="补全"></a>补全</h4><p><code>zsh</code> 的命令补全功能非常强大，可以补齐路径，补齐命令，补齐参数等。<br>按下 <code>tab</code> 键显示出所有待选项后，再按一次 tab 键即进入选择模式，进入选择模式后，按 <code>tab</code> 切向下一个选项，按 <code>shift+tab</code> 键切向上一个选项，<code>ctrl+f/b/n/p</code> 可以向前后左右切换，或使用 上下左右 来切换。</p>
<h4 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h4><p><code>zsh</code> 的目录跳转更为智能，你无需输入 <code>cd</code>，直接输入路径即可。<code>..</code> 表示后退一级目录，<code>../../</code> 表示后退两级，依次类推。（ <code>...</code> 的作用和 <code>../../</code> 相同）。<br>输入d，将列出当前 <code>session</code> 访问过的所有目录，再按提示的数字即可进入相应目录。</p>
<h4 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h4><p>历史记录支持受限查找。比如，输入 <code>git</code>，再按向上箭头，会搜索用过的所有 <code>git</code> 命令。</p>
<h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p><code>ls *.png</code> 查找当前目录下所有 <code>png</code> 文件，<code>ls **/*.png</code> 递归查找。</p>
<h4 id="Command-键"><a href="#Command-键" class="headerlink" title="Command 键"></a>Command 键</h4><p>按住 <code>Command</code> 键:</p>
<ul>
<li>可以拖拽选中的字符串；</li>
<li>点击 <code>url</code>：调用默认浏览器访问该网址；</li>
<li>点击文件夹：在 <code>finder</code> 中打开该文件夹；</li>
<li>点击文件：调用默认程序打开文件；</li>
<li>同时按住 <code>option</code> 键，可以以矩形选中，类似于 <code>vim</code> 中的 <code>ctrl v</code> 操作。</li>
</ul>
<h4 id="高亮当前鼠标的位置"><a href="#高亮当前鼠标的位置" class="headerlink" title="高亮当前鼠标的位置"></a>高亮当前鼠标的位置</h4><p>一个标签页中开的窗口太多，有时候会找不到当前的鼠标，<code>Command+/</code> 找到它。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.jianshu.com/p/93506ab34949" target="_blank" rel="external">iTerm2 &amp; Oh My Zsh：完爆mac终端</a><br><a href="http://www.jianshu.com/p/e45160d0ae27" target="_blank" rel="external">Iterm2+solarized+zsh+oh my zsh</a><br><a href="http://jiaolonghuang.github.io/2016/04/21/item2/" target="_blank" rel="external">item2启动慢的解决</a><br><a href="https://www.logcg.com/archives/2376.html" target="_blank" rel="external">让 iTrem 2 + zsh 启动不再等待</a><br><a href="http://wulfric.me/2015/08/zsh/" target="_blank" rel="external">一些命令行效率工具</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iTerm2-oh-my-zsh&quot;&gt;&lt;a href=&quot;#iTerm2-oh-my-zsh&quot; class=&quot;headerlink&quot; title=&quot;iTerm2 + oh my zsh&quot;&gt;&lt;/a&gt;iTerm2 + oh my zsh&lt;/h1&gt;&lt;h2 id=&quot;iTerm2&quot;&gt;&lt;a href=&quot;#iTerm2&quot; class=&quot;headerlink&quot; title=&quot;iTerm2&quot;&gt;&lt;/a&gt;iTerm2&lt;/h2&gt;&lt;p&gt;iTerm2 下载地址 &lt;a href=&quot;http://www.iterm2.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.iterm2.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;偏好设置&quot;&gt;&lt;a href=&quot;#偏好设置&quot; class=&quot;headerlink&quot; title=&quot;偏好设置&quot;&gt;&lt;/a&gt;偏好设置&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;打开热键 &lt;code&gt;Preferences - Keys&lt;/code&gt;，勾选 &lt;code&gt;Hotkey&lt;/code&gt; 中的 &lt;code&gt;Show/hide iTerm2 with a system-wide hotkey&lt;/code&gt;，然后设定一个热键。如 &lt;code&gt;Command + .&lt;/code&gt;，然后按 &lt;code&gt;Command + .&lt;/code&gt; 就可以随时调出或者隐藏 &lt;code&gt;iTerm2&lt;/code&gt; 了。&lt;/li&gt;
&lt;li&gt;颜色主题 &lt;code&gt;Preferences - Profiles - Colors&lt;/code&gt; 右下角 &lt;code&gt;Color Presets&lt;/code&gt; 选择主题。或从 &lt;a href=&quot;http://iterm2colorschemes.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iTerm Themes&lt;/a&gt; 网站中下载第三方主题包，选择主题下的 &lt;code&gt;import&lt;/code&gt; 操作，把下载的主题导入。
    
    </summary>
    
      <category term="mac" scheme="http://yoursite.com/categories/mac/"/>
    
    
      <category term="iterm" scheme="http://yoursite.com/tags/iterm/"/>
    
      <category term="zsh" scheme="http://yoursite.com/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 优化和备份</title>
    <link href="http://yoursite.com/other/Hexo%20%E4%BC%98%E5%8C%96%E5%92%8C%E5%A4%87%E4%BB%BD/"/>
    <id>http://yoursite.com/other/Hexo 优化和备份/</id>
    <published>2017-06-01T06:30:02.000Z</published>
    <updated>2017-07-03T05:37:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-优化和备份"><a href="#Hexo-优化和备份" class="headerlink" title="Hexo 优化和备份"></a>Hexo 优化和备份</h1><h2 id="gulp精简博客代码"><a href="#gulp精简博客代码" class="headerlink" title="gulp精简博客代码"></a>gulp精简博客代码</h2><p><code>Next</code> 主题在 <code>Hexo</code> 引擎解析 <code>md</code> 时生成的代码会包含大量的无用空白。这些空白会增加文档的大小,使得网站在响应上不够迅速,影响体验。<br>使用的 <code>gulp</code> 是一个前端项目构建工具,用自动化构建工具增强你的工作流程<a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp中文官网</a>。</p>
<a id="more"></a>
<h3 id="gulp简介"><a href="#gulp简介" class="headerlink" title="gulp简介"></a>gulp简介</h3><p>首先是 <code>gulp</code> 的一些简单介绍：<br>gulp是基于<strong>nodejs</strong>流的自动化构建工具，可以快速构建项目并减少频繁的I/0操作。你可以利用gulp插件完成各种自动化任务：测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装有两种方式：<br>1.全局安装<code>gulp</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g -d gulp</div></pre></td></tr></table></figure>
<p>运行 <code>gulp -v</code> ,如果正常打印版本号则安装成功。</p>
<p>2.安装到项目本地<br>先CD到你的项目根目录</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp --save-dev</div></pre></td></tr></table></figure>
<p><code>--save-dev</code> 保存 <code>gulp</code> 到项目依赖文件 <code>package.json</code> 的<code>devDependencies</code> 里面。</p>
<h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>gulp的插件列表可以参考gulp的<a href="http://gulpjs.com/plugins/" target="_blank" rel="external">插件官网</a>。</p>
<p>以下是比较常用的插件</p>
<ul>
<li>gulp-minify-css 压缩css</li>
<li>gulp-htmlmin 压缩html</li>
<li>gulp-uglify 压缩js</li>
<li>gulp-rename 重命名文件,通常压缩后的带.min后缀</li>
<li>gulp-jshint jshint,js静态检查</li>
<li>gulp-concat 合并多个文件</li>
<li>gulp-imagemin 压缩图片</li>
<li>gulp-clean 清理文件或目录</li>
<li>gulp-load-plugins 自动加载插件</li>
<li>run-sequence 控制任务执行顺序</li>
</ul>
<p>npm install [plugins-name] –save<br>上述命令安装插件的同时也会把插件作为项目依赖写入package.json文件.</p>
<h4 id="gulp-API"><a href="#gulp-API" class="headerlink" title="gulp API"></a>gulp API</h4><h5 id="gulp-src（gobs-options"><a href="#gulp-src（gobs-options" class="headerlink" title="gulp.src（gobs[, options])"></a>gulp.src（gobs[, options])</h5><blockquote>
<p>输出（Emits）符合所提供的匹配模式（glob）或者匹配模式的数组（array of globs）的文件。 将返回一个 <a href="https://github.com/gulpjs/vinyl-fs" target="_blank" rel="external">Vinyl files</a> 的 <a href="https://nodejs.org/api/stream.html" target="_blank" rel="external">stream</a> 它可以被 <a href="https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options" target="_blank" rel="external">piped</a> 到别的插件中。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">'src/js/*.js'</span>) <span class="comment">//模糊匹配src/js文件夹下所有js文件</span></div><div class="line">  .pipe( concat(<span class="string">'app.js'</span>)) <span class="comment">//合并后的文件名</span></div><div class="line">  .pipe(gulp.dest(<span class="string">'pub/dist/js'</span>));<span class="comment">//合并后文件路径</span></div></pre></td></tr></table></figure>
<p>gulp.src通配符匹配：<br><em>.js匹配当前目录下的所有js文件,不指名扩展名则匹配所有类型
</em>/<em>.js匹配所有<strong>第一层子文件夹</strong>的js文件,第二层请用</em>/<em>/.js<br>**/</em>.js匹配<strong>所有文件夹层次</strong>下的js文件, 包括当前目录<br>?匹配文件路径中的一个字符(不会匹配路径分隔符)<br>[…]匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个.<br>!匹配任何与括号中给定的任一模式都不匹配的</p>
<p>下面以一系列例子来加深理解：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">*能匹配 a.js,x.y,abc,abc/,但不能匹配a/b.js</div><div class="line">*.*能匹配 a.js,style.css,a.b,x.y</div><div class="line">*/*/*.js能匹配 a/b/c.js,x/y/z.js,不能匹配a/b.js,a/b/c/d.js</div><div class="line">**能匹配 abc,a/b.js,a/b/c.js,x/y/z,x/y/z/a.b,能用来匹配所有的目录和文件</div><div class="line">**/*.js 能匹配 foo.js,a/foo.js,a/b/foo.js,a/b/c/foo.js</div><div class="line">a/**/z能匹配 a/z,a/b/z,a/b/c/z,a/d/g/h/j/k/z</div><div class="line">a/**b/z 能匹配 a/b/z,a/sb/z,但不能匹配a/x/sb/z,因为只有单**单独出现才能匹配多级目录</div><div class="line">?.js 能匹配 a.js,b.js,c.js</div><div class="line">a??能匹配 a.b,abc,但不能匹配ab/,因为它不会匹配路径分隔符</div><div class="line">[xyz].js只能匹配 x.js,y.js,z.js,不会匹配xy.js,xyz.js等,整个中括号只代表一个字符</div><div class="line">[^xyz].js能匹配 a.js,b.js,c.js等,不能匹配x.js,y.js,z.js</div></pre></td></tr></table></figure>
<h5 id="gulp-dest-path-options"><a href="#gulp-dest-path-options" class="headerlink" title="gulp.dest(path[, options])"></a>gulp.dest(path[, options])</h5><blockquote>
<p>能被 pipe 进来，并且将会写文件。并且重新输出（emits）所有数据，因此你可以将它 pipe 到多个文件夹。如果某文件夹不存在，将会自动创建它。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.src(&apos;./client/templates/*.jade&apos;) </div><div class="line">  .pipe(jade())</div><div class="line">  .pipe(gulp.dest(&apos;./build/templates&apos;))</div><div class="line">  .pipe(minify())</div><div class="line">  .pipe(gulp.dest(&apos;./build/minified_templates&apos;));</div></pre></td></tr></table></figure>
<p>文件被写入的路径是以所给的相对路径根据所给的目标目录计算而来。类似的，相对路径也可以根据所给的 base 来计算。</p>
<h5 id="gulp-task-name-deps-fn"><a href="#gulp-task-name-deps-fn" class="headerlink" title="gulp.task(name[, deps], fn)"></a>gulp.task(name[, deps], fn)</h5><p>定义一个使用 <a href="https://github.com/robrich/orchestrator" target="_blank" rel="external">Orchestrator</a> 实现的任务（task）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;mytask&apos;, [&apos;array&apos;, &apos;of&apos;, &apos;task&apos;, &apos;names&apos;], function() &#123;</div><div class="line">  // 做一些事</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="gulp-watch-glob-opts-tasks-或-gulp-watch-glob-opts-cb"><a href="#gulp-watch-glob-opts-tasks-或-gulp-watch-glob-opts-cb" class="headerlink" title="gulp.watch(glob [, opts], tasks) 或 gulp.watch(glob [, opts, cb])"></a>gulp.watch(glob [, opts], tasks) 或 gulp.watch(glob [, opts, cb])</h5><p>监视文件，并且可以在文件发生改动时候做一些事情。它总会返回一个 EventEmitter 来发射（emit） change 事件。</p>
<p>需要在文件变动后执行的一个或者多个通过 gulp.task() 创建的 task 的名字，</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> watcher = gulp.watch(<span class="string">'js/**/*.js'</span>, [<span class="string">'uglify'</span>,<span class="string">'reload'</span>]);</div><div class="line">watcher.on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'File '</span> + event.path + <span class="string">' was '</span> + event.type + <span class="string">', running tasks...'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>每次变动需要执行的 callback。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.watch(&apos;js/**/*.js&apos;, function(event) &#123;</div><div class="line">  console.log(&apos;File &apos; + event.path + &apos; was &apos; + event.type + &apos;, running tasks...&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="gulp优化"><a href="#gulp优化" class="headerlink" title="gulp优化"></a>gulp优化</h3><p>在<strong>hexo顶层</strong>目录运行以下代码来安装 <code>gulp</code> 和插件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev gulp gulp-clean gulp-load-plugins gulp-minify-css gulp-htmlmin gulp-imagemin gulp-uglify run-sequence</div></pre></td></tr></table></figure>
<p>在<strong>hexo顶层</strong>目录下创建 <code>gulpfile.js</code> 文件</p>
<p>内容如下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">   plugins = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>)(); <span class="comment">//自动插件引用</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> Hexo = <span class="built_in">require</span>(<span class="string">'hexo'</span>);</div><div class="line"><span class="keyword">var</span> runSequence = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 清除public文件夹</span></div><div class="line">gulp.task(<span class="string">"clean"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"public/*"</span>)</div><div class="line">    .pipe(plugins.clean());           </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 压缩css文件</span></div><div class="line">gulp.task(<span class="string">"minify-css"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">"public/**/*.css"</span>,<span class="string">"!public/**/*.min.css"</span>])</div><div class="line">    .pipe(plugins.minifyCss(&#123;<span class="attr">compatibility</span>: <span class="string">"ie8"</span>&#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));      </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 压缩js文件</span></div><div class="line">gulp.task(<span class="string">"minify-js"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src([<span class="string">"public/**/*.js"</span>,<span class="string">"!public/**/*.min.js"</span>])</div><div class="line">    .pipe(plugins.uglify())</div><div class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 压缩html文件</span></div><div class="line">gulp.task(<span class="string">"minify-html"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"public/**/*.html"</span>)</div><div class="line">    .pipe(plugins.htmlmin(&#123;</div><div class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">minifyJS</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">"./public"</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 压缩 public/images 和 /public/uploads目录内图片</span></div><div class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src([<span class="string">'./public/images/**/*.&#123;png,jpg,gif,ico&#125;'</span>,<span class="string">'./public/uploads/**/*.&#123;png,jpg,gif,ico&#125;'</span>])</div><div class="line">    .pipe(plugins.imagemin(&#123;</div><div class="line">       <span class="attr">optimizationLevel</span>: <span class="number">5</span>, <span class="comment">//类型：Number  默认：3  取值范围：0-7（优化等级）</span></div><div class="line">       progressive: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></div><div class="line">       interlaced: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></div><div class="line">       multipass: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></div><div class="line">    &#125;))</div><div class="line">    .pipe(gulp.dest(<span class="string">'./public/uploads'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 利用Hexo API 来生成博客内容， 效果和在命令行运行： hexo g 一样</span></div><div class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), &#123;&#125;);</div><div class="line">gulp.task(<span class="string">'generate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'generate'</span>, &#123;</div><div class="line">            <span class="attr">watch</span>: <span class="literal">false</span></div><div class="line">        &#125;);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> hexo.exit();</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> cb()</div><div class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        hexo.exit(err);</div><div class="line">        <span class="keyword">return</span> cb(err);</div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 利用Hexo API 来发布博客， 效果和在命令行运行： hexo d 一样</span></div><div class="line">gulp.task(<span class="string">'deploy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    hexo.init().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> hexo.call(<span class="string">'deploy'</span>, &#123;</div><div class="line">            <span class="attr">watch</span>: <span class="literal">false</span></div><div class="line">        &#125;);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> hexo.exit();</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> cb()</div><div class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        hexo.exit(err);</div><div class="line">        <span class="keyword">return</span> cb(err);</div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 用run-sequence并发执行，同时处理html，css，js，img</span></div><div class="line">gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    runSequence([<span class="string">'minify-html'</span>, <span class="string">'minify-css'</span>, <span class="string">'minify-js'</span>, <span class="string">'minify-images'</span>], cb);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆</span></div><div class="line">gulp.task(<span class="string">'build'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</div><div class="line">    runSequence(<span class="string">'clean'</span>, <span class="string">'generate'</span>, <span class="string">'minify'</span>, <span class="string">'deploy'</span>, cb)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'build'</span>]);</div></pre></td></tr></table></figure>
<p>到这里对 <code>gulp</code> 的配置就完成了，只需要每次在执行 <code>gulp</code> 就可以生成静态文件并实现发布。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp</div></pre></td></tr></table></figure>
<p>但是每次都要把 <code>public</code> 中的文件都删除，重新生成静态文件并发布会比较慢，先记下这个问题，以后解决。</p>
<h2 id="hexo备份"><a href="#hexo备份" class="headerlink" title="hexo备份"></a>hexo备份</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>新建仓库 <code>blog</code> 来存储博客原始文件，先看一下哪些文件是必须备份的：<br>像站点配置 <code>_config.yml</code>，主题 <code>theme</code>，博客文件 <code>source</code>，文章的模板 <code>caffolds</code>，安装包 <code>package.json</code>， 提交忽略配置 <code>.gitignore</code> 这些文件是需要备份的。其它可以不需要，则 <code>.gitignore</code> 如下配置(已经配置好了):</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.DS_Store</div><div class="line">Thumbs.db</div><div class="line">db.json</div><div class="line">*.log</div><div class="line">node_modules/</div><div class="line">public/</div><div class="line">.deploy*/</div></pre></td></tr></table></figure>
<p>直接在博客顶层目录使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git add -A</div><div class="line">git commit -m "first commit"</div><div class="line">git remote add origin git@github.com:yourName/blog.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>这样就把博客备份到仓库中了。<br>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行备份和发布：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m "..."</div><div class="line">git push   #备份</div><div class="line">hexo g -d  #发布</div></pre></td></tr></table></figure>
<h3 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h3><p>使用 <code>clone</code>  拷贝仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git init </div><div class="line">git clone git@github.com:yourName/blog.git</div></pre></td></tr></table></figure>
<p>在本地新拷贝的文件夹下通过以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd blog</div><div class="line">npm install #模块安装</div><div class="line">hexo s -g  #预览</div></pre></td></tr></table></figure>
<p><strong>注</strong>：这里没用 <code>hexo init</code> 初始化 此时用了 <code>hexo init</code>，则站点的配置文件 <code>_config.yml</code> 里面内容会被清空使用默认值，所以<strong>不要用 <code>hexo init</code></strong>。</p>
<p>预览<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>没有问题，就可以使用了。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp中文官网</a><br><a href="https://www.karlzhou.com/articles/compress-minify-hexo/" target="_blank" rel="external">优化Hexo博客 - 压缩 HTML、CSS、JS、IMG 等</a><br><a href="https://hexo.io/zh-cn/api/index.html" target="_blank" rel="external">hexo api</a><br><a href="https://www.zhihu.com/question/21193762" target="_blank" rel="external">知乎 CrazyMilk 和 skycrown 的回答</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-优化和备份&quot;&gt;&lt;a href=&quot;#Hexo-优化和备份&quot; class=&quot;headerlink&quot; title=&quot;Hexo 优化和备份&quot;&gt;&lt;/a&gt;Hexo 优化和备份&lt;/h1&gt;&lt;h2 id=&quot;gulp精简博客代码&quot;&gt;&lt;a href=&quot;#gulp精简博客代码&quot; class=&quot;headerlink&quot; title=&quot;gulp精简博客代码&quot;&gt;&lt;/a&gt;gulp精简博客代码&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Next&lt;/code&gt; 主题在 &lt;code&gt;Hexo&lt;/code&gt; 引擎解析 &lt;code&gt;md&lt;/code&gt; 时生成的代码会包含大量的无用空白。这些空白会增加文档的大小,使得网站在响应上不够迅速,影响体验。&lt;br&gt;使用的 &lt;code&gt;gulp&lt;/code&gt; 是一个前端项目构建工具,用自动化构建工具增强你的工作流程&lt;a href=&quot;http://www.gulpjs.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp中文官网&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 个人博客</title>
    <link href="http://yoursite.com/other/Hexo%20%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/other/Hexo 个人博客/</id>
    <published>2017-05-30T03:30:00.000Z</published>
    <updated>2017-07-04T05:15:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-个人博客"><a href="#Hexo-个人博客" class="headerlink" title="Hexo 个人博客"></a>Hexo 个人博客</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hexo是基于<strong>Node.js</strong>的静态博客框架，简单、轻量，其生成的静态网页可以托管在<strong>Github</strong>。<br>使用 <code>GitHubPages</code> + <code>Hexo</code>，一种简单高效的实现方式来搭建个人的博客。</p>
<a id="more"></a>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>去<a href="https://nodejs.org/en/download/" target="_blank" rel="external">nodejs</a>官网下载对应系统的安装包，按提示安装。</p>
<p>或 Homebrew 安装方式，此安装方式无需重启</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install node</div></pre></td></tr></table></figure>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>一般都安装了，查看是否安装 <code>git</code> 命令，没有安装会提示安装。<br>希望下载最新的可以去<a href="https://git-scm.com/download" target="_blank" rel="external">git官网下载</a></p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>使用npm安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>安装完成创建并初始化放博客的文件夹,然后定位到存储博客的目录并安装。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo init &lt;folder&gt;</div><div class="line">cd &lt;folder&gt;</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>解决 <code>Error: Cannot find module &#39;./build/Release/DTraceProviderBindings&#39;</code> 错误<br>删除node中的 <code>lib/node_modules/hexo-cli</code> 和 <code>bin/hexo</code> 重新安装</p>
<p>目前我安装所用的本地环境如下：(可以通过hexo -v查看）</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">hexo: 3.3.7</div><div class="line">hexo-cli: 1.0.3</div><div class="line">os: Darwin 16.5.0 darwin x64</div><div class="line">http_parser: 2.7.0</div><div class="line">node: 6.11.0</div><div class="line">v8: 5.1.281.102</div><div class="line">uv: 1.11.0</div><div class="line">zlib: 1.2.11</div><div class="line">ares: 1.10.1-DEV</div><div class="line">icu: 58.2</div><div class="line">modules: 48</div><div class="line">openssl: 1.0.2k</div></pre></td></tr></table></figure>
<h3 id="hexo-命令"><a href="#hexo-命令" class="headerlink" title="hexo 命令"></a>hexo 命令</h3><ul>
<li>hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</li>
<li>hexo server (hexo s) 启动本地web服务，用于博客的预览</li>
<li>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）</li>
<li>hexo new (hexo n) “postName” 新建文章</li>
<li>hexo new (hexo n) page “pageName” 新建页面</li>
<li><p>hexo clean 清除缓存文件和已生成的静态文件</p>
<p>hexo d -g #生成部署 (-g部署之前预先生成静态文件)<br>hexo s -g #生成预览</p>
</li>
</ul>
<p><strong>选项</strong></p>
<ol>
<li>hexo –safe 安全模式，在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</li>
<li>hexo –debug 调试模式，在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次。</li>
<li>hexo –silent 简洁模式，隐藏终端信息</li>
</ol>
<h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p><a href="https://hexo.io/themes/" target="_blank" rel="external">hexo 提供很多主题</a></p>
<p>这里选了一个极简的主题<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a>，也是Hexo主题中最受欢迎的一个。</p>
<h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd your-hexo-file #Hexo 站点目录</div><div class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<p>失败的话直接到<a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="external">NexT发布页面</a>下载并解压所下载的压缩包至站点的 themes 目录,需要将文件名改为next。</p>
<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>打开<strong>站点配置文件</strong> <code>_config.yml</code> ,找到 <code>theme</code> 字段，并将其值更改为<code>next</code></p>
<p>在切换主题之后、验证之前， 我们最好清除 Hexo 的缓存</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo clean</div></pre></td></tr></table></figure>
<p>启动 Hexo 本地站点，并开启调试模式（即加上 <strong>–debug</strong>），整个命令是 </p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s --debug</div></pre></td></tr></table></figure>
<p>在服务启动的过程，注意观察命令行输出是否有任何异常信息,这些信息将帮助他人更好的定位错误。<br>使用浏览器访问 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a>，检查站点是否正确运行。</p>
<h3 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h3><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">title:              #你博客的标题</div><div class="line">subtitle:           #你博客的副标题</div><div class="line">description:        #你博客的描述</div><div class="line">author:             #你的名字</div><div class="line">language: zh-Hans   #语言 中文</div><div class="line">theme: next         #安装的主题名称</div><div class="line">deploy:             #发布</div><div class="line">  type: git         #使用Git 发布</div><div class="line">  repo: https://github.com/username/username.github.io.git    #你的Github仓库</div><div class="line">  </div><div class="line">url: http://yoursite.com #你的站点地址</div><div class="line">permalink: :title/  #url结构</div></pre></td></tr></table></figure>
<h4 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h4><p>Scheme 是 NexT 为提供多种不同的外观而添加的，目前 NexT 支持三种样式他们是：</p>
<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<p>更改<strong>主题配置文件</strong> <code>scheme</code> 关键字</p>
<h4 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h4><p>第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标(<a href="http://fontawesome.io/" target="_blank" rel="external">Font Awesome</a>)。</p>
<p>菜单名称在 <code>{language}.yml</code> 文件中设置。<br>菜单项的图标，对应的字段是 <code>menu_icon</code>，而 <code>enable</code> 可用于控制是否显示图标，你可以设置成 <code>false</code> 来去掉图标。</p>
<p>添加菜单需要创建页面，如标签界面</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page tags</div></pre></td></tr></table></figure>
<p>创建完成后，在对应的目录下找到 <code>index.md</code> 文件，进行如下的修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: tags # 标签名字（可为空）</div><div class="line">date: 2017-06-29 16:28:46</div><div class="line">type: &quot;tags&quot; # 将页面的类型设置为 tags,主题将自动为这个页面显示为标签云</div><div class="line">comments: false # 如果有启用多说 或者 Disqus 评论，默认页面也会带有评论。需要关闭的话，设置为 false</div><div class="line">---</div></pre></td></tr></table></figure>
<p>type 有分类 <code>categories</code> 标签 <code>tags</code></p>
<h4 id="侧栏"><a href="#侧栏" class="headerlink" title="侧栏"></a>侧栏</h4><p><code>sidebar</code> 字段来控制侧栏的行为<br>其一是侧栏的位置 <code>sidebar.position</code></p>
<ul>
<li>left - 靠左放置</li>
<li>right - 靠右放置</li>
</ul>
<p>其二是侧栏显示的时机 <code>sidebar.display</code></p>
<ul>
<li>post - 默认行为，在文章页面（拥有目录列表）时显示</li>
<li>always - 在所有页面中都显示</li>
<li>hide - 在所有页面中都隐藏（可以手动展开）</li>
<li>remove - 完全移除</li>
</ul>
<h4 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h4><p><code>avatar</code> 设置成头像的链接地址。其中，头像的链接地址可以是完整的互联网或站点内的地址（将头像放置主题目录下的 source/images/ 配置为avatar: /images/avatar.png）</p>
<h4 id="否显示阅读全文"><a href="#否显示阅读全文" class="headerlink" title="否显示阅读全文"></a>否显示阅读全文</h4><p>将 <code>auto_excerpt</code> 的 <code>enable</code> 设置为 <code>ture</code> 则显示阅读全文</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Automatically Excerpt. Not recommend.</div><div class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</div><div class="line">auto_excerpt:</div><div class="line">  enable: ture # 设置是否显示阅读全文</div><div class="line">  length: 150</div></pre></td></tr></table></figure>
<p>或在文章中使用 <!-- more --> 手动进行截断，Hexo 提供的方式（推荐）</p>
<h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><p>NexT 使用 <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="external">Tomorrow Theme</a> 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 <code>normal</code>，<code>night</code>， <code>night blue</code>， <code>night bright</code>， <code>night eighties</code>。</p>
<p>可更改 <code>highlight_theme</code> 字段</p>
<h4 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h4><p>链接放置在 <code>social</code> 字段下，一行一个链接。其键值格式是 显示文本: 链接地址。<br>设定链接的图标，对应的字段是 <code>social_icons</code>，图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）</p>
<h4 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h4><p><code>use_motion</code>，根据您的需求设置值为 <code>true</code> 或者 <code>false</code>，NexT 默认开启动画效果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use_motion: true  # 开启动画效果</div><div class="line">use_motion: false # 关闭动画效果</div></pre></td></tr></table></figure>
<p>背景动画 <code>canvas_nest</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">canvas_nest: true //开启动画</div><div class="line">canvas_nest: false //关闭动画</div></pre></td></tr></table></figure>
<p>改变 <code>canvas</code> 动画的配置 打开 <code>layout/_scripts/vendors.swig</code> 文件，根据<a href="https://github.com/hustcc/canvas-nest.js" target="_blank" rel="external">canvas-nest.js文档</a>进行如下更改：</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="comment">% for name, internal in js_vendors %&#125;</span></div><div class="line">  &#123;<span class="comment">% set internal_script = url_for(theme.vendors._internal) + '/' + internal %&#125;</span></div><div class="line">    &#123;<span class="comment">% if name === 'canvas_nest' %&#125;</span></div><div class="line">      &lt;script type="text/javascript" color="135,218,255" opacity="0.6" count="66" src="&#123;&#123; theme.vendors[name] | default(internal_script) &#125;&#125;"&gt;&lt;/script&gt;</div><div class="line">    &#123;<span class="comment">% else %&#125;</span></div><div class="line">      &lt;script type="text/javascript" src="&#123;&#123; theme.vendors[name] | default(internal_script) &#125;&#125;"&gt;&lt;/script&gt;</div><div class="line">    &#123;<span class="comment">% endif %&#125;</span></div><div class="line">&#123;<span class="comment">% endfor %&#125;</span></div></pre></td></tr></table></figure>
<h4 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h4><p>要添加背景图片，首先将图片 <code>background.jpg</code> 放到 <code>/source/uploads/</code> 目录下，然后，在文件 <code>/css/_custom/custom.styl</code>文件中添加下面一行内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">body &#123; background:url(/uploads/background.jpg);&#125;</div></pre></td></tr></table></figure>
<p>同样可以添加其它背景，如侧栏背景 <code>sidebar</code> ，头部 <code>header</code> 等。</p>
<h4 id="腾讯公益404页面"><a href="#腾讯公益404页面" class="headerlink" title="腾讯公益404页面"></a>腾讯公益404页面</h4><p><a href="http://www.ixirong.com/404.html" target="_blank" rel="external">腾讯公益404页面</a>，寻找丢失儿童，让大家一起关注此项公益事业！</p>
<p>新建 <code>404.html</code> 页面，放到主题的 <code>source</code> 目录下，内容如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"https://qzone.qq.com/gy/404/style/404style.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/plain"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span></span></div><div class="line">          <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span></div><div class="line">          <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;<span class="undefined"></span></div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/data.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/page.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Github-Pages设置"><a href="#Github-Pages设置" class="headerlink" title="Github Pages设置"></a>Github Pages设置</h2><p>GitHub Pages 本用于介绍托管在GitHub的项目，不过由于他的空间免费稳定，常用来做搭建博客。</p>
<p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是 <code>username/username.github.io</code> ，这是特殊的命名约定。你可以通过 <code>http://username.github.io</code> 来访问你的个人主页。</p>
<p>仓库创建好就可以部署了，要部署到github，需要在<strong>站点配置文件</strong>_config.xml中作如下修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git  </div><div class="line">  repo: &lt;repository url&gt; #库（Repository）地址</div><div class="line">  branch: [branch] #分支名称默认 master</div><div class="line">  message: [message] #自定义提交信息 (默认为 Site updated: &#123;&#123; now(&apos;YYYY-MM-DD HH:mm:ss&apos;) &#125;&#125;)</div></pre></td></tr></table></figure>
<p>安装一个扩展：<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>然后在命令行中执行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>如果出现下面错误，则是因为没有设置好public key所致。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Permission denied (publickey).</div><div class="line">fatal: Could not read from remote repository.</div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div></pre></td></tr></table></figure>
<p>解决：在本机生成public key：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C "youremail@example.com"</div></pre></td></tr></table></figure>
<p>然后在用户主目录里找到<strong>.ssh</strong>目录，里面有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件。然后登陆github，在<a href="https://github.com/settings/keys" target="_blank" rel="external">SSH设置页面</a>添加上 <code>id_rsa.pub</code> 文件中的内容即可。</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="Sitemap"><a href="#Sitemap" class="headerlink" title="Sitemap"></a>Sitemap</h3><p><a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="external">Sitemap</a> 的目的是要避免搜索引擎的爬虫没有完整的收录整个网页的内容，所以提交 Sitemap 是能够补足搜索引擎的不足，进而加速网页的收录速度，达到搜寻引擎友好的目的。</p>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-sitemap --save</div></pre></td></tr></table></figure>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 里配置一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sitemap:</div><div class="line">    path: sitemap.xml</div><div class="line">    template: ./sitemap_template.xml</div></pre></td></tr></table></figure>
<p>对于国内用户还需要安装插件 <a href="https://github.com/coneycode/hexo-generator-baidu-sitemap" target="_blank" rel="external">hexo-generator-baidu-sitemap</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>
<p>添加配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">baidusitemap:</div><div class="line">  path: baidusitemap.xml</div></pre></td></tr></table></figure>
<p>完成之后就可以将 <code>sitemap</code> 文件提交谷歌和百度，提交过程可以查看<a href="https://juejin.im/post/590b451a0ce46300588c43a0" target="_blank" rel="external">sunshine小小倩</a>的文章。</p>
<h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><p>安装<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>然后在 Hexo 根目录下的 <code>_config.yml</code> 里配置一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">feed:</div><div class="line">   type: atom      #type 表示类型, 是 atom 还是 rss2.</div><div class="line">   path: atom.xml  #path 表示 Feed 路径</div><div class="line">   limit: 20       #limit 最多多少篇最近文章</div></pre></td></tr></table></figure>
<p>添加RSS链接,打开 <code>themes/next/_config.yml</code> 文件，<code>rss:</code> 部分修改为 <code>rss: /atom.xml</code>。</p>
<h3 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h3><p>添加百度/谷歌/本地 自定义站点内容搜索</p>
<p>安装 <a href="https://github.com/flashlab/hexo-generator-search" target="_blank" rel="external">hexo-generator-searchdb</a>，在站点的根目录下执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure>
<p>编辑<strong>站点配置文件</strong>，新增以下内容到任意位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div><div class="line">  format: html</div><div class="line">  limit: 10000</div></pre></td></tr></table></figure>
<p>编辑<strong>主题配置文件</strong>，启用本地搜索功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Local search</div><div class="line">local_search:</div><div class="line">  enable: true</div></pre></td></tr></table></figure>
<h2 id="博客管理"><a href="#博客管理" class="headerlink" title="博客管理"></a>博客管理</h2><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><p>可以直接把写好的文章插入到目录 <code>/_posts</code> 下面，后缀为.MD就行，在文章头部固定格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: title   #文章的标题，这个才是显示的文章标题，其实文件名不影响</div><div class="line">date: 2015-09-01 20:33:26   #用命令会自动生成，也可以自己写，所以文章时间可以改</div><div class="line">categories: categories  #文章的分类，这个可以自己定义</div><div class="line">tags: [tag]        #tag，为文章添加标签，方便搜索</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new &quot;new article&quot;</div></pre></td></tr></table></figure>
<p>文件的开头是属性，采用统一的yaml格式，用三条短横线分隔。</p>
<p>分类和标签格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">categories:</div><div class="line">- 日记</div><div class="line">tags:</div><div class="line">- Hexo</div><div class="line">- node.js</div></pre></td></tr></table></figure>
<h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><p>相当于很多博客都有的“私密文章”功能。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new draft &quot;new draft&quot;</div></pre></td></tr></table></figure>
<p>会在 <code>source/_drafts</code> 目录下生成一个 <code>new-draft.md</code> 文件。<br>但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到 <code>_drafts</code>目录之中。</p>
<p>如果你希望强行预览草稿，更改<strong>站点配置文件</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">render_drafts: true</div></pre></td></tr></table></figure>
<p>或者，如下方式启动server：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server --drafts</div></pre></td></tr></table></figure>
<p>下面这条命令可以把草稿变成文章，或者页面：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo官网</a><br><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="external">手把手教你使用Hexo + Github Pages搭建个人独立博客</a><br><a href="http://www.jianshu.com/p/35e197cb1273" target="_blank" rel="external">Hexo搭建Github-Pages博客填坑教程</a><br><a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT主题</a><br><a href="https://wizardforcel.gitbooks.io/markdown-simple-world/hexo-tutor-1.html" target="_blank" rel="external">Hexo 入门指南</a><br><a href="https://custompbwaters.github.io/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/GitHubPages%20+%20Hexo%E2%80%94%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.html" target="_blank" rel="external">GitHubPages + Hexo — 博客搭建</a><br><a href="https://juejin.im/post/590b451a0ce46300588c43a0" target="_blank" rel="external">hexo高阶教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-个人博客&quot;&gt;&lt;a href=&quot;#Hexo-个人博客&quot; class=&quot;headerlink&quot; title=&quot;Hexo 个人博客&quot;&gt;&lt;/a&gt;Hexo 个人博客&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Hexo是基于&lt;strong&gt;Node.js&lt;/strong&gt;的静态博客框架，简单、轻量，其生成的静态网页可以托管在&lt;strong&gt;Github&lt;/strong&gt;。&lt;br&gt;使用 &lt;code&gt;GitHubPages&lt;/code&gt; + &lt;code&gt;Hexo&lt;/code&gt;，一种简单高效的实现方式来搭建个人的博客。&lt;/p&gt;
    
    </summary>
    
      <category term="other" scheme="http://yoursite.com/categories/other/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://yoursite.com/left/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/left/第一篇博客/</id>
    <published>2017-05-29T07:30:06.000Z</published>
    <updated>2017-06-29T09:39:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><p>一直想写博客的，但一直总是在忙项目，有时间也是玩会儿游戏，最近把游戏卸了，总算有时间了。以后会把写博客养成一个习惯，努力一个星期最少一篇，实在没时间就把之前写到印象笔记的文章重新整理一下。明天把搭建博客的过程写一下。</p>
<p>现在写下来激励自己，加油。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一篇博客&quot;&gt;&lt;a href=&quot;#第一篇博客&quot; class=&quot;headerlink&quot; title=&quot;第一篇博客&quot;&gt;&lt;/a&gt;第一篇博客&lt;/h1&gt;&lt;p&gt;一直想写博客的，但一直总是在忙项目，有时间也是玩会儿游戏，最近把游戏卸了，总算有时间了。以后会把写博客养成一个习惯，
    
    </summary>
    
      <category term="left" scheme="http://yoursite.com/categories/left/"/>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
